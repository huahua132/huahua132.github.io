<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>skynet_fly热更新存在的问题</title>
    <link href="/2023/10/10/think/reload_error/"/>
    <url>/2023/10/10/think/reload_error/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近有空在用skynet_fly写中国象棋的游戏，发现了room_game房间类游戏基础架构有些许不够好的地方，就对room_game房间类游戏基础架构做了优化，具体优化有空会另外写一篇blog，这里主要记录一个我想优化的时候，突然想到的一个热更问题。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h2 id="触发场景分析"><a href="#触发场景分析" class="headerlink" title="触发场景分析"></a>触发场景分析</h2><p>假如有A、B 两个服务，代码如下：</p><ul><li><strong>A服务</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> contriner_client = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;contriner_client&quot;</span><br><span class="hljs-keyword">local</span> timer = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;timer&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">()</span></span><br>    timer:new(timer.second,<span class="hljs-number">0</span>,CMD.send_msg_to_b)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.send_msg_to_b</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">local</span> b_client = contriner_client:new(<span class="hljs-string">&quot;B_m&quot;</span>)      <span class="hljs-comment">--用于访问B服务</span><br>    <span class="hljs-keyword">local</span> ret = b_client:mod_call(<span class="hljs-string">&quot;hello&quot;</span>)<br>    <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;send_msg_to_b:&quot;</span>,ret)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><ul><li><strong>B服务</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.hello</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HEELO A&quot;</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><p>很简单的一个示例，A服务间隔1秒给B服务发送hello消息。<br>然后我们修改代码如下：</p><ul><li><strong>A服务</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> contriner_client = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;contriner_client&quot;</span><br><span class="hljs-keyword">local</span> timer = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;timer&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">()</span></span><br>    timer:new(timer.second,<span class="hljs-number">0</span>,CMD.send_msg_to_b)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.send_msg_to_b</span><span class="hljs-params">()</span></span><br>    <span class="hljs-comment">-- local b_client = contriner_client:new(&quot;B_m&quot;)      --用于访问B服务</span><br>    <span class="hljs-comment">-- local ret = b_client:mod_call(&quot;hello&quot;)</span><br>    <span class="hljs-comment">-- log.info(&quot;send_msg_to_b:&quot;,ret)</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><ul><li><strong>B服务</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- function CMD.hello()</span><br><span class="hljs-comment">--     return &quot;HEELO A&quot;</span><br><span class="hljs-comment">-- end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><p>再执行热更，我们修改了A,B服务，我们不想让AB服务继续发送消息了，所有直接B服务直接去掉了hello命令，A服务也去掉了向B服务发送消息的代码。此时看起来没什么问题。<br>当时有一个问题，旧的A服务监听到了B服务更新了，此时它的消息会发送到新的B服务，那么问题就出现了。此时新的B服务hello函数并不存在。</p><h1 id="解决方案的思考"><a href="#解决方案的思考" class="headerlink" title="解决方案的思考"></a>解决方案的思考</h1><ul><li><strong>方案一</strong><br>  目前能想到的是，当一个服务是旧版本时，不能去切换访问新的服务，这种方案要保证旧服务需要联系的其他旧服务暂时都不下线。还有就是必须所有服务热更之前就要关闭掉该服务的新服务切换。</li></ul><h1 id="深入思考出现的问题"><a href="#深入思考出现的问题" class="headerlink" title="深入思考出现的问题"></a>深入思考出现的问题</h1><pre><code class="hljs">热更过程中，假设A服务先热更，A服务有可能访问到旧的B服务。也是有问题的。</code></pre>]]></content>
    
    
    <categories>
      
      <category>一些想法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一些想法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于增加skynet_fly 日志分割模块</title>
    <link href="/2023/09/09/skynet_fly/logrotate/"/>
    <url>/2023/09/09/skynet_fly/logrotate/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>通过群友对skynet_fly的使用测试，发现使用系统日志分割系统会有两个问题。</p><ol><li><strong>软件问题</strong> 可能有些系统并不会默认装载logrotate分割软件。</li><li><strong>权限问题</strong> 非root用户可能无法在<code>/etc/logrotate.d/</code>新增文件。</li></ol><p>就此埋下了我想实现一个内置日志分割模块的决心。</p><h1 id="项目修改"><a href="#项目修改" class="headerlink" title="项目修改"></a>项目修改</h1><ol><li>修改原来的<code>run.sh</code>不再启动即配置日志分割。</li><li>把使用系统日志分割变成一个可选项，增加了<code>create_logrotate.sh</code>，可以主动调用配置。</li><li>内置新增<code>log_rotate_m.lua</code>日志分割模块。</li></ol><h1 id="提供功能"><a href="#提供功能" class="headerlink" title="提供功能"></a>提供功能</h1><p>我没有去增加太多的配置项，我是按照我个人使用日志分割的场景来做的，后续如果有优秀建议，也可修改。</p><p>主要提供了两个功能，<strong>切割</strong>，<strong>保留历史日志文件整理</strong>。</p><ul><li><strong>切割</strong> 我目前写死了<strong>每天凌晨</strong>进行切割和整理，还做了文件至少多大才切割。</li><li><strong>保留历史日志文件整理</strong> 提供了保留多少天内，和保留多少个文件的配置。</li></ul><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>到点重命名日志文件，通过hup消息通知<code>skynet</code>日志服务重新打开日志文件，这种方式不会丢失日志，也不会占用内存。</p><h1 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>    logrotate_m = &#123;<br>        launch_seq = <span class="hljs-number">1</span>,<br>        launch_num = <span class="hljs-number">1</span>,<br>        default_arg = &#123;<br>            file_path = <span class="hljs-string">&#x27;./&#x27;</span>,          <span class="hljs-comment">--文件路径</span><br>            filename = <span class="hljs-string">&#x27;server.log&#x27;</span>,   <span class="hljs-comment">--文件名</span><br>            limit_size = <span class="hljs-number">0</span>,            <span class="hljs-comment">--最小分割大小</span><br>            max_age = <span class="hljs-number">7</span>,               <span class="hljs-comment">--最大保留天数</span><br>            max_backups = <span class="hljs-number">7</span>,           <span class="hljs-comment">--最大保留文件数</span><br>            sys_cmd = <span class="hljs-string">[[</span><br><span class="hljs-string">                /usr/bin/pkill -HUP -f skynet.logrotate_config.lua\n</span><br><span class="hljs-string">            ]]</span>,              <span class="hljs-comment">--系统命令</span><br>        &#125;<br>    &#125;,<br><br>    test_m = &#123;<br>        launch_seq = <span class="hljs-number">2</span>,<br>        launch_num = <span class="hljs-number">1</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>sys_cmd就是调用系统命令给skynet发送HUP信号，skynet logger服务收到HUP信号就会重新打开日志文件。</p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p><a href="https://github.com/huahua132/skynet_fly/tree/master/examples/logrotate">examples&#x2F;logrotate</a></p><h1 id="模块实现路径"><a href="#模块实现路径" class="headerlink" title="模块实现路径"></a>模块实现路径</h1><p><a href="https://github.com/huahua132/skynet_fly/blob/master/lualib/module/logrotate_m.lua">lualib&#x2F;module&#x2F;logrotate_m.lua</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>增加skynet_fly内置日志分割，为skynet_fly扩展了可选使用功能。<br><a href="https://github.com/huahua132/skynet_fly">skynetfly源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog编写环境搭建</title>
    <link href="/2023/09/02/record/blog/"/>
    <url>/2023/09/02/record/blog/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然可能换电脑了，需要重新搭建起编写blog的环境。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>安装git,拉取blog工程。</li><li>设置git环境。      <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;你的GitHub用户名&quot;<br>git config --global user.email &quot;你的GitHub注册邮箱&quot;<br>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure></li><li>配置ssh密钥。</li><li>安装nodejs <a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">https://link.zhihu.com/?target=https%3A//nodejs.org/en/download/</a></li><li>npm install -g hexo-cli</li><li>到工程根目录测试hexo 命令</li></ol><h1 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h1><ul><li>hexo clean 清理构建</li><li>hexo g 构建</li><li>hexo s 发布本地服务</li><li>hexo d 发布到github</li></ul>]]></content>
    
    
    <categories>
      
      <category>notebook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notebook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于增加skynet_fly lua服务启动的后置加载</title>
    <link href="/2023/08/20/skynet_fly/after_load/"/>
    <url>/2023/08/20/skynet_fly/after_load/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>skynet lua服务默认启动加载是使用<code>skynet/lualib/loader.lua</code>，<code>loader.lua</code> 会加载并执行<code>config</code>中配置的preload路径的lua文件，这个操作的好处是可以把所有服务的一些前置环境操作，或者一些常用工具函数写到全局变量中(我更倾向于封装成工具模块通过<code>require</code>引用，不去污染全局环境，尽量保持原生环境)。在skynet_fly框架中，我就利用preload做了<code>luapath</code>的设置来达到不用手写path的目的。在这之前我都没有想改动<code>preload</code>的想法，直到有一天，我萌生了想给<code>skynet_fly</code>日志增加钩子函数的想法，因为在工作中也在严重日志中增加了邮件推送，不过是直接修改的日志服务，不满足开闭原则，不够优雅。</p><h2 id="增加日志钩子函数"><a href="#增加日志钩子函数" class="headerlink" title="增加日志钩子函数"></a>增加日志钩子函数</h2><p>那么如何给日志服务增加钩子函数又满足开闭原则呢？，我目前能想到的，有两种方案。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>在log服务中实现钩子函数。<br>业务层弃用<strong>skynet logger原生日志服务</strong>，改用<strong>lua自定义日志服务</strong>并在logger服务启动后利用消息的方式通知logger服务需要加载哪些钩子函数文件实现。</p><ul><li><p><strong>优势</strong></p><ol><li>钩子函数由日志服务执行，业务逻辑不用处理，不影响业务服务吞吐量。</li></ol></li><li><p><strong>劣势</strong></p><ol><li>用lua写日志服务性能远远低于c层的日志服务，c比lua快10倍。</li><li>skynet原生大量代码依赖原生日志服务，如果自定义要么保留原生日志，要么修改大量源码。</li><li>想要利用signal_hup信号来切割日志也需要修改源码。</li></ol></li></ul><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>在log模块中实现钩子函数。<br>log模块中简单的调用增加钩子函数的API,在<strong>preload</strong>中设置钩子函数，这样每个启动lua服务都挂上钩子函数。</p><ul><li><p><strong>优势</strong></p><ol><li>最小改动。</li></ol></li><li><p><strong>劣势</strong></p><ol><li>增加了业务层log的调用开销。</li></ol></li></ul><p>通过对比两种<strong>方案</strong>，我选用了方案二，原因如下：<br>    1. 尽量保持skynet源码不改动。<br>    2. c实现的日志服务速度更快。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在使用preload去加载钩子函数的时候，想到这个是偏业务的实现，并不是所有项目都要在log日志外挂一个钩子函数，也可能每个项目钩子函数实现不同，这时候有人可能会想到，skynet中的preload不是可以配置的吗，但是我想大部分项目都依赖一个preload文件，突然有一个项目不同，岂不是要拷贝一份再新增不同，或者全部堆叠在一个文件中，我觉得这是很糟糕的设计。不满足开闭原则，本身skynet_fly项目就需要依赖框架的preload.lua文件，当然有个解决方案就是在自定义的preload中再次load preload.lua，手动链式依赖。但是我不想这样设计，我希望我用代码生成config能不手改就不手改，况且这个还是路径，手写挺麻烦的。解决这个问题很简单，把前置加载单个文件，改为前置加载多个文件，skynet_fly默认加载框架的<code>preload.lua</code>，其他项目需要额外加载只需要在main.lua中显示增加。这里又想到了preload有个不好的地方，preload中<code>require</code>的文件是不能热更的，应该在这之前还没有调用<code>skynet.codecache off</code>。所以就想着增加<code>afterload</code>,afterload是lua服务最后加载的，如果是可热更模块已经执行了<code>skynet.codecache off</code>。</p><h1 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h1><p>加载顺序是preload-main-afterload<br>可想而知afterload执行代码，不可能在main<code>require</code>期间生效。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre><code class="hljs">skynet_fly/examples/log_hookskynet_fly/examples/pre_after_load</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>修改了preload和afterload能让skynet_fly在微服务多项目架构增加更多的灵活性和扩展性。<br><a href="https://github.com/huahua132/skynet_fly">skynetfly源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux系统常用命令记录</title>
    <link href="/2023/08/12/record/linux/"/>
    <url>/2023/08/12/record/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h1><h2 id="打开core文件"><a href="#打开core文件" class="headerlink" title="打开core文件"></a>打开core文件</h2><p><code>gdb filename core</code></p><h2 id="查看错误堆栈"><a href="#查看错误堆栈" class="headerlink" title="查看错误堆栈"></a>查看错误堆栈</h2><p><code>bt</code></p><h1 id="centos-gcc版本升级"><a href="#centos-gcc版本升级" class="headerlink" title="centos gcc版本升级"></a>centos gcc版本升级</h1><p><code>sudo yum install centos-release-scl</code><br><code>sudo yum install devtoolset-9-gcc*</code><br><code>scl enable devtoolset-9 bash</code></p><h1 id="如何使用systemd运行程序"><a href="#如何使用systemd运行程序" class="headerlink" title="如何使用systemd运行程序"></a>如何使用systemd运行程序</h1><p><code>cd /etc/systemd/system</code><br><code>vim myapp.service</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=myapp<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/path/to/myapp arg1 arg2<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><code>systemctl start myapp</code></p><p>##好处</p><ul><li>守护进程运行</li><li>可以写好启动配置，方便后续启动</li></ul>]]></content>
    
    
    <categories>
      
      <category>notebook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notebook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux不产生core原因</title>
    <link href="/2023/07/28/record/record/"/>
    <url>/2023/07/28/record/record/</url>
    
    <content type="html"><![CDATA[<ol><li>首先可能ulimit限制了。<br><code>ulimit -a</code></li></ol><p>如果core 限制大小为0，需要修改。<br>调用命令<br><code>ulimit -c unlimited</code></p><ol start="2"><li>考虑产生位置问题<br>查看 <code>/proc/sys/kernel/core_pattern</code>文件内容。<br>如果文件内容不是core，通知命令<br><code>sudo bash -c &quot;echo core &gt; /proc/sys/kernel/core_pattern&quot;</code>修改</li></ol>]]></content>
    
    
    <categories>
      
      <category>record</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于cluster 远程rpc调用</title>
    <link href="/2023/07/28/skynet_fly/cluster_rpc/"/>
    <url>/2023/07/28/skynet_fly/cluster_rpc/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>cluster 远程rpc是依赖<a href="https://blog.codingnow.com/2017/03/skynet_cluster.html">skynet的cluster模式</a>实现的。<br>    skynet_fly远程rpc调用的实现注重什么：<br>    * 与热更模板系统完美融合。<br>    * 简单易用的API设计。<br>    * 支持多结点。<br>    * 支持服务发现。</p><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>因为远程rpc调用结点偶尔下线，上线都是常有的事，所以不建议用来做强生效性消息(就是调用了，一定要执行成功)。<br>skynet_fly cluster rpc 默认启用<code>__nowaiting</code>就是结点连不上也不会等待，rpc远程调用适合做查询，弱通知。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>基于skynet cluster mode 模式，扩展了<code>cluster_sever</code>,<code>cluster_client_m</code>,<code>cluster_client</code>3个文件。<br><img src="/img/skynet_fly/cluster_rpc.png"></p><ul><li><p><code>cluster_sever.lua</code><br>它是一个skynet服务。<br><strong>负责</strong></p><ol><li>cluster rpc服务开启监听。</li><li>后续服务发现机制的服务注册。</li><li>担任rpc调用入口服务。</li></ol></li><li><p><code>cluster_client_m.lua</code><br>它是一个skynet_fly可热更模块。<br><strong>负责</strong></p><ol><li>cluster 服务配置加载。</li><li>后续cluster服务发现。</li><li>担任远程rpc调用代理。</li><li>对接cluster_server消息。</li></ol></li><li><p><code>cluster_client.lua</code><br>它是一个lua模块。<br><strong>负责</strong></p><ol><li>封装简化远程rpc调用。</li><li>保持内部rpc调用相同的调用方法。</li></ol></li></ul><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><p>examples&#x2F;cluster_server_1<br>examples&#x2F;cluster_server_2<br>examples&#x2F;cluster_client</p><p>cluster_server_1和cluster_server_2代码一样，监听端口配置不同，为了模拟相同服务配置在2台机器上。<br><strong>启动步骤</strong></p><p>cluster_server_1</p><ol><li>构建 <code>sh ../../binshell/make_server.sh ../../</code></li><li>修改配置，打开<code>cluster_server_1_config.lua</code>文件，修改svr_name&#x3D;cluster_server</li><li>启动script&#x2F;run.sh</li></ol><p>cluster_server_2</p><ol><li>构建 <code>sh ../../binshell/make_server.sh ../../</code></li><li>修改配置，打开<code>cluster_server_1_config.lua</code>文件，修改svr_name&#x3D;cluster_server，修改svr_id &#x3D; 2,修改debug_port改为没有被使用的端口。</li><li>启动script&#x2F;run.sh</li></ol><p>cluster_client</p><ol><li>构建 <code>sh ../../binshell/make_server.sh ../../</code></li><li>修改配置，打开<code>cluster_server_1_config.lua</code>文件，修改debug_port改为没有被使用的端口。</li><li>启动script&#x2F;run.sh</li></ol><ul><li>服务端</li></ul><p>main.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> mod_config = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;mod_config&quot;</span><br><span class="hljs-keyword">local</span> table_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;table_util&quot;</span><br><br>skynet.start(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;start cluster_server!!!&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>)<br><span class="hljs-keyword">local</span> cmgr = skynet.uniqueservice(<span class="hljs-string">&#x27;contriner_mgr&#x27;</span>)<br><br>skynet.newservice(<span class="hljs-string">&quot;debug_console&quot;</span>, skynet.<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&#x27;debug_port&#x27;</span>))<br><br><span class="hljs-keyword">for</span> mod_name,mod_cfg <span class="hljs-keyword">in</span> table_util.sort_ipairs(mod_config,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a,b)</span></span><br><span class="hljs-keyword">return</span> a.launch_seq &lt; b.launch_seq<br><span class="hljs-keyword">end</span>) <span class="hljs-keyword">do</span><br>skynet.call(cmgr,<span class="hljs-string">&#x27;lua&#x27;</span>,<span class="hljs-string">&#x27;load_module&#x27;</span>,mod_name)<br><span class="hljs-keyword">end</span><br><br>skynet.uniqueservice(<span class="hljs-string">&quot;cluster_server&quot;</span>) <span class="hljs-comment">--启动rpc服务</span><br>skynet.<span class="hljs-built_in">exit</span>()<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>load_mods.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-comment">--共享配置</span><br>share_config_m = &#123;<br>launch_seq = <span class="hljs-number">1</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>default_arg = &#123;<br><span class="hljs-comment">--cluster_server用的配置</span><br>cluster_server = &#123;<br>host = <span class="hljs-string">&quot;127.0.0.1:9688&quot;</span>,  <span class="hljs-comment">--rpc监听端口</span><br>&#125;<br>&#125;<br>&#125;,<br><br>test_m = &#123;<br>launch_seq = <span class="hljs-number">2</span>,<br>launch_num = <span class="hljs-number">6</span>,<br>mod_args = &#123;<br>&#123;instance_name = <span class="hljs-string">&quot;test_one&quot;</span>&#125;,<br>&#123;instance_name = <span class="hljs-string">&quot;test_one&quot;</span>&#125;,<br>&#123;instance_name = <span class="hljs-string">&quot;test_one&quot;</span>&#125;,<br>&#123;instance_name = <span class="hljs-string">&quot;test_two&quot;</span>&#125;,<br>&#123;instance_name = <span class="hljs-string">&quot;test_two&quot;</span>&#125;,<br>&#123;instance_name = <span class="hljs-string">&quot;test_two&quot;</span>&#125;,<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>test_m.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> contriner_client = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;contriner_client&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">string</span><br><br><span class="hljs-keyword">local</span> g_config = <span class="hljs-literal">nil</span><br><br><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.hello</span><span class="hljs-params">(who)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s send hello msg for me&quot;</span>,who))<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.ping</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> confclient = contriner_client:new(<span class="hljs-string">&quot;share_config_m&quot;</span>)<br><span class="hljs-keyword">local</span> conf = confclient:mod_call(<span class="hljs-string">&#x27;query&#x27;</span>,<span class="hljs-string">&#x27;cluster_server&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;pong %s %s %s&quot;</span>,g_config.instance_name,conf.host,skynet.<span class="hljs-built_in">self</span>())<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">(config)</span></span><br>g_config = <span class="hljs-built_in">config</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><ul><li>客户端</li></ul><p>main.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> mod_config = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;mod_config&quot;</span><br><span class="hljs-keyword">local</span> table_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;table_util&quot;</span><br><br>skynet.start(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;start cluster_client!!!&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>)<br><span class="hljs-keyword">local</span> cmgr = skynet.uniqueservice(<span class="hljs-string">&#x27;contriner_mgr&#x27;</span>)<br><br>skynet.newservice(<span class="hljs-string">&quot;debug_console&quot;</span>, skynet.<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&#x27;debug_port&#x27;</span>))<br><br><span class="hljs-keyword">for</span> mod_name,mod_cfg <span class="hljs-keyword">in</span> table_util.sort_ipairs(mod_config,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a,b)</span></span><br><span class="hljs-keyword">return</span> a.launch_seq &lt; b.launch_seq<br><span class="hljs-keyword">end</span>) <span class="hljs-keyword">do</span><br>skynet.call(cmgr,<span class="hljs-string">&#x27;lua&#x27;</span>,<span class="hljs-string">&#x27;load_module&#x27;</span>,mod_name)<br><span class="hljs-keyword">end</span><br><br>skynet.<span class="hljs-built_in">exit</span>()<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>load_mods.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>cluster_client_m = &#123;<br>launch_seq = <span class="hljs-number">1</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>default_arg = &#123;<br>node_map = &#123;<br>[<span class="hljs-string">&#x27;cluster_server&#x27;</span>] = &#123;<br>[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;127.0.0.1:9688&quot;</span>,<br>[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;127.0.0.1:9689&quot;</span>,<br>&#125;<br>&#125;<br>&#125;<br>&#125;,<br><br>test_m = &#123;<br>launch_seq = <span class="hljs-number">2</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>test_m</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> cluster_client = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;cluster_client&quot;</span><br><br><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> cli = cluster_client:new(<span class="hljs-string">&quot;cluster_server&quot;</span>,<span class="hljs-string">&quot;test_m&quot;</span>) <span class="hljs-comment">--访问cluster_server的test_m模板</span><br><br>cli:one_balance_send(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;one_balance_send&quot;</span>)<br>cli:one_mod_send(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;one_mod_send&quot;</span>)<br><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,<span class="hljs-number">20</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;balance ping &quot;</span>,i,cli:one_balance_call(<span class="hljs-string">&quot;ping&quot;</span>))<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,<span class="hljs-number">20</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;mod ping &quot;</span>,i,cli:one_mod_call(<span class="hljs-string">&quot;ping&quot;</span>))<br><span class="hljs-keyword">end</span><br><br>cli:all_mod_send(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;all_mod_send&quot;</span>)<br><span class="hljs-keyword">local</span> ret = cli:all_mod_call(<span class="hljs-string">&quot;ping&quot;</span>)<br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;all_mod_call: &quot;</span>,ret)<br><br>cli:all_balance_send(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;all_balance_send&quot;</span>)<br><span class="hljs-keyword">local</span> ret = cli:all_balance_call(<span class="hljs-string">&quot;ping&quot;</span>)<br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;all_balance_call: &quot;</span>,ret)<br><br>cli:one_broadcast(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;one_broadcast&quot;</span>)<br>cli:all_broadcast(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;all_broadcast&quot;</span>)<br><br>cli:set_instance_name(<span class="hljs-string">&quot;test_one&quot;</span>)<br>cli:one_balance_send_by_name(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;one_balance_send_by_name&quot;</span>)<br>cli:one_mod_send_by_name(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;one_mod_send_by_name&quot;</span>)<br><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,<span class="hljs-number">20</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;one_balance_call_by_name ping &quot;</span>,i,cli:one_balance_call_by_name(<span class="hljs-string">&quot;ping&quot;</span>))<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,<span class="hljs-number">20</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;one_mod_call_by_name ping &quot;</span>,i,cli:one_mod_call_by_name(<span class="hljs-string">&quot;ping&quot;</span>))<br><span class="hljs-keyword">end</span><br><br>cli:all_mod_send_by_name(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;all_mod_send_by_name&quot;</span>)<br><span class="hljs-keyword">local</span> ret = cli:all_mod_call_by_name(<span class="hljs-string">&quot;ping&quot;</span>)<br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;all_mod_call_by_name: &quot;</span>,ret)<br><br>cli:all_balance_send_by_name(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;all_balance_send_by_name&quot;</span>)<br><span class="hljs-keyword">local</span> ret = cli:all_balance_call_by_name(<span class="hljs-string">&quot;ping&quot;</span>)<br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;all_balance_call_by_name: &quot;</span>,ret)<br><br>cli:one_broadcast_by_name(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;one_broadcast_by_name&quot;</span>)<br>cli:all_broadcast_by_name(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;all_broadcast_by_name&quot;</span>)<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><h1 id="基于redis做的服务发现对比etcd如何"><a href="#基于redis做的服务发现对比etcd如何" class="headerlink" title="基于redis做的服务发现对比etcd如何"></a>基于redis做的服务发现对比etcd如何</h1><p>通常都是基于etcd做服务发现，etcd 之所以适合用于服务发现,主要有以下几个原因:</p><ol><li><p>支持服务的自动注册和发现<br>etcd允许服务在启动时主动向etcd注册自己提供的服务,而客户端可以通过监听服务变更事件来发现可用的服务实例。这样就无需人工记录服务地址。</p></li><li><p>支持服务健康检查<br>etcd支持对保存的服务进行定期心跳检测,一旦服务失效就可以将其服务地址从注册表中删除或标记为不可用。</p></li><li><p>服务信息更新的事件通知<br>etcd支持watch机制,服务信息有变更时,可立即通知注册的客户端。这样客户端可以快速响应服务的变化。</p></li><li><p>简单灵活的HTTP API<br>etcd提供HTTP RESTful API用于读写服务注册表,使用简单且多语言都可以轻松访问。</p></li><li><p>服务注册表数据持久化<br>etcd会将服务注册表数据持久保存,这样即使etcd节点重启,注册表数据也不会丢失。</p></li><li><p>支持服务负载均衡<br>可以在etcd中保存服务的额外元数据,如服务的负载信息,用于实现服务负载均衡。</p></li></ol><p>综上,etcd作为一个高可用的分布式KV存储系统,非常适合用于服务注册与发现场景,成为微服务架构下的配置中心和服务注册表。</p><p>那么redis做服务发现可以保证以上几点呢？</p><ol><li><p>支持服务的自动注册和发现<br>redis的sub&#x2F;pub机制可以轻松实现。</p></li><li><p>支持服务健康检查<br>通知定期对服务的host进行设置，并设置过期时间和过期事件通知，从而可以监听服务是否健康。</p></li><li><p>服务信息更新的事件通知<br>redis通知开启notify-keyspace-events KA配置，客户端通过sub&#x2F;pub机制可以监听key的所有事件，set,expired等等。</p></li><li><p>简单灵活的HTTP API<br>redis仅仅支持tcp长连接，虽然通用性差一下，当时通信效率更好。</p></li><li><p>服务注册表数据持久化<br>redis也有RDB和AOF持久化策略。</p></li><li><p>支持服务负载均衡<br>redis也可以使用hash结构保存结点额外元数据，服务的负载信息等等，也可以用于实现负载均衡。</p></li></ol><p>综上几点，可以说，redis也非常适合做服务发现。</p><h1 id="redis做服务发现实现"><a href="#redis做服务发现实现" class="headerlink" title="redis做服务发现实现"></a>redis做服务发现实现</h1><ul><li><p><strong>前提</strong><br>我们启动redis时，需要修改redis.conf<br>设置 <code>notify-keyspace-events KA</code><br>这样我们可以通过watch监听某些key的所有事件，包括set(设置)，expired(过期)。</p></li><li><p><strong>rpc基础函数封装</strong><br>给rpc设置独特的key命名，防止以后业务key命名冲突,我基于框架命名。<br><code>string.format(&quot;skynet_fly:rpc:%s:%s&quot;,svr_name,svr_id)</code></p></li></ul><p>主要需要实现3个方法，<code>register</code>,<code>get_node_host</code>,<code>watch</code>。</p><ul><li><strong>register</strong> 用于服务端服务开启时，间隔一秒去设置host信息，并设置2秒的过期时间。</li><li><strong>get_node_host</strong> 用于客户端去拿取结点的host信息。</li><li><strong>watch</strong> 用于客户端监听key的set和expired事件。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> redisf = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;redisf&quot;</span><br><span class="hljs-keyword">local</span> string_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;string_util&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">setmetatable</span> = <span class="hljs-built_in">setmetatable</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">string</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">tonumber</span> = <span class="hljs-built_in">tonumber</span><br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><span class="hljs-keyword">local</span> meta = &#123;<span class="hljs-built_in">__index</span> = M&#125;<br><br><span class="hljs-keyword">local</span> g_dbindex = <span class="hljs-number">0</span>          <span class="hljs-comment">--redis几号数据库</span><br><span class="hljs-keyword">local</span> g_db_name = <span class="hljs-string">&quot;rpc&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:new</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> cli = redisf.new_client(g_db_name)<br><span class="hljs-keyword">local</span> t = &#123;<br>cli = cli<br>&#125;<br><span class="hljs-built_in">assert</span>(cli,<span class="hljs-string">&quot;can`t connect redis&quot;</span>,g_db_name)<br><span class="hljs-built_in">setmetatable</span>(t,meta)<br><span class="hljs-keyword">return</span> t<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--注册，设置连接信息2秒过期时间，需要1秒调用一次</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:register</span><span class="hljs-params">(svr_name,svr_id,host)</span></span><br><span class="hljs-built_in">assert</span>(svr_name,<span class="hljs-string">&quot;not svr_name&quot;</span>)<br><span class="hljs-built_in">assert</span>(svr_id,<span class="hljs-string">&quot;not svr_id&quot;</span>)<br><span class="hljs-built_in">assert</span>(host,<span class="hljs-string">&quot;not host&quot;</span>)<br><br><span class="hljs-keyword">local</span> key = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;skynet_fly:rpc:%s:%s&quot;</span>,svr_name,svr_id)<br><span class="hljs-built_in">self</span>.cli:set(key,host,<span class="hljs-string">&quot;EX&quot;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--获取结点的ip和端口</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:get_node_host</span><span class="hljs-params">(svr_name,svr_id)</span></span><br><span class="hljs-built_in">assert</span>(svr_name,<span class="hljs-string">&quot;not svr_name&quot;</span>)<br><span class="hljs-built_in">assert</span>(svr_id,<span class="hljs-string">&quot;not svr_id&quot;</span>)<br><br><span class="hljs-keyword">local</span> key = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;skynet_fly:rpc:%s:%s&quot;</span>,svr_name,svr_id)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>.cli:get(key)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--监听结点host</span><br><span class="hljs-comment">--redis config 需要配置 notify-keyspace-events KA</span><br><span class="hljs-comment">--可以监听key的所有操作事情包括过期</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:watch</span><span class="hljs-params">(svr_name,call_back)</span></span><br><span class="hljs-keyword">local</span> k = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;__keyspace@%d__:skynet_fly:rpc:%s:*&quot;</span>,g_dbindex,svr_name)<br><span class="hljs-keyword">return</span> redisf.new_watch(g_db_name,&#123;&#125;,&#123;k&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event,key,psubkey)</span></span><br><span class="hljs-keyword">local</span> split_str = string_util.split(key,<span class="hljs-string">&#x27;:&#x27;</span>)<br><span class="hljs-keyword">local</span> svr_id = <span class="hljs-built_in">tonumber</span>(split_str[#split_str])<br><span class="hljs-keyword">if</span> event == <span class="hljs-string">&#x27;set&#x27;</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">local</span> host = <span class="hljs-built_in">self</span>:get_node_host(svr_name,svr_id)<br><span class="hljs-keyword">if</span> host <span class="hljs-keyword">then</span><br>call_back(event,svr_name,svr_id,host)<br><span class="hljs-keyword">else</span><br>call_back(<span class="hljs-string">&quot;get_failed&quot;</span>,svr_name,svr_id)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">elseif</span> event == <span class="hljs-string">&#x27;expired&#x27;</span> <span class="hljs-keyword">then</span><br>call_back(event,svr_name,svr_id,<span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><ul><li><p><strong>服务端修改</strong><br>考虑到兼容性和扩展性，只是在<code>cluster_server.lua</code>增加了register的配置，不想使用服务发现也可以，后续想用etcd做服务发现也好扩展。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--共享配置</span><br>share_config_m = &#123;<br>launch_seq = <span class="hljs-number">1</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>default_arg = &#123;<br><span class="hljs-comment">--cluster_server用的配置</span><br>cluster_server = &#123;<br>host = <span class="hljs-string">&quot;127.0.0.1:9688&quot;</span>,<br>register = <span class="hljs-string">&quot;redis&quot;</span>,        <span class="hljs-comment">--连接信息注册到redis</span><br>&#125;,<br><br>redis = &#123;<br><span class="hljs-comment">--rpc连接配置</span><br>rpc = &#123;<br>host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-number">6379</span>,<br>auth = <span class="hljs-string">&#x27;123456&#x27;</span>,<br>db = <span class="hljs-number">0</span>,<br>&#125;,<br>&#125;,<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>需要在redis配置中配置名称为rpc的配置。<br>cluster_server增加如下代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> register = conf.register<br><span class="hljs-keyword">if</span> register == <span class="hljs-string">&#x27;redis&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-comment">--注册到redis</span><br><span class="hljs-keyword">local</span> rpccli = rpc_redis:new()<br><span class="hljs-comment">--一秒写一次</span><br>timer:new(timer.second,<span class="hljs-number">0</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>rpccli:register(g_svr_name,g_svr_id,conf.host)<br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>一秒一次是调用注册，如果服务下线了，客户端将收到key过期的通知。</p></li><li><p><strong>客户端</strong><br>考虑到兼容性和扩展性，只是在<code>cluster_server.lua</code>增加了watch的配置，不想使用服务发现也可以，后续想用etcd做服务发现也好扩展。<br>load_mods.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs lua">share_config_m = &#123;<br>launch_seq = <span class="hljs-number">1</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>default_arg = &#123;<br>redis = &#123;<br><span class="hljs-comment">--rpc连接配置</span><br>rpc = &#123;<br>host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-number">6379</span>,<br>auth = <span class="hljs-string">&#x27;123456&#x27;</span>,<br>db = <span class="hljs-number">0</span>,<br>&#125;,<br>&#125;,<br>&#125;<br>&#125;,<br><br>cluster_client_m = &#123;<br>launch_seq = <span class="hljs-number">2</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>default_arg = &#123;<br>node_map = &#123;<br>[<span class="hljs-string">&#x27;cluster_server_byredis&#x27;</span>] = <span class="hljs-literal">true</span>,   <span class="hljs-comment">--连接cluster_server_byredis服务</span><br>&#125;,<br>watch = <span class="hljs-string">&#x27;redis&#x27;</span>,  <span class="hljs-comment">--监听redis的方式做服务发现</span><br>&#125;<br>&#125;,<br><br></code></pre></td></tr></table></figure></li></ul><p>cluster_client_m.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> watch == <span class="hljs-string">&#x27;redis&#x27;</span> <span class="hljs-keyword">then</span><br><span class="hljs-comment">--redis服务发现方式</span><br><span class="hljs-keyword">local</span> rpccli = rpc_redis:new()<br><span class="hljs-keyword">for</span> svr_name,node <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(node_map) <span class="hljs-keyword">do</span><br>g_redis_watch_cancel_map[svr_name] = rpccli:watch(svr_name,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event,name,id,host)</span></span><br><span class="hljs-keyword">if</span> event == <span class="hljs-string">&#x27;set&#x27;</span> <span class="hljs-keyword">then</span>            <span class="hljs-comment">--设置</span><br><span class="hljs-keyword">local</span> old_host = get_node_host(name,id)<br><span class="hljs-keyword">if</span> old_host ~= host <span class="hljs-keyword">then</span><br>del_node(name,id)<br>add_node(name,id,host)<br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;change cluster node :&quot;</span>,name,id,old_host,host)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">elseif</span> event == <span class="hljs-string">&#x27;expired&#x27;</span> <span class="hljs-keyword">then</span>    <span class="hljs-comment">--过期</span><br>del_node(name,id)<br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;down cluster node :&quot;</span>,name,id)<br><span class="hljs-keyword">elseif</span> event == <span class="hljs-string">&#x27;get_failed&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-comment">--拿不到配置，通常是因为redis挂了，或者key被意外删除，或者redis出现性能瓶颈了</span><br>del_node(name,id)<br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;get_failed cluster node :&quot;</span>,name,id)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-comment">--本机配置方式</span><br><span class="hljs-keyword">for</span> svr_name,node <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(node_map) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">for</span> svr_id,host <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(node) <span class="hljs-keyword">do</span><br>add_node(svr_name,svr_id,host)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>完成使用实例可以查看运行,<code>examples/cluster_client_byredis</code>，<code>examples/cluster_server_byredis_1</code>,<code>examples/cluster_server_byredis_2</code>。<br>跟没有使用服务发现的示例对比，区别主要在load_mods.lua配置上面。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>cluster_rpc API保持了易用性，服务发现机制也保留了扩展性,后续想支持ectd可以非常方便，不过cluster_rpc只方便跟skynet的项目做对接，后续看要不要实现grpc。</p><p><a href="https://github.com/huahua132/skynet_fly">skynetfly源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于room_game可热更匹配房间类游戏架构</title>
    <link href="/2023/07/22/skynet_fly/room_game/"/>
    <url>/2023/07/22/skynet_fly/room_game/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>room_game是skynet_fly基于热更系统实现的匹配房间类游戏架构。<br>    room_game注重什么：<br>    * 框架与业务解耦。<br>    * 可热更。<br>    * 协议使用自由，目前提供protobuf和json协议。<br>    * socket和websocket通用。</p><h1 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h1><p>room_game架构由多个skynet服务组成,由<strong>gate网关</strong>，<strong>login登录服</strong>,<strong>hall大厅服</strong>，<strong>match匹配服</strong>,<strong>room房间服</strong>组成。<br>room_game针对玩家登录、登出事情处理好了服务之间消息处理。预留了相关事件的接口，开发新游戏只需要针对相关接口做对应的处理就行。</p><p><img src="/img/skynet_fly/room_game.png"></p><ul><li><p><strong>gate网关</strong><br>room_game可以选择使用gate或者ws_gate，gate用的是skynet原生的gate，ws_gate是skynet_fly基于skynet的websocket实现的。<br>ws_gate是基于master&#x2F;slave模式，slave可以开多个，可以充分利用多核优势。</p></li><li><p><strong>login登录服</strong><br>登录服依赖 <strong>share_config_m</strong>配置。<br>下面是写在load_mods.lua的配置。<br>登录服是不支持热更的，因为agent是跟player_id绑定的，登录需要一直记录player_id和对应管理agent的hall大厅对重连做保障。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--共享配置</span><br>share_config_m = &#123;<br>launch_seq = <span class="hljs-number">1</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>default_arg = &#123;<br><span class="hljs-comment">--room_game_login用的配置</span><br>room_game_login = &#123;<br>gateservice = <span class="hljs-string">&quot;gate&quot;</span>, <span class="hljs-comment">--gate 或者 wsgate</span><br><span class="hljs-comment">--gate连接配置</span><br>gateconf = &#123;<br>address = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-number">8001</span>,<br>maxclient = <span class="hljs-number">2048</span>,<br>&#125;,<br>login_plug = <span class="hljs-string">&quot;login_plug&quot;</span>,<br>&#125;<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>其中<code>login_plug</code>表示登录服需要引入的登录插件。<br>其中插件需要实现全部接口,不然会被assert断言导致启动失败。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">assert</span>(login_plug.init,<span class="hljs-string">&quot;login_plug not init&quot;</span>)   <span class="hljs-comment">--初始化</span><br><span class="hljs-built_in">assert</span>(login_plug.<span class="hljs-built_in">unpack</span>,<span class="hljs-string">&quot;login_plug not unpack&quot;</span>)              <span class="hljs-comment">--解包函数</span><br><span class="hljs-built_in">assert</span>(login_plug.check,<span class="hljs-string">&quot;login_plug not check&quot;</span>)   <span class="hljs-comment">--登录检查</span><br><span class="hljs-built_in">assert</span>(login_plug.login_succ,<span class="hljs-string">&quot;login_plug not login_succ&quot;</span>)   <span class="hljs-comment">--登录成功</span><br><span class="hljs-built_in">assert</span>(login_plug.login_failed,<span class="hljs-string">&quot;login_plug not login_failed&quot;</span>)  <span class="hljs-comment">--登录失败</span><br><span class="hljs-built_in">assert</span>(login_plug.disconnect,<span class="hljs-string">&quot;login_plug not disconnect&quot;</span>)      <span class="hljs-comment">--掉线</span><br><span class="hljs-built_in">assert</span>(login_plug.login_out,<span class="hljs-string">&quot;login_plug not login_out&quot;</span>)        <span class="hljs-comment">--登出</span><br><span class="hljs-built_in">assert</span>(login_plug.time_out,<span class="hljs-string">&quot;login_plug not time_out&quot;</span>)   <span class="hljs-comment">--登录超时时间</span><br><br><span class="hljs-built_in">assert</span>(login_plug.logining,<span class="hljs-string">&quot;login_plug not logining&quot;</span>)          <span class="hljs-comment">--正在登录中</span><br><span class="hljs-built_in">assert</span>(login_plug.repeat_login,<span class="hljs-string">&quot;login_plug not repeat_login&quot;</span>)  <span class="hljs-comment">--重复登录</span><br></code></pre></td></tr></table></figure></li><li><p><code>init()</code> 插件可能需要做一些初始化的工作，比如加载pb协议。</p></li><li><p><code>unpack(msg,sz)</code> 客户端消息解包函数。</p></li><li><p><code>check(gate,fd,packname,req)</code> 登录检查函数，成功应该返回玩家id，登录失败通常返回nil,errcode,errmsg，errcode,errmsg将传入login_failed中。</p></li><li><p><code>login_failed(gate,fd,player_id,errcode,errmsg)</code> 登录失败，这里可以给客户端发送登录失败的错误信息。</p></li><li><p><code>login_succ(gate,fd,player_id,login_res)</code> 登录成功，这里可以给客户端发送登录成功。</p></li><li><p><code>login_out(player_id)</code> 登出回调。</p></li><li><p><code>disconnect(gate,fd,player_id)</code> 掉线回调。</p></li><li><p><code>logining(gate,fd,player_id)</code> 正在登入中。上一个登录请求还没有处理完。</p></li><li><p><code>repeat_login(gate,fd,player_id)</code> 被挤号。 一般这里通知在其他设备登录。</p></li><li><p><strong>hall大厅服</strong><br>大厅服可以启动多个，用于管理agent，记录玩家绑定的match服务和room服务，保证断线重连可以重回房间。<br>大厅服支持热更，热更之后的玩家都会登录到新的服务，旧的服务一直维持到该服务中的所有玩家登出。<br>大厅服配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--大厅服</span><br>room_game_hall_m = &#123;<br>launch_seq = <span class="hljs-number">2</span>,<br>launch_num = <span class="hljs-number">6</span>,<br>default_arg = &#123;<br>hall_plug = <span class="hljs-string">&quot;hall_plug&quot;</span>,<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>其中<code>hall_plug</code>表示大厅服需要实现的插件接口。</p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">assert</span>(hall_plug.init,<span class="hljs-string">&quot;not init&quot;</span>)             <span class="hljs-comment">--初始化</span><br><span class="hljs-built_in">assert</span>(hall_plug.<span class="hljs-built_in">unpack</span>,<span class="hljs-string">&quot;not unpack&quot;</span>)         <span class="hljs-comment">--解包函数</span><br><span class="hljs-built_in">assert</span>(hall_plug.dispatch,<span class="hljs-string">&quot;not dispatch&quot;</span>)     <span class="hljs-comment">--消息分发</span><br><span class="hljs-built_in">assert</span>(hall_plug.connect,<span class="hljs-string">&quot;not connect&quot;</span>)       <span class="hljs-comment">--连接大厅</span><br><span class="hljs-built_in">assert</span>(hall_plug.disconnect,<span class="hljs-string">&quot;not disconnect&quot;</span>) <span class="hljs-comment">--掉线</span><br><span class="hljs-built_in">assert</span>(hall_plug.reconnect,<span class="hljs-string">&quot;not reconnect&quot;</span>)   <span class="hljs-comment">--重连</span><br><span class="hljs-built_in">assert</span>(hall_plug.goout,<span class="hljs-string">&quot;not goout&quot;</span>)           <span class="hljs-comment">--退出</span><br></code></pre></td></tr></table></figure><ul><li><p><code>init()</code> 初始化。</p></li><li><p><code>unpack(msg,sz)</code> 客户端消息解包。</p></li><li><p><code>dispatch(gate,fd,packname,req,CMD)</code> 处理消息，返回值为true表示大厅已经处理消息，为false，表示需要转发到<strong>room</strong>房间服去处理。</p></li><li><p><code>connect(gate,fd,player_id)</code> 连接到大厅。</p></li><li><p><code>disconnect(gate,fd,player_id)</code> 掉线。</p></li><li><p><code>reconnect(gate,fd,player_id)</code> 重连。</p></li><li><p><code>goout(player_id)</code> 登出。</p></li><li><p><strong>match匹配服</strong><br>匹配服只有一个，我觉得单服设计应该简单一点。<br>可以热更。热更后，旧的匹配服不会再进入玩家了。<br>匹配服配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--匹配服</span><br>room_game_match_m = &#123;<br>launch_seq = <span class="hljs-number">3</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>default_arg = &#123;<br>match_plug = <span class="hljs-string">&quot;match_plug&quot;</span>,<br>MAX_TABLES = <span class="hljs-number">10000</span>,<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>其中MAX_TABLES是最大桌子数量，match用了简单轮询机制去给room服分配房间。<br>match_plug表示匹配服需要实现的插件接口。</p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">assert</span>(match_plug.init,<span class="hljs-string">&quot;not match init&quot;</span>)           <span class="hljs-comment">--初始化</span><br><span class="hljs-built_in">assert</span>(match_plug.<span class="hljs-built_in">match</span>,<span class="hljs-string">&quot;not match&quot;</span>)       <span class="hljs-comment">--匹配</span><br><span class="hljs-built_in">assert</span>(match_plug.tablefull,<span class="hljs-string">&quot;not tablefull&quot;</span>)       <span class="hljs-comment">--桌子已满</span><br><span class="hljs-built_in">assert</span>(match_plug.createtable,<span class="hljs-string">&quot;not createtable&quot;</span>)   <span class="hljs-comment">--创建桌子</span><br><span class="hljs-built_in">assert</span>(match_plug.entertable,<span class="hljs-string">&quot;not entertable&quot;</span>)     <span class="hljs-comment">--进入桌子</span><br><span class="hljs-built_in">assert</span>(match_plug.leavetable,<span class="hljs-string">&quot;not leavetable&quot;</span>)     <span class="hljs-comment">--离开桌子</span><br><span class="hljs-built_in">assert</span>(match_plug.dismisstable,<span class="hljs-string">&quot;not dismisstable&quot;</span>) <span class="hljs-comment">--解散桌子</span><br></code></pre></td></tr></table></figure><ul><li><p><code>init()</code> 初始化.</p></li><li><p><code>match(player_id)</code> 匹配桌子。返回桌子id匹配成功，返回nil匹配失败，失败之后会去创建桌子，如果桌子爆满会调用tablefull接口。</p></li><li><p><code>createtable(table_id)</code> 创建了一个桌子。</p></li><li><p><code>entertable(table_id,player_id)</code> 玩家进入桌子。</p></li><li><p><code>leavetable(table_id,player_id)</code> 玩家离开桌子。</p></li><li><p><code>dismisstable(table_id)</code> 桌子被销毁了。</p></li><li><p><code>tablefull()</code> 桌子已经满了。  这里可以nil,errcode,errmsg，会被登录服接住，之后出现在登录服的login_failed接口中。</p></li><li><p><strong>room房间服</strong><br>可以开多个。<br>可以热更。<br>房间服配置。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--房间服</span><br>room_game_room_m = &#123;<br>launch_seq = <span class="hljs-number">4</span>,<br>launch_num = <span class="hljs-number">6</span>,<br>default_arg = &#123;<br>room_plug = <span class="hljs-string">&quot;room_plug&quot;</span>,<br>room_conf = &#123;<br>player_num = <span class="hljs-number">2</span>,<br>&#125;<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>room_plug表示房间服需要实现的插件接口。</p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">assert</span>(room_plug.init,<span class="hljs-string">&quot;not room_plug init&quot;</span>)                 <span class="hljs-comment">--初始化</span><br><span class="hljs-built_in">assert</span>(room_plug.table_creator,<span class="hljs-string">&quot;not table_creator&quot;</span>)         <span class="hljs-comment">--桌子建造者</span><br><br><span class="hljs-keyword">local</span> tmp_table = room_plug.table_creator(<span class="hljs-number">1</span>,g_room_conf,ROOM_CMD)<br><br><span class="hljs-built_in">assert</span>(tmp_table.enter,<span class="hljs-string">&quot;table_creator not enter&quot;</span>)           <span class="hljs-comment">--坐下</span><br><span class="hljs-built_in">assert</span>(tmp_table.leave,<span class="hljs-string">&quot;table_creator not leave&quot;</span>)           <span class="hljs-comment">--离开</span><br><span class="hljs-built_in">assert</span>(tmp_table.disconnect,<span class="hljs-string">&quot;table_creator not disconnect&quot;</span>) <span class="hljs-comment">--掉线</span><br><span class="hljs-built_in">assert</span>(tmp_table.reconnect,<span class="hljs-string">&quot;table_creator not reconnect&quot;</span>)   <span class="hljs-comment">--重连</span><br><span class="hljs-built_in">assert</span>(tmp_table.handler,<span class="hljs-string">&quot;table_creator not handler&quot;</span>)       <span class="hljs-comment">--消息处理</span><br></code></pre></td></tr></table></figure><ul><li><code>init()</code> 初始化</li><li><code>table_creator(table_id,room_conf,ROOM_CMD)</code> 创建游戏桌子，返回一个游戏桌子闭包，提供基础接口处理。</li><li><code>table.enter(player)</code> 玩家桌下。</li><li><code>table.leave(player)</code> 玩家离开。</li><li><code>table.disconnect(player)</code> 玩家掉线。</li><li><code>table.reconnect(player)</code> 玩家重连。</li><li><code>table.handler(player,packname,req)</code> 消息处理。</li></ul><h1 id="10分钟快速搭建一个基于gate石头剪刀布的游戏"><a href="#10分钟快速搭建一个基于gate石头剪刀布的游戏" class="headerlink" title="10分钟快速搭建一个基于gate石头剪刀布的游戏"></a>10分钟快速搭建一个基于gate石头剪刀布的游戏</h1><ul><li><p><strong>创建项目</strong><br>下载完整的skynet_fly代码。<br>创建如下目录结构。<br><img src="/img/skynet_fly/demo.bmp"></p></li><li><p><strong>编写代码</strong><br><code>main.lua</code></p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> mod_config = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;mod_config&quot;</span><br><span class="hljs-keyword">local</span> table_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;table_util&quot;</span><br><br>skynet.start(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--这是一个简单的石头剪刀布的游戏</span><br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;start stone_scissors_cloth&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>)<br><br><span class="hljs-comment">--启动热更管理员服务</span><br><span class="hljs-keyword">local</span> cmgr = skynet.uniqueservice(<span class="hljs-string">&#x27;contriner_mgr&#x27;</span>)<br><br><span class="hljs-comment">--启动skynet的debug_console</span><br>skynet.newservice(<span class="hljs-string">&quot;debug_console&quot;</span>, skynet.<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&#x27;debug_port&#x27;</span>))<br><br><span class="hljs-comment">--启动依赖load_mods.lua配置生成的mod_config热更模块服务</span><br><span class="hljs-keyword">for</span> mod_name,mod_cfg <span class="hljs-keyword">in</span> table_util.sort_ipairs(mod_config,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a,b)</span></span><br><span class="hljs-keyword">return</span> a.launch_seq &lt; b.launch_seq<br><span class="hljs-keyword">end</span>) <span class="hljs-keyword">do</span><br><br><span class="hljs-comment">--最后启动客户端</span><br><span class="hljs-keyword">if</span> mod_name ~= <span class="hljs-string">&quot;client_m&quot;</span> <span class="hljs-keyword">then</span><br>skynet.call(cmgr,<span class="hljs-string">&#x27;lua&#x27;</span>,<span class="hljs-string">&#x27;load_module&#x27;</span>,mod_name)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--启动room_game_login 登录服务</span><br>skynet.uniqueservice(<span class="hljs-string">&quot;room_game_login&quot;</span>)<br><br><span class="hljs-keyword">if</span> mod_config[<span class="hljs-string">&#x27;client_m&#x27;</span>] <span class="hljs-keyword">then</span><br>skynet.call(cmgr,<span class="hljs-string">&#x27;lua&#x27;</span>,<span class="hljs-string">&#x27;load_module&#x27;</span>,<span class="hljs-string">&#x27;client_m&#x27;</span>)<br><span class="hljs-keyword">end</span><br><br>skynet.<span class="hljs-built_in">exit</span>()<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>编写<code>load_mods.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-comment">--共享配置</span><br>share_config_m = &#123;<br>launch_seq = <span class="hljs-number">1</span>,     <span class="hljs-comment">--启动顺序，从小到大</span><br>launch_num = <span class="hljs-number">1</span>,     <span class="hljs-comment">--启动数量</span><br>default_arg = &#123;     <span class="hljs-comment">--默认配置</span><br><span class="hljs-comment">--room_game_login用的配置</span><br>room_game_login = &#123;<br>gateservice = <span class="hljs-string">&quot;gate&quot;</span>, <span class="hljs-comment">--gate 或者 wsgate</span><br><span class="hljs-comment">--gate连接配置</span><br>gateconf = &#123;<br>address = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-number">8001</span>,<br>maxclient = <span class="hljs-number">2048</span>,<br>&#125;,<br>login_plug = <span class="hljs-string">&quot;login_plug&quot;</span>,  <span class="hljs-comment">--login加载的插件lua模块文件名</span><br>&#125;<br>&#125;<br>&#125;,<br><br><span class="hljs-comment">--大厅服</span><br>room_game_hall_m = &#123;<br>launch_seq = <span class="hljs-number">2</span>, <span class="hljs-comment">--第二个启动</span><br>launch_num = <span class="hljs-number">6</span>, <span class="hljs-comment">--启动6个</span><br>default_arg = &#123;<br>hall_plug = <span class="hljs-string">&quot;hall_plug&quot;</span>,         <span class="hljs-comment">--大厅加载的插件lua模块文件名</span><br>&#125;<br>&#125;,<br><br><span class="hljs-comment">--匹配服</span><br>room_game_match_m = &#123;<br>launch_seq = <span class="hljs-number">3</span>, <span class="hljs-comment">--第三个启动</span><br>launch_num = <span class="hljs-number">1</span>, <span class="hljs-comment">--启动1个</span><br>default_arg = &#123;<br>match_plug = <span class="hljs-string">&quot;match_plug&quot;</span>,       <span class="hljs-comment">--匹配加载的插件lua模块文件名</span><br>MAX_TABLES = <span class="hljs-number">10000</span>,  <span class="hljs-comment">--最多1万个游戏桌子</span><br>&#125;<br>&#125;,<br><br><span class="hljs-comment">--房间服</span><br>room_game_room_m = &#123;<br>launch_seq = <span class="hljs-number">4</span>, <span class="hljs-comment">--第四个启动</span><br>launch_num = <span class="hljs-number">6</span>, <span class="hljs-comment">--启动6个</span><br>default_arg = &#123;<br>room_plug = <span class="hljs-string">&quot;room_plug&quot;</span>,   <span class="hljs-comment">--房间插件</span><br>room_conf = &#123;<br>player_num = <span class="hljs-number">2</span>,        <span class="hljs-comment">--2个人玩</span><br>&#125;<br>&#125;<br>&#125;,<br><br><span class="hljs-comment">--测试客户端</span><br>client_m = &#123;<br>launch_seq = <span class="hljs-number">5</span>,    <span class="hljs-comment">--第5个启动</span><br>launch_num = <span class="hljs-number">2</span>,    <span class="hljs-comment">--启动2个</span><br>mod_args = &#123;<br>&#123;password = <span class="hljs-string">&#x27;123456&#x27;</span>,player_id = <span class="hljs-number">10000</span>&#125;, <span class="hljs-comment">--第一个服务的配置</span><br>&#123;password = <span class="hljs-string">&#x27;123456&#x27;</span>,player_id = <span class="hljs-number">10001</span>&#125;, <span class="hljs-comment">--第二个服务的配置</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上测试客户端应该第6个启动，login服务第5个启动启动，因为login服务不支持热更，所以没有编写成热更模块的方式，只能在main函数中手写启动。<br>编写proto登录协议<br>在<code>games/stone_scissors_cloth/proto</code>目录下创建<code>login.proto</code>文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs proto">package login;<br><br>message LoginReq &#123;<br>optional string password = 1;<br>optional int32 player_id = 2;<br>&#125;<br><br>message LoginRes &#123;<br>optional int32 player_id = 1;<br>optional int32 hall_server_id = 2;  //大厅服id<br>optional int32 match_server_id = 3; //匹配服id<br>optional int32 room_server_id = 4;  //房间服id<br>optional string table_id = 5;        //桌子id<br>&#125;<br></code></pre></td></tr></table></figure><p>编写登录<code>login_plug.lua</code><br>在<code>games/stone_scissors_cloth/lualib/login</code>目录下创建<code>login_plug.lua</code>文件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> pbnet_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pbnet_util&quot;</span><br><span class="hljs-keyword">local</span> pb_netpack = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pb_netpack&quot;</span><br><span class="hljs-keyword">local</span> timer = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;timer&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><span class="hljs-keyword">local</span> x_pcall = x_pcall<br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-comment">--登录检测的超时时间</span><br>M.time_out = timer.second * <span class="hljs-number">5</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.init</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--加载pb文件</span><br>pb_netpack.<span class="hljs-built_in">load</span>(<span class="hljs-string">&#x27;./proto&#x27;</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--解包函数</span><br>M.<span class="hljs-built_in">unpack</span> = pbnet_util.<span class="hljs-built_in">unpack</span><br><br><span class="hljs-comment">--登录检测函数 packname,req是解包函数返回的</span><br><span class="hljs-comment">--登入成功后返回玩家id</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.check</span><span class="hljs-params">(gate,fd,packname,req)</span></span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> packname <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;unpack err &quot;</span>,packname,req)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--检测是不是登录请求</span><br><span class="hljs-keyword">if</span> packname ~= <span class="hljs-string">&#x27;.login.LoginReq&#x27;</span> <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;login_check msg err &quot;</span>,fd)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> player_id = req.player_id<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> player_id <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;req err &quot;</span>,fd,req)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--检测密码是否正确</span><br><span class="hljs-keyword">if</span> req.password ~= <span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;login err &quot;</span>,req)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--成功返回玩家id</span><br><span class="hljs-keyword">return</span> player_id<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--登录失败</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.login_failed</span><span class="hljs-params">(gate,fd,player_id,errcode,errmsg)</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--登录成功</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.login_succ</span><span class="hljs-params">(gate,fd,player_id,login_res)</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--登出回调</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.login_out</span><span class="hljs-params">(player_id)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;login_out &quot;</span>,player_id)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--掉线回调</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.disconnect</span><span class="hljs-params">(gate,fd,player_id)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&#x27;disconnect:&#x27;</span>,fd,player_id)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--正在登录中</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.logining</span><span class="hljs-params">(gate,fd,player_id)</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--重复登录</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.repeat_login</span><span class="hljs-params">(gate,fd,player_id)</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><p>编写大厅agent管理<code>hall_plug.lua</code><br>在<code>games/stone_scissors_cloth/lualib/hall</code>目录下创建<code>hall_plug.lua</code>文件。<br>如果没有额外的需求，接口中并不需要做什么</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> pbnet_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pbnet_util&quot;</span><br><span class="hljs-keyword">local</span> pb_netpack = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pb_netpack&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-comment">--指定解包函数</span><br>M.<span class="hljs-built_in">unpack</span> = pbnet_util.<span class="hljs-built_in">unpack</span><br><br><span class="hljs-comment">--初始化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.init</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--加载协议</span><br>pb_netpack.<span class="hljs-built_in">load</span>(<span class="hljs-string">&quot;./proto&quot;</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--处理请求</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.dispatch</span><span class="hljs-params">(gate,fd,packname,req,CMD)</span></span><br><span class="hljs-comment">--返回false转发给room服务</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--连接成功</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.connect</span><span class="hljs-params">(gate,fd,player_id)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;hall_plug connect &quot;</span>,fd,player_id)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--掉线</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.disconnect</span><span class="hljs-params">(gate,fd,player_id)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;hall_plug disconnect &quot;</span>,fd,player_id)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--重连</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.reconnect</span><span class="hljs-params">(gate,fd,player_id)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;hall_plug reconnect &quot;</span>,fd,player_id)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--登出</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.goout</span><span class="hljs-params">(player_id)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;hall_plug goout &quot;</span>,player_id)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><p>编写匹配<code>match_plug.lua</code><br>在<code>games/stone_scissors_cloth/lualib/match</code>目录下创建<code>match_plug.lua</code>文件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">pairs</span> = <span class="hljs-built_in">pairs</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">table</span> = <span class="hljs-built_in">table</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">ipairs</span> = <span class="hljs-built_in">ipairs</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><span class="hljs-keyword">local</span> g_table_map = &#123;&#125;<br><span class="hljs-keyword">local</span> MAX_PLAYER_NUM = <span class="hljs-number">2</span><br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-comment">--初始化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.init</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--匹配</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.match</span><span class="hljs-params">(player_id)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;match:&quot;</span>,player_id)<br><span class="hljs-keyword">local</span> table_num_map = &#123;&#125;<br><br><span class="hljs-comment">--简单按照桌子人数整理一下</span><br><span class="hljs-keyword">for</span> table_id,t_info <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(g_table_map) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> player_num = #t_info.player_list<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> table_num_map[player_num] <span class="hljs-keyword">then</span><br>table_num_map[player_num] = &#123;&#125;<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(table_num_map[player_num],t_info)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--安人数从多到少去匹配</span><br><span class="hljs-keyword">for</span> i = MAX_PLAYER_NUM - <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span> <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> t_list = table_num_map[i]<br><span class="hljs-keyword">if</span> t_list <span class="hljs-keyword">then</span><br><span class="hljs-keyword">for</span> _,t_info <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(t_list) <span class="hljs-keyword">do</span><br><span class="hljs-comment">--匹配到了</span><br><span class="hljs-keyword">return</span> t_info.table_id<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--没有匹配到</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--创建桌子</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.createtable</span><span class="hljs-params">(table_id)</span></span> <br><span class="hljs-comment">--没有匹配到会尝试创建桌子，到这来说明桌子创建成功了</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;createtable:&quot;</span>,table_id)<br><span class="hljs-built_in">assert</span>(<span class="hljs-keyword">not</span> g_table_map[table_id],<span class="hljs-string">&quot;repeat table_id&quot;</span>)<br>g_table_map[table_id] = &#123;<br>table_id = table_id,<br>player_list = &#123;&#125;<br>&#125;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--进入桌子</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.entertable</span><span class="hljs-params">(table_id,player_id)</span></span><br><span class="hljs-comment">--玩家进入桌子</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;entertable:&quot;</span>,table_id,player_id)<br><span class="hljs-built_in">assert</span>(g_table_map[table_id],<span class="hljs-string">&quot;table not exists&quot;</span>)<br><br><span class="hljs-keyword">local</span> t_info = g_table_map[table_id]<br><span class="hljs-keyword">local</span> player_list = t_info.player_list<br><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,#player_list <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> pid = player_list[i]<br><span class="hljs-keyword">if</span> pid == player_id <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;entertable player exists &quot;</span>,table_id,player_id)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(t_info.player_list,player_id)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--离开桌子</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.leavetable</span><span class="hljs-params">(table_id,player_id)</span></span><br><span class="hljs-comment">--玩家离开桌子</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;leavetable:&quot;</span>,table_id,player_id)<br><span class="hljs-built_in">assert</span>(g_table_map[table_id],<span class="hljs-string">&quot;table not exists&quot;</span>)<br><br><span class="hljs-keyword">local</span> t_info = g_table_map[table_id]<br><span class="hljs-keyword">local</span> player_list = t_info.player_list<br><br><span class="hljs-keyword">for</span> i = #player_list,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span> <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> pid = player_list[i]<br><span class="hljs-keyword">if</span> pid == player_id <span class="hljs-keyword">then</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(player_list,i)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;leavetable player not exists &quot;</span>,table_id,player_id) <br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--解散桌子</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.dismisstable</span><span class="hljs-params">(table_id)</span></span> <br><span class="hljs-comment">--桌子解散了，最后一个人离开桌子后会解散桌子</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;dismisstable:&quot;</span>,table_id)<br><span class="hljs-built_in">assert</span>(g_table_map[table_id],<span class="hljs-string">&quot;table not exists&quot;</span>)<br><br><span class="hljs-keyword">local</span> t_info = g_table_map[table_id]<br><span class="hljs-keyword">local</span> player_list = t_info.player_list<br><br><span class="hljs-built_in">assert</span>(<span class="hljs-keyword">not</span> <span class="hljs-built_in">next</span>(player_list),<span class="hljs-string">&quot;dismisstable exists player &quot;</span> .. #player_list)<br><br>g_table_map[table_id] = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--桌子已满</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.tablefull</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--桌子满了，这里可以返回错误码可错误信息</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><p>编写房间<code>room_plug.lua</code><br>房间依赖3个枚举文件<br>在<code>games/stone_scissors_cloth/lualib/enum</code>目录下创建<code>DOGIN_TYPE.lua</code>文件。<br>表示操作类型</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>stone = <span class="hljs-number">1</span>,   <span class="hljs-comment">--石头</span><br>scissors = <span class="hljs-number">2</span>, <span class="hljs-comment">--剪刀</span><br>cloth = <span class="hljs-number">3</span>,    <span class="hljs-comment">--布</span><br><br>[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;stone&quot;</span>,<br>[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;scissors&quot;</span>,<br>[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;cloth&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>games/stone_scissors_cloth/lualib/enum</code>目录下创建<code>GAME_STATE_ENUM.lua</code>文件。<br>表示游戏状态</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>waiting = <span class="hljs-number">0</span>,<span class="hljs-comment">--等待</span><br>playing = <span class="hljs-number">1</span>,<span class="hljs-comment">--游戏中</span><br>over = <span class="hljs-number">2</span>,   <span class="hljs-comment">--结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>games/stone_scissors_cloth/lualib/enum</code>目录下创建<code>SEAT_STATE.lua</code>文件。<br>表示座位状态</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>empty = <span class="hljs-number">0</span>,      <span class="hljs-comment">--空座位</span><br>waitting = <span class="hljs-number">1</span>,   <span class="hljs-comment">--等待中</span><br>playing = <span class="hljs-number">2</span>,    <span class="hljs-comment">--在玩中</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>games/stone_scissors_cloth/lualib/room</code>目录下创建<code>seater.lua</code>文件。<br>座位对象</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> SEAT_STATE = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;SEAT_STATE&quot;</span><br><span class="hljs-keyword">local</span> pbnet_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pbnet_util&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">setmetatable</span> = <span class="hljs-built_in">setmetatable</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-keyword">local</span> meta = &#123;<span class="hljs-built_in">__index</span> = M&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:new</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> t = &#123;<br>player = <span class="hljs-literal">nil</span>,<br>state = SEAT_STATE.empty,<br>&#125;<br><br><span class="hljs-built_in">setmetatable</span>(t,meta)<br><span class="hljs-keyword">return</span> t<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--坐下</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:enter</span><span class="hljs-params">(player)</span></span><br><span class="hljs-built_in">assert</span>(player)<br><span class="hljs-built_in">self</span>.player = player<br><span class="hljs-built_in">self</span>.state = SEAT_STATE.waitting<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--离开</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:leave</span><span class="hljs-params">()</span></span><br><span class="hljs-built_in">self</span>.player = <span class="hljs-literal">nil</span><br><span class="hljs-built_in">self</span>.state = SEAT_STATE.empty<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--是否空座位</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:is_empty</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>.state == SEAT_STATE.empty<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--是否可以离开</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:is_can_leave</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--return self.state ~= SEAT_STATE.playing</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--发送消息给客户端</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:send_msg</span><span class="hljs-params">(packname,pack)</span></span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">self</span>.player <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">self</span>.player.fd &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>pbnet_util.send(<span class="hljs-built_in">self</span>.player.gate,<span class="hljs-built_in">self</span>.player.fd,packname,pack)<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;send_msg not fd &quot;</span>,<span class="hljs-built_in">self</span>.player_id)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--获取玩家信息</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:get_player</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>.player<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--游戏开始</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:game_start</span><span class="hljs-params">()</span></span><br><span class="hljs-built_in">self</span>.state = SEAT_STATE.playing<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--游戏结束</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:game_over</span><span class="hljs-params">()</span></span><br><span class="hljs-built_in">self</span>.state = SEAT_STATE.waitting<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><p>在<code>games/stone_scissors_cloth/proto</code>目录下创建<code>game.proto</code>文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs proto">package game;<br><br>//游戏开始<br>message GameStartCast &#123;<br>repeated int32 seat_id_list = 1;<br>&#125;<br><br>//游戏结束<br>message GameOverCast &#123;<br>optional int32 lose_player_id = 1;<br>optional DoingCast doing_list = 2;<br>optional string result = 3;<br>&#125;<br><br>//接下来谁操作<br>message NextDoingCast &#123;<br>optional int32 doing_player_id = 1;<br>optional int32 doing_seat_id = 2;<br>optional int32 min_num = 3;<br>optional int32 max_num = 4;<br>&#125;<br><br>//操作请求<br>message DoingReq &#123;<br>optional int32 doing_type = 1;      //1 石头  2剪刀   3布<br>&#125;<br><br>//操作广播<br>message DoingCast &#123;<br>optional int32 player_id = 1;<br>optional int32 seat_id = 2;<br>optional int32 doing_type = 3;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>games/stone_scissors_cloth/lualib/room</code>目录下创建<code>room_plug.lua</code>文件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> pb_netpack = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pb_netpack&quot;</span><br><span class="hljs-keyword">local</span> string_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;string_util&quot;</span><br><span class="hljs-keyword">local</span> GAME_STATE_ENUM = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;GAME_STATE_ENUM&quot;</span><br><span class="hljs-keyword">local</span> DOGIN_TYPE = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;DOGIN_TYPE&quot;</span><br><span class="hljs-keyword">local</span> seater = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;seater&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">string</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">ipairs</span> = <span class="hljs-built_in">ipairs</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">table</span> = <span class="hljs-built_in">table</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">math</span> = <span class="hljs-built_in">math</span><br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.init</span><span class="hljs-params">()</span></span><br>pb_netpack.<span class="hljs-built_in">load</span>(<span class="hljs-string">&#x27;./proto&#x27;</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--游戏桌子创建者</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.table_creator</span><span class="hljs-params">(table_id,room_conf,ROOM_CMD)</span></span><br><span class="hljs-built_in">assert</span>(room_conf.player_num,<span class="hljs-string">&quot;not player_num&quot;</span>)<br><br><span class="hljs-keyword">local</span> m_HANDLE = &#123;&#125;<br><span class="hljs-keyword">local</span> m_table_id = table_id<br>    <span class="hljs-keyword">local</span> m_game_state = GAME_STATE_ENUM.waiting <span class="hljs-comment">--参与游戏的玩家座位号</span><br>    <span class="hljs-keyword">local</span> m_doing_seat_id = <span class="hljs-literal">nil</span>                  <span class="hljs-comment">--操作座位号</span><br>    <span class="hljs-keyword">local</span> m_seat_list = &#123;&#125; <span class="hljs-comment">--座位列表</span><br>    <span class="hljs-keyword">local</span> m_player_seat_map = &#123;&#125; <span class="hljs-comment">--玩家座位号</span><br>    <span class="hljs-keyword">local</span> m_enter_num = <span class="hljs-number">0</span>                        <span class="hljs-comment">--坐下数量</span><br><span class="hljs-keyword">local</span> m_game_seat_id_list = &#123;&#125;               <span class="hljs-comment">--游戏参与座位号列表</span><br><span class="hljs-keyword">local</span> m_doing_index                          <span class="hljs-comment">--当前操作人座位号列表下标</span><br><br><span class="hljs-keyword">local</span> m_doing_list = &#123;&#125;                      <span class="hljs-comment">--操作列表</span><br><br><span class="hljs-comment">--消息广播</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcast</span><span class="hljs-params">(packname,pack)</span></span><br><span class="hljs-keyword">for</span> _,seat_player <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(m_seat_list) <span class="hljs-keyword">do</span><br>seat_player:send_msg(packname,pack)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--座位初始化</span><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,room_conf.player_num <span class="hljs-keyword">do</span><br>        m_seat_list[i] = seater:new()<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next_doing_cast</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">--通知操作</span><br><span class="hljs-keyword">local</span> player = m_seat_list[m_doing_seat_id]:get_player()<br><span class="hljs-keyword">local</span> args = &#123;<br>doing_seat_id = m_doing_seat_id,<br>doing_player_id = player.player_id,<br>&#125;<br>broadcast(<span class="hljs-string">&#x27;.game.NextDoingCast&#x27;</span>,args)<br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">--state</span><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">--开始游戏</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">game_start</span><span class="hljs-params">()</span></span><br>m_game_state = GAME_STATE_ENUM.playing<br>m_game_seat_id_list = &#123;&#125;<br><br><span class="hljs-keyword">for</span> seat_id,seater <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(m_seat_list) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> seater:is_empty() <span class="hljs-keyword">then</span><br>seater:game_start()<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(m_game_seat_id_list,seat_id)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>broadcast(<span class="hljs-string">&#x27;.game.GameStartCast&#x27;</span>,&#123;seat_id_list = m_game_seat_id_list&#125;)<br><br>m_doing_index = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>(<span class="hljs-number">1</span>,#m_game_seat_id_list)<br>m_doing_seat_id = m_game_seat_id_list[m_doing_index]   <span class="hljs-comment">--先手</span><br><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;游戏开始!!!&quot;</span>)<br>next_doing_cast()<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--结束游戏</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">game_over</span><span class="hljs-params">()</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;游戏结束！！！&quot;</span>)<br><span class="hljs-keyword">local</span> result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">local</span> lose_player_id = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">local</span> doing_one = m_doing_list[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> doing_two = m_doing_list[<span class="hljs-number">2</span>]<br><br><span class="hljs-keyword">if</span> doing_one.doing_type == doing_two.doing_type <span class="hljs-keyword">then</span><br>result = <span class="hljs-string">&quot;平局&quot;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span> doing_one.doing_type == DOGIN_TYPE.stone <span class="hljs-keyword">then</span><br><span class="hljs-comment">--玩家一石头</span><br><span class="hljs-keyword">if</span> doing_two.doing_type == DOGIN_TYPE.scissors <span class="hljs-keyword">then</span><br><span class="hljs-comment">--玩家二剪刀</span><br>result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s的%s干掉了%s的%s&quot;</span>,doing_one.player_id,<span class="hljs-string">&quot;石头&quot;</span>,doing_two.player_id,<span class="hljs-string">&quot;剪刀&quot;</span>)<br>lose_player_id = doing_two.player_id<br><span class="hljs-keyword">else</span><br><span class="hljs-comment">--玩家二布</span><br>result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s的%s干掉了%s的%s&quot;</span>,doing_two.player_id,<span class="hljs-string">&quot;布&quot;</span>,doing_one.player_id,<span class="hljs-string">&quot;石头&quot;</span>)<br>lose_player_id = doing_one.player_id<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">elseif</span> doing_one.doing_type == DOGIN_TYPE.scissors <span class="hljs-keyword">then</span><br><span class="hljs-comment">--玩家一剪刀</span><br><span class="hljs-keyword">if</span> doing_two.doing_type == DOGIN_TYPE.stone <span class="hljs-keyword">then</span><br><span class="hljs-comment">--玩家二石头</span><br>result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s的%s干掉了%s的%s&quot;</span>,doing_two.player_id,<span class="hljs-string">&quot;石头&quot;</span>,doing_one.player_id,<span class="hljs-string">&quot;剪刀&quot;</span>)<br>lose_player_id = doing_one.player_id<br><span class="hljs-keyword">else</span><br><span class="hljs-comment">--玩家二布</span><br>result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s的%s干掉了%s的%s&quot;</span>,doing_one.player_id,<span class="hljs-string">&quot;剪刀&quot;</span>,doing_two.player_id,<span class="hljs-string">&quot;布&quot;</span>)<br>lose_player_id = doing_two.player_id<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-comment">--玩家一布</span><br><span class="hljs-keyword">if</span> doing_two.doing_type == DOGIN_TYPE.stone <span class="hljs-keyword">then</span><br><span class="hljs-comment">--玩家二石头</span><br>result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s的%s干掉了%s的%s&quot;</span>,doing_one.player_id,<span class="hljs-string">&quot;布&quot;</span>,doing_two.player_id,<span class="hljs-string">&quot;石头&quot;</span>)<br>lose_player_id = doing_two.player_id<br><span class="hljs-keyword">else</span><br><span class="hljs-comment">--玩家二剪刀</span><br>result = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s的%s干掉了%s的%s&quot;</span>,doing_two.player_id,<span class="hljs-string">&quot;剪刀&quot;</span>,doing_one.player_id,<span class="hljs-string">&quot;布&quot;</span>)<br>lose_player_id = doing_one.player_id<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> args = &#123;<br>lose_player_id = lose_player_id,<br>doing_list = m_doing_list,<br>result = result,<br>&#125;<br><span class="hljs-comment">--广播游戏结束</span><br>broadcast(<span class="hljs-string">&#x27;.game.GameOverCast&#x27;</span>,args)<br>m_game_state = GAME_STATE_ENUM.over<br><br><span class="hljs-keyword">for</span> seat_id,seater <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(m_seat_list) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> seater:is_empty() <span class="hljs-keyword">then</span><br>seater:game_over()<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--踢出所有玩家</span><br>ROOM_CMD.kick_out_all(m_table_id)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">--state</span><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">--HANDLE</span><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">--消息处理</span><br>m_HANDLE[<span class="hljs-string">&#x27;game&#x27;</span>] = &#123;<br><span class="hljs-comment">--玩家操作请求</span><br>[<span class="hljs-string">&#x27;DoingReq&#x27;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(player,args)</span></span><br><span class="hljs-keyword">if</span> m_game_state ~= GAME_STATE_ENUM.playing <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;游戏还没有开始！！！&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> player_id = player.player_id<br><span class="hljs-keyword">local</span> seat_id = m_player_seat_map[player_id]<br><span class="hljs-keyword">if</span> seat_id ~= m_doing_seat_id <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;不是该玩家操作 &quot;</span>,player_id)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> doing_type = args.doing_type<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> doing_type <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;not opt_num &quot;</span>,args)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> DOGIN_TYPE[doing_type] <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;play args err &quot;</span>,player_id,doing_type)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> args = &#123;<br>player_id = player_id,<br>seat_id = seat_id,<br>doing_type = doing_type,<br>&#125;<br>broadcast(<span class="hljs-string">&#x27;.game.DoingCast&#x27;</span>,args)<br><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(m_doing_list,args)<br><span class="hljs-keyword">if</span> #m_doing_list &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span> game_over() <span class="hljs-comment">--游戏结束</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--切换操作人</span><br>m_doing_index = m_doing_index + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> m_doing_index &gt; #m_game_seat_id_list <span class="hljs-keyword">then</span><br>m_doing_index = m_doing_index % #m_game_seat_id_list<br><span class="hljs-keyword">end</span><br>m_doing_seat_id = m_game_seat_id_list[m_doing_index]<br>next_doing_cast()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span>,<br>&#125;<br><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">--HANDLE</span><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><br>    <span class="hljs-keyword">return</span> &#123;<br><span class="hljs-comment">--玩家进入桌子</span><br>        enter = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(player)</span></span><br>            <span class="hljs-keyword">local</span> player_id = player.player_id<br>            <span class="hljs-built_in">assert</span>(<span class="hljs-keyword">not</span> m_player_seat_map[player_id])<br>            <br>            <span class="hljs-keyword">local</span> alloc_seat_id = <span class="hljs-literal">nil</span><br>            <span class="hljs-keyword">for</span> seat_id,seater <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(m_seat_list) <span class="hljs-keyword">do</span><br>                <span class="hljs-keyword">if</span> seater:is_empty() <span class="hljs-keyword">then</span><br>                    seater:enter(player)<br>                    m_player_seat_map[player_id] = seat_id<br>                    m_enter_num = m_enter_num + <span class="hljs-number">1</span><br>                    alloc_seat_id = seat_id<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> alloc_seat_id <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;进入房间失败 &quot;</span>,player.player_id)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">end</span><br>          <br>            <span class="hljs-keyword">if</span> m_enter_num &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">then</span><br>                skynet.fork(game_start)<br>            <span class="hljs-keyword">end</span><br>        <br>            <span class="hljs-keyword">return</span> alloc_seat_id<br>        <span class="hljs-keyword">end</span>,<br><span class="hljs-comment">--玩家离开桌子</span><br>leave = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(player)</span></span><br><span class="hljs-keyword">local</span> player_id = player.player_id<br><span class="hljs-keyword">local</span> seat_id = m_player_seat_map[player_id]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> seat_id <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;not in table &quot;</span>,player_id)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> seater = m_seat_list[seat_id]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> seater:is_can_leave() <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">else</span><br>seater:leave()<br>m_enter_num = m_enter_num - <span class="hljs-number">1</span><br>m_player_seat_map[player_id] = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;离开房间成功 &quot;</span>,player_id)<br><br><span class="hljs-keyword">return</span> seat_id<br><span class="hljs-keyword">end</span>,<br><span class="hljs-comment">--玩家掉线</span><br>disconnect = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(player)</span></span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;disconnect:&quot;</span>,m_seat_list)<br><span class="hljs-keyword">end</span>,<br><span class="hljs-comment">--玩家重连</span><br>reconnect = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(player)</span></span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;reconnect:&quot;</span>,m_seat_list)<br><span class="hljs-keyword">end</span>,<br><span class="hljs-comment">--消息分发处理</span><br>handler = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(player,packname,req)</span></span><br><span class="hljs-keyword">local</span> pack_req = string_util.split(packname,<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-built_in">assert</span>(#pack_req == <span class="hljs-number">2</span>,<span class="hljs-string">&quot;packname err &quot;</span> .. packname)<br><span class="hljs-keyword">local</span> <span class="hljs-built_in">package</span> = pack_req[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> msg_name = pack_req[<span class="hljs-number">2</span>]<br><br><span class="hljs-keyword">local</span> handle_func = m_HANDLE[<span class="hljs-built_in">package</span>][msg_name]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> handle_func <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;not handle_func &quot;</span>,packname)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> isok,errcode,errmsg = handle_func(player,req)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isok <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;request err &quot;</span>,errcode,errmsg,packname)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>,<br>    &#125;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><p>编写客户端<br>在<code>games/stone_scissors_cloth/lualib/module</code>目录下创建<code>client_m.lua</code>文件。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> timer = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;timer&quot;</span><br><span class="hljs-keyword">local</span> websocket = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;websocket&quot;</span><br><span class="hljs-keyword">local</span> socket = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;socket&quot;</span><br><span class="hljs-keyword">local</span> pb_netpack = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pb_netpack&quot;</span><br><span class="hljs-keyword">local</span> table_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;table_util&quot;</span><br><span class="hljs-keyword">local</span> DOGIN_TYPE = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;DOGIN_TYPE&quot;</span><br><br><span class="hljs-keyword">local</span> net_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;pbnet_util&quot;</span><br><br><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><br><span class="hljs-keyword">local</span> g_config<br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatch</span><span class="hljs-params">(fd,packname,res)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;dispatch:&quot;</span>,g_config.net_util,fd,packname,res)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connnect</span><span class="hljs-params">(handle)</span></span><br><span class="hljs-keyword">local</span> fd = socket.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8001</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> fd <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;connect faild &quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> login_req = &#123;<br>account = g_config.account,<br>password = g_config.password,<br>player_id = g_config.player_id,<br>&#125;<br><br>net_util.recv(fd,handle <span class="hljs-keyword">or</span> dispatch)<br>net_util.send(<span class="hljs-literal">nil</span>,fd,<span class="hljs-string">&#x27;.login.LoginReq&#x27;</span>,login_req)<br><span class="hljs-keyword">return</span> fd<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--玩游戏</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">player_game</span><span class="hljs-params">(login_res)</span></span><br>login_res = login_res <span class="hljs-keyword">or</span> &#123;&#125;<br><span class="hljs-keyword">local</span> fd<br>fd = connnect(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(_,packname,res)</span></span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;player_game:&quot;</span>,fd,g_config.net_util,packname,res)<br><br><span class="hljs-keyword">if</span> packname == <span class="hljs-string">&#x27;.game.NextDoingCast&#x27;</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> res.doing_player_id ~= g_config.player_id <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br>skynet.sleep(<span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>(<span class="hljs-number">300</span>,<span class="hljs-number">500</span>))<br><br><span class="hljs-keyword">local</span> doing_list = &#123;DOGIN_TYPE.stone,DOGIN_TYPE.scissors,DOGIN_TYPE.cloth&#125;<br><br><span class="hljs-keyword">local</span> doing_type = doing_list[<span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>(<span class="hljs-number">1</span>,#doing_list)]<br>net_util.send(<span class="hljs-literal">nil</span>,fd,<span class="hljs-string">&#x27;.game.DoingReq&#x27;</span>,&#123;<br>doing_type = doing_type,<br>&#125;)<br><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;发送操作:&quot;</span>,g_config.player_id,doing_type)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><br><span class="hljs-keyword">return</span> fd<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">(config)</span></span><br>pb_netpack.<span class="hljs-built_in">load</span>(<span class="hljs-string">&#x27;./proto&#x27;</span>)<br>g_config = <span class="hljs-built_in">config</span><br>skynet.fork(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>player_game()<br><span class="hljs-keyword">end</span>)<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><p>现在一切准备就绪，就差上燃料，点火了。</p><p>编译skynet_fly<br><code>cd skynet_fly &amp;&amp; make build</code></p><p>构建stone_scissors_cloth<br><code>cd ../games/stone_scissors_cloth/</code><br><code>sh ../../skynet_fly/binshell/make_server.sh ../../skynet_fly/</code></p><p>执行后会生成<br><code>stone_scissors_cloth_config.lua</code><br><code>mod_config.lua</code><br><code>script</code>相关脚本</p><p><img src="/img/skynet_fly/linux.bmp"></p><p>之后执行<br><code>sh script/run.sh</code></p><p>跑起来了，之后可以调用。<br><code>tail -f server.log</code> 或者 <code>vim server.log</code><br>看日志。</p><p><img src="/img/skynet_fly/game.bmp"></p><p>最终是10000玩家的石头赢了10001玩家。</p><p><a href="https://github.com/huahua132/skynet_fly_demo">源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于redis的封装</title>
    <link href="/2023/07/08/skynet_fly/redis/"/>
    <url>/2023/07/08/skynet_fly/redis/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要封装redis？"><a href="#为什么要封装redis？" class="headerlink" title="为什么要封装redis？"></a>为什么要封装redis？</h1><ol><li>适用skynet_fly生态。</li><li>redis连接配置可以写在mod_config中。</li></ol><h1 id="对于实现方式的思考"><a href="#对于实现方式的思考" class="headerlink" title="对于实现方式的思考"></a>对于实现方式的思考</h1><ul><li><p><strong>方式一</strong><br>  用skynet_fly 热更模块的方式，这样连接配置就可以写在mod_config，还可以配置连接多个不同的redis。<br>  <strong>优势</strong>：<br>  1. 配置redis连接方便。<br>  2. 固定redis连接数量。<br>  <strong>劣势</strong><br>  1. 多了一次消息的打包解包。<br>  2. redis的sub&#x2F;pub，订阅通知不好处理。<br>  3. redis的scan命令，数据存在被刷新的可能。</p></li><li><p><strong>方式二</strong><br>  按lua模块实现，去<strong>配置中心</strong>拿取配置。<br>  <strong>优势</strong><br>  1. 配置redis连接方便。<br>  2. 独占订阅连接。<br>  3. 直连redis。<br>  4. 独立的scan命令游标。<br>  <strong>劣势</strong><br>  1. 连接随服务数量增长。</p></li></ul><p>用脚思考，直接选二。</p><h1 id="基于方式二的实现"><a href="#基于方式二的实现" class="headerlink" title="基于方式二的实现"></a>基于方式二的实现</h1><p>先弄个配置中心，简单的key-value形式，非常简单。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> timer = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;timer&quot;</span><br><br><span class="hljs-keyword">local</span> g_config = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">local</span> CMD = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.start</span><span class="hljs-params">(config)</span></span><br>g_config = <span class="hljs-built_in">config</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.query</span><span class="hljs-params">(k)</span></span><br><span class="hljs-keyword">return</span> g_config[k]<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.exit</span><span class="hljs-params">()</span></span><br>timer:new(timer.minute,<span class="hljs-number">1</span>,skynet.<span class="hljs-built_in">exit</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> CMD<br></code></pre></td></tr></table></figure><p>配合<code>contriner_client.lua</code>模块，就可以轻松拿取配置。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> cli = contriner_client:new(<span class="hljs-string">&#x27;share_config_m&#x27;</span>)<br><span class="hljs-keyword">local</span> conf_map = cli:mod_call(<span class="hljs-string">&#x27;query&#x27;</span>,<span class="hljs-string">&#x27;redis&#x27;</span>)<br></code></pre></td></tr></table></figure><p>接下来就可以收割redisf.lua的实现了</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> contriner_client = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;contriner_client&quot;</span><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet.db.redis&quot;</span><br><span class="hljs-keyword">local</span> sha2 = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;sha2&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">setmetatable</span> = <span class="hljs-built_in">setmetatable</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">pcall</span> = <span class="hljs-built_in">pcall</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">ipairs</span> = <span class="hljs-built_in">ipairs</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">type</span> = <span class="hljs-built_in">type</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">string</span><br><br><span class="hljs-keyword">local</span> g_sha_map = &#123;&#125;<br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">函数作用域：M的成员函数</span><br><span class="hljs-comment">函数名称：new_client</span><br><span class="hljs-comment">描述:新建一个在share_config_m 中写的key为redis表的名为db_name的连接配置</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">- db_name (string): 连接配置名称</span><br><span class="hljs-comment">]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.new_client</span><span class="hljs-params">(db_name)</span></span><br><span class="hljs-keyword">local</span> cli = contriner_client:new(<span class="hljs-string">&#x27;share_config_m&#x27;</span>)<br><span class="hljs-keyword">local</span> conf_map = cli:mod_call(<span class="hljs-string">&#x27;query&#x27;</span>,<span class="hljs-string">&#x27;redis&#x27;</span>)<br><span class="hljs-built_in">assert</span>(conf_map <span class="hljs-keyword">and</span> conf_map[db_name],<span class="hljs-string">&quot;not redis conf&quot;</span>)<br><br><span class="hljs-keyword">local</span> conf = conf_map[db_name]<br><span class="hljs-keyword">local</span> ok,conn = <span class="hljs-built_in">pcall</span>(redis.connect,conf)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.fatal(<span class="hljs-string">&quot;redisf new_client err &quot;</span>,conn,conf)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> conn<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">函数作用域：M的成员函数</span><br><span class="hljs-comment">函数名称：script_run</span><br><span class="hljs-comment">描述:运行redis脚本命令</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">- conn (redis_conn): new_client返回的连接对象</span><br><span class="hljs-comment">- script_str (string)：redis lua 脚本</span><br><span class="hljs-comment">- ...       脚本传递参数</span><br><span class="hljs-comment">]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.script_run</span><span class="hljs-params">(conn,script_str,...)</span></span><br><span class="hljs-built_in">assert</span>(conn)<br><span class="hljs-built_in">assert</span>(<span class="hljs-built_in">type</span>(script_str) == <span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-string">&#x27;script_str not string&#x27;</span>)<br><br><span class="hljs-keyword">local</span> sha = g_sha_map[script_str]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sha <span class="hljs-keyword">then</span><br>sha = sha2.sha1(script_str)<br>g_sha_map[script_str] = sha<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> ok,ret = <span class="hljs-built_in">pcall</span>(conn.evalsha,conn,sha,...)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(ret,<span class="hljs-string">&quot;NOSCRIPT&quot;</span>,<span class="hljs-literal">nil</span>,<span class="hljs-literal">true</span>) <span class="hljs-keyword">then</span><br>ret = conn:eval(script_str,...)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> ret<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">函数作用域：M的成员函数</span><br><span class="hljs-comment">函数名称：new_watch</span><br><span class="hljs-comment">描述:redis订阅</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">- db_name (string): 连接的redis名称</span><br><span class="hljs-comment">- subscribe_list (table): 订阅的固定key</span><br><span class="hljs-comment">- psubscribe_list (table): 订阅的匹配key</span><br><span class="hljs-comment">- call_back (function): 消息回调函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">返回值</span><br><span class="hljs-comment">- 取消订阅函数</span><br><span class="hljs-comment">]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.new_watch</span><span class="hljs-params">(db_name,subscribe_list,psubscribe_list,call_back)</span></span><br><span class="hljs-keyword">local</span> cli = contriner_client:new(<span class="hljs-string">&#x27;share_config_m&#x27;</span>)<br><span class="hljs-keyword">local</span> conf_map = cli:mod_call(<span class="hljs-string">&#x27;query&#x27;</span>,<span class="hljs-string">&#x27;redis&#x27;</span>)<br><span class="hljs-built_in">assert</span>(conf_map <span class="hljs-keyword">and</span> conf_map[db_name],<span class="hljs-string">&quot;not redis conf&quot;</span>)<br><span class="hljs-keyword">local</span> conf = conf_map[db_name]<br><br><span class="hljs-keyword">local</span> ok,watch = <span class="hljs-built_in">pcall</span>(redis.watch,conf)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.fatal(<span class="hljs-string">&quot;redisf new_watch err &quot;</span>,conf)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(subscribe_list) <span class="hljs-keyword">do</span><br>watch:subscribe(key)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(psubscribe_list) <span class="hljs-keyword">do</span><br>watch:psubscribe(key)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> is_cancel = <span class="hljs-literal">false</span><br><br>skynet.fork(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> is_cancel <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> ok,msg,key,psubkey = <span class="hljs-built_in">pcall</span>(watch.message,watch)<br><span class="hljs-keyword">if</span> ok <span class="hljs-keyword">then</span><br>call_back(msg,key,psubkey)<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_cancel <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.fatal(<span class="hljs-string">&quot;watch.message err :&quot;</span>,msg,key,psubkey)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(subscribe_list) <span class="hljs-keyword">do</span><br>watch:unsubscribe(key)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(psubscribe_list) <span class="hljs-keyword">do</span><br>watch:punsubscribe(key)<br><span class="hljs-keyword">end</span><br>watch:disconnect()<br>is_cancel = <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><h1 id="版本修改"><a href="#版本修改" class="headerlink" title="版本修改"></a>版本修改</h1><p>第一个版本有一些诟病的地方：</p><ol><li><p>没有考虑首次连接失败的情况</p><ul><li><strong>问题</strong><br> redis可能挂掉，重启啥的，上一个版本没有考虑到服务启动时连不上的问题，首次连接失败后，后续不会再尝试连接。</li><li><strong>解决方案</strong><br> 每次调用命令的时候都去检测连接是否存在，不存在先尝试连接。</li></ul></li><li><p>保护执行</p><ul><li><strong>问题</strong><br> 调用redis命令，有可能因为网络原因调用失败，导致lua层面断言。</li><li><strong>解决方案</strong><br> 调用命令都经过pcall，通过__index方法对命令进行pcall包裹再缓存函数。</li></ul></li><li><p>自定义命令扩展性</p><ul><li><strong>问题</strong><br> 原生命令产生的结果可能需要进行二次处理，业务层才能更方便的使用。</li><li><strong>解决方案</strong><br> 利用__index方法检查自定义command表是否有函数，有的话用pcall进行包裹再缓存函数。<br> 增加add_command函数，外部想扩展自定义函数只需要调用该命令即可。</li></ul></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs lua"> <span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> contriner_client = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;contriner_client&quot;</span><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet.db.redis&quot;</span><br><span class="hljs-keyword">local</span> string_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;string_util&quot;</span><br><span class="hljs-keyword">local</span> sha2 = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;sha2&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">log</span> = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">setmetatable</span> = <span class="hljs-built_in">setmetatable</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">assert</span> = <span class="hljs-built_in">assert</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">pcall</span> = <span class="hljs-built_in">pcall</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">ipairs</span> = <span class="hljs-built_in">ipairs</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">pairs</span> = <span class="hljs-built_in">pairs</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">type</span> = <span class="hljs-built_in">type</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">string</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">select</span> = <span class="hljs-built_in">select</span><br><span class="hljs-keyword">local</span> tunpack = <span class="hljs-built_in">table</span>.<span class="hljs-built_in">unpack</span><br><span class="hljs-keyword">local</span> debug_getinfo = <span class="hljs-built_in">debug</span>.<span class="hljs-built_in">getinfo</span><br><br><span class="hljs-keyword">local</span> g_sha_map = &#123;&#125;<br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><span class="hljs-keyword">local</span> command = &#123;&#125;     <span class="hljs-comment">--自定义命令函数</span><br><br><span class="hljs-keyword">local</span> cmdfuncs = &#123;&#125;    <span class="hljs-comment">--命令函数缓存</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">函数作用域：M的成员函数</span><br><span class="hljs-comment">函数名称：script_run</span><br><span class="hljs-comment">描述:运行redis脚本命令</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">- self (redis_conn): new_client返回的连接对象</span><br><span class="hljs-comment">- script_str (string)：redis lua 脚本</span><br><span class="hljs-comment">- ...       脚本传递参数</span><br><span class="hljs-comment">]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">command:script_run</span><span class="hljs-params">(script_str,...)</span></span><br><span class="hljs-keyword">local</span> conn = <span class="hljs-built_in">self</span>.conn<br><span class="hljs-built_in">assert</span>(conn,<span class="hljs-string">&quot;not connect redis &quot;</span>)<br><span class="hljs-built_in">assert</span>(<span class="hljs-built_in">type</span>(script_str) == <span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-string">&#x27;script_str not string&#x27;</span>)<br><br><span class="hljs-keyword">local</span> sha = g_sha_map[script_str]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sha <span class="hljs-keyword">then</span><br>sha = sha2.sha1(script_str)<br>g_sha_map[script_str] = sha<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> isok,ret = <span class="hljs-built_in">pcall</span>(conn.evalsha,conn,...)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isok <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">find</span>(ret,<span class="hljs-string">&quot;NOSCRIPT&quot;</span>,<span class="hljs-literal">nil</span>,<span class="hljs-literal">true</span>) <span class="hljs-keyword">then</span><br>ret = conn:eval(script_str,...)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> ret<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_line_info</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> info = debug_getinfo(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;Sl&quot;</span>)<br><span class="hljs-keyword">local</span> lineinfo = info.short_src .. <span class="hljs-string">&quot;:&quot;</span> .. info.currentline<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--给redis命令施加保护执行</span><br><span class="hljs-keyword">local</span> mt = &#123;<br><span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,k)</span></span><br><span class="hljs-keyword">local</span> f = cmdfuncs[k]<br><span class="hljs-keyword">if</span> f <span class="hljs-keyword">then</span><br>t[k] = f<br><span class="hljs-keyword">return</span> f<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(self,...)</span></span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">self</span>.conn <span class="hljs-keyword">then</span><br><span class="hljs-keyword">local</span> ok,conn = <span class="hljs-built_in">pcall</span>(redis.connect,<span class="hljs-built_in">self</span>.conf)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;connect redis err &quot;</span>,get_line_info(),conn,k,<span class="hljs-built_in">self</span>.conf)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">self</span>.conn = conn<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> cmd = command[k]<br><span class="hljs-keyword">if</span> cmd <span class="hljs-keyword">then</span><br><span class="hljs-keyword">local</span> ret = &#123;<span class="hljs-built_in">pcall</span>(cmd,<span class="hljs-built_in">self</span>,...)&#125;<br><span class="hljs-keyword">local</span> isok = ret[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> err = ret[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isok <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;call redis command faild &quot;</span>,get_line_info(),err,k,...)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">select</span>(<span class="hljs-number">2</span>,tunpack(ret))<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">local</span> isok,ret = <span class="hljs-built_in">pcall</span>(<span class="hljs-built_in">self</span>.conn[k],<span class="hljs-built_in">self</span>.conn,...)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isok <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;call redis faild &quot;</span>,get_line_info(),ret,k,...)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> ret<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>t[k] = f<br><span class="hljs-comment">--缓存命令函数</span><br>cmdfuncs[k] = f<br><span class="hljs-keyword">return</span> f<br><span class="hljs-keyword">end</span>&#125;<br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">函数作用域：M的成员函数</span><br><span class="hljs-comment">函数名称：new_client</span><br><span class="hljs-comment">描述:新建一个在share_config_m 中写的key为redis表的名为db_name的连接配置</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">- db_name (string): 连接配置名称</span><br><span class="hljs-comment">]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.new_client</span><span class="hljs-params">(db_name)</span></span><br><span class="hljs-keyword">local</span> cli = contriner_client:new(<span class="hljs-string">&#x27;share_config_m&#x27;</span>)<br><span class="hljs-keyword">local</span> conf_map = cli:mod_call(<span class="hljs-string">&#x27;query&#x27;</span>,<span class="hljs-string">&#x27;redis&#x27;</span>)<br><span class="hljs-built_in">assert</span>(conf_map <span class="hljs-keyword">and</span> conf_map[db_name],<span class="hljs-string">&quot;not redis conf&quot;</span>)<br><br><span class="hljs-keyword">local</span> conf = conf_map[db_name]<br><span class="hljs-keyword">local</span> t_conn = &#123;<br>conf = conf,<br>conn = <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-built_in">setmetatable</span>(t_conn,mt)<br>t_conn:get(<span class="hljs-string">&quot;ping&quot;</span>)       <span class="hljs-comment">--尝试调一下</span><br><span class="hljs-keyword">return</span> t_conn<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">函数作用域：M的成员函数</span><br><span class="hljs-comment">函数名称：add_command</span><br><span class="hljs-comment">描述:增加自定义command命令</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">- M (table): 定义的函数模块</span><br><span class="hljs-comment">]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.add_command</span><span class="hljs-params">(M)</span></span><br><span class="hljs-keyword">for</span> k,func <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(M) <span class="hljs-keyword">do</span><br><span class="hljs-built_in">assert</span>(<span class="hljs-keyword">not</span> command[k],<span class="hljs-string">&quot;command is exists &quot;</span> .. k)<br>command[k] = func<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">函数作用域：M的成员函数</span><br><span class="hljs-comment">函数名称：new_watch</span><br><span class="hljs-comment">描述:redis订阅</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">- db_name (string): 连接的redis名称</span><br><span class="hljs-comment">- subscribe_list (table): 订阅的固定key</span><br><span class="hljs-comment">- psubscribe_list (table): 订阅的匹配key</span><br><span class="hljs-comment">- call_back (function): 消息回调函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">返回值</span><br><span class="hljs-comment">- 取消订阅函数</span><br><span class="hljs-comment">]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.new_watch</span><span class="hljs-params">(db_name,subscribe_list,psubscribe_list,call_back)</span></span><br><span class="hljs-keyword">local</span> cli = contriner_client:new(<span class="hljs-string">&#x27;share_config_m&#x27;</span>)<br><span class="hljs-keyword">local</span> conf_map = cli:mod_call(<span class="hljs-string">&#x27;query&#x27;</span>,<span class="hljs-string">&#x27;redis&#x27;</span>)<br><span class="hljs-built_in">assert</span>(conf_map <span class="hljs-keyword">and</span> conf_map[db_name],<span class="hljs-string">&quot;not redis conf&quot;</span>)<br><span class="hljs-keyword">local</span> conf = conf_map[db_name]<br><br><span class="hljs-keyword">local</span> is_cancel = <span class="hljs-literal">false</span><br><span class="hljs-keyword">local</span> ok,watch<br><br>skynet.fork(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> watch <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_cancel <span class="hljs-keyword">do</span><br>ok,watch = <span class="hljs-built_in">pcall</span>(redis.watch,conf)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;redisf connect watch err &quot;</span>,conf)<br><span class="hljs-keyword">end</span><br>skynet.sleep(<span class="hljs-number">100</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(subscribe_list) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_cancel <span class="hljs-keyword">then</span><br>watch:subscribe(key)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(psubscribe_list) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_cancel <span class="hljs-keyword">then</span><br>watch:psubscribe(key)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> is_cancel <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> ok,msg,key,psubkey = <span class="hljs-built_in">pcall</span>(watch.message,watch)<br><span class="hljs-keyword">if</span> ok <span class="hljs-keyword">then</span><br>call_back(msg,key,psubkey)<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_cancel <span class="hljs-keyword">then</span><br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;watch.message err :&quot;</span>,msg,key,psubkey)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>is_cancel = <span class="hljs-literal">true</span><br><span class="hljs-keyword">if</span> watch <span class="hljs-keyword">then</span><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(subscribe_list) <span class="hljs-keyword">do</span><br>watch:unsubscribe(key)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">for</span> _,key <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(psubscribe_list) <span class="hljs-keyword">do</span><br>watch:punsubscribe(key)<br><span class="hljs-keyword">end</span><br>watch:disconnect()<br>watch = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><h1 id="外部扩展"><a href="#外部扩展" class="headerlink" title="外部扩展"></a>外部扩展</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> redisf = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;redisf&quot;</span><br><br><span class="hljs-keyword">local</span> tinsert = <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span><br><span class="hljs-keyword">local</span> tunpack = <span class="hljs-built_in">table</span>.<span class="hljs-built_in">unpack</span><br><span class="hljs-keyword">local</span> <span class="hljs-built_in">pairs</span> = <span class="hljs-built_in">pairs</span><br><br><span class="hljs-keyword">local</span> M = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:hgetall</span><span class="hljs-params">(key)</span></span><br><span class="hljs-keyword">local</span> conn = <span class="hljs-built_in">self</span>.conn<br><span class="hljs-keyword">local</span> ret = conn:hgetall(key)<br><span class="hljs-keyword">local</span> res = &#123;&#125;<br><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,#ret,<span class="hljs-number">2</span> <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> k = ret[i]<br><span class="hljs-keyword">local</span> v = ret[i + <span class="hljs-number">1</span>]<br>res[k] = v<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M:hmset</span><span class="hljs-params">(key,map)</span></span><br><span class="hljs-keyword">local</span> conn = <span class="hljs-built_in">self</span>.conn<br><span class="hljs-keyword">local</span> args_list = &#123;&#125;<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(map) <span class="hljs-keyword">do</span><br>tinsert(args_list,k)<br>tinsert(args_list,v)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> conn:hmset(key,tunpack(args_list))<br><span class="hljs-keyword">end</span><br><br>redisf.add_command(M)<br><br><span class="hljs-keyword">return</span> redisf<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试可以看skynet_fly源码下的test模块。<br><a href="https://github.com/huahua132/skynet_fly">skynetfly源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于定时器的封装</title>
    <link href="/2023/07/02/skynet_fly/timer/"/>
    <url>/2023/07/02/skynet_fly/timer/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要封装定时器？"><a href="#为什么要封装定时器？" class="headerlink" title="为什么要封装定时器？"></a>为什么要封装定时器？</h1><ol><li>skynet只提供定时器注册回调，缺少传参，注销，延伸等等常用方法。</li></ol><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>一开始尝试用分配定时器id的方式实现，这种方式要考虑<strong>id重用</strong>的情况，虽然说<code>int64</code>走一个轮回要很久，但是这种情况还是要处理，走了一个轮回后，就有可能前面的id还被占用着，后续的id分配效率会降低。这种实现方式不是很稳定可靠。<br>后续想了一下还是用面向对象的思想，因为前一种方式无非是timer模块用一个map对应id映射定时器信息表，注册好了返回一个id，供使用者做后续<strong>注销</strong>，<strong>延期</strong>，既然返回id是返回，为什么不直接返回table呢，反正返回的也是table的引用，并没有增加什么开销，感觉分配id的操作有点画蛇添足了。<br>还是用面向对象思想，定时器实例提供<strong>创建定时器</strong>， <strong>取消定时器</strong>，<strong>延长定时器</strong>等等方法。<br>定时器实例可以设置定时回调几次或者循环调用。后续可以继续实现按<strong>时间节点</strong>触发的定时器，比如每天上午8点，每周一零点。</p><h1 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h1><p>通常注册一个定时器立马调用skynet.timeout，但是如果你的定时器需要取消，我觉得这样并不好，特别是你注册的时间较长，又会注销，过程中又触发注册很频繁的话，这样会浪费掉很多内存，因为skynet注册一个定时器就会占用一个<strong>lua携程</strong>直到定时器触发回调才释放。如果你注册触发时间为1天，那么会积压1天内注册的定时器。所以我没有直接调用skynet.timeout，而是用一个间隔60秒的check循环，如果中途注销了，循环就结束了，这样非常有效的解决了这个问题，虽然多一些定时器注册回调，但是换来了稳定性，使用者不用担心有内存暴涨的风险。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><ul><li><p><strong>创建定时器</strong><br>  <code>timer:new()</code><br>  3个必传参数<br>  <code>expire</code> 回调时间，保留skynet.time_out的100等于1秒。<br>  <code>timer</code> 触发次数，0次表示循环触发。<br>  <code>callback</code> 回调函数。</p><p>  后面省略传参是回调函数的参数。</p></li><li><p><strong>取消定时器</strong><br>  <code>timeobj:cancel()</code></p></li><li><p><strong>延长定时器</strong><br>  <code>timeobj:extend(ex_expire)</code><br>  参数<br>  <code>ex_expire</code> 延长时间，如果创建定时器的时间为5秒，创建时间为：8:10:30,在定时器触发之前调用 timeobj:extend(100)，定时器会再8:10:36秒触发，在定时器触发之后调用无效。</p></li></ul><p><a href="https://github.com/huahua132/skynet_fly">skynetfly源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于skynet_fly热更新实现</title>
    <link href="/2023/06/30/skynet_fly/%E5%85%B3%E4%BA%8Eskynet_fly%E7%83%AD%E6%9B%B4%E6%96%B0%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/06/30/skynet_fly/%E5%85%B3%E4%BA%8Eskynet_fly%E7%83%AD%E6%9B%B4%E6%96%B0%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>可以先看看这篇<a href="https://huahua132.github.io/2023/05/22/think/reload/">关于skynet做服务热更新</a><br>这里我主要阐述各方案比较之后觉得较好的方案三实现，我在skynet_fly也决定使用方案三，接下来进入正题。</p><p>主要思想围绕新服务替换旧服务的方案，通过讲述<strong>如何热更</strong>、<strong>rpc调用</strong>、<strong>服务切换</strong>、<strong>旧服务退出</strong>这4个点展开。<br>可以结合代码看文档，这样应该会更清晰，表达能力有限♥(ˆ◡ˆԅ)</p><ul><li><p><strong>如何热更</strong><br>通过设置关闭skynet.codecache，这样launch新服务的时候加载的就是新代码了。不过我不想写每个服务的时候都去做这个操作，我就抽象了一个服务，我在skynet_fly封装了hot_container.lua服务 路径<code>service/hot_container.lua</code>。我叫它<strong>热更服务容器</strong>。<br>这个服务启动的时候要传递<strong>MODULE_NAME</strong>,也就是要加载的可热更模板的代码实现。<br>hot_container会加载<strong>MODULE_NAME</strong>名称的lua代码文件，<strong>MODULE_NAME</strong>需要返回一个CMD命令表，也就是skynet lua消息的命令，必须实现<strong>start</strong>,<strong>exit</strong>命令。这样就是实现了可热更容器的抽象。<br><strong>hot_container</strong>是可热更容器的意思。通常我们热更模块实现代码命名为<strong>xxx_m.lua</strong>,我希望这成为skynet_fly的命令规范，并且放在命名为module的文件夹下。</p></li><li><p><strong>rpc调用</strong><br>skynet的rpc调用通过服务id或者服务别名调用。可热更服务不能简单的通过服务别名调用，因为可能出现旧服务和新服务同时存在的情况，我们需要一个管理记录可热更服务的服务，如此就诞生了contriner_mgr.lua服务 路径<code>service/contriner_mgr.lua</code>，我叫它<strong>容器管理员</strong>。<br>以及给需要<strong>rpc</strong>调用的客户配套的lua模块代码contriner_client.lua 路径<code>lualib/contriner_client.lua</code>，我叫它<strong>容器客户端</strong>。<br><strong>容器管理员</strong>提供了<strong>启动热更服务</strong>、<strong>关闭热更服务</strong>、<strong>关闭所有热更服务</strong>，<strong>查询热更模块id</strong>、<strong>监听热更模块</strong>、<strong>取消监听模块</strong>，5个命令，容器管理员服务是不可以热更的。</p></li></ul><ul><li><p><strong>启动热更服务</strong><br>  <code>load_module MODULE_NAME</code>,通过传入module_name,contriner_mgr会加载<strong>mod_config.lua</strong>,拿到此模板的配置，然后启动服务，启动完毕再通知旧服务<strong>exit</strong>，接下给监听的服务下发新的服务id和版本号。mod_config.lua初始定义在load_mods.lua文件中。</p></li><li><p><strong>关闭热更服务</strong><br>  <code>kill_module MODULE_NAME</code>，比如我们产品可能有些功能不要了，就可以关闭该服务了。</p></li><li><p><strong>关闭所有热更服务</strong><br>  <code>kill_all</code>，停服时使用，需要做停服的数据收尾处理。</p></li><li><p><strong>查询热更模块id</strong><br>  <code>query MODULE_NAME</code>,查询模块服务id,在contriner_client中首次加载使用查询之后挂载监听。</p></li><li><p><strong>监听热更模块</strong><br>  <code>watch MODULE_NAME</code>,监听模块。</p></li><li><p><strong>取消监听模块</strong>,取消监听。</p></li></ul><p><strong>容器客户端</strong>封装了对了<strong>热更管理员</strong>的交互我们在使用时感觉不到<strong>热更管理员</strong>♥(ˆ◡ˆԅ)的存在。<br><strong>容器客户端</strong>是使用面向对象的方式实现的，为了方便每个<strong>rpc调用对象</strong>有自己的<strong>服务切换处理</strong>。<br>提供了 <strong>new</strong>、<strong>mod_send</strong>、<strong>mod_call</strong>、<strong>balance_send</strong>、<strong>balance_call</strong>、<strong>broadcast</strong>方法。</p><ul><li><p><strong>new</strong><br>  创建一个<strong>rpc</strong>调用客户端，传入想要联系的<strong>MODULE_NAME</strong>和新服务切换的检查函数。<br>  MODULE_NAME服务地址本地没有的情况下会去<strong>query</strong> <strong>容器管理员</strong>，并且<strong>watch</strong>监听。</p></li><li><p><strong>mod_send</strong><br>  通过取模自己服务id<strong>映射</strong>一个热更服务id，然后对应id skynet.send消息。</p></li><li><p><strong>mod_call</strong><br>  同mod_call，不过是调用call。</p></li><li><p><strong>balance_send</strong><br>  简单轮询负载均衡,send消息</p></li><li><p><strong>balance_call</strong><br>  简单轮询负载均衡。call消息</p></li><li><p><strong>broadcast</strong><br>  广播 send消息</p></li></ul><p>以上发消息函数调用之前都会检测<strong>是否切服</strong>。</p><p>contriner_client还<strong>重写skynet.eixt 函数</strong>，在退出前<strong>注销监听</strong>。</p><ul><li><p><strong>服务切换</strong><br>  服务的实现就是通过contriner_client中的<strong>new</strong>函数传入is_can_switch函数，每次发消息都会调用这个函数。</p></li><li><p><strong>旧服务退出</strong><br>  <strong>容器管理员</strong>launch新服务后会发送exit消息给旧服务，旧服务自己决定什么时候退出。</p></li></ul><p>监听实现思路参考了skynet.sharedata实现，看源码一度怀疑监听机制会有次序bug，觉得在query和monitor之间插入一个load处理的话就暂时收不到新的配置了。不过后面看着看着想通了。<br>传入对象与新对象不同的话，会直接返回新对象。<br>在skynet_fly中我有引入一个版本号来处理这种情况。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CMD.monitor</span><span class="hljs-params">(name, obj)</span></span><br><span class="hljs-keyword">local</span> v = <span class="hljs-built_in">assert</span>(pool[name])<br><span class="hljs-keyword">if</span> obj ~= v.obj <span class="hljs-keyword">then</span><br>sharedata.host.incref(v.obj)<br><span class="hljs-keyword">return</span> v.obj<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> n = pool_count[name].n + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> n &gt; pool_count[name].threshold <span class="hljs-keyword">then</span><br>n = n - check_watch(v.watch)<br>pool_count[name].threshold = n * <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br>pool_count[name].n = n<br><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(v.watch, skynet.response())<br><br><span class="hljs-keyword">return</span> NORET<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>可以参考查看examples下的hot_module5示例，它是一个简单的数字炸弹游戏，热更是使用可以分为2部讲解，<strong>如何启动</strong>，<strong>如何rpc调用</strong>。</p><ul><li><strong>如何启动</strong><ul><li>第一步启动<strong>容器管理员</strong>。</li><li>第二步编写<code>load_mods.lua</code>,之后通过make_server脚本，创建mod_config.lua，也就是热更模块的配置，我希望<strong>热更模块</strong>是可插拔配置启动的，不需要去手写代码启动。<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>service_m = &#123;<br>launch_seq = <span class="hljs-number">1</span>,<br>launch_num = <span class="hljs-number">1</span>,<br>mod_args = <span class="hljs-literal">nil</span>,<br>default_arg = &#123;<br>player_num = <span class="hljs-number">2</span>,<br>min_num = <span class="hljs-number">1</span>,<br>max_num = <span class="hljs-number">100</span>,<br>&#125;<br>&#125;,<br><br>agent_m = &#123;<br>launch_seq = <span class="hljs-number">2</span>,<br>launch_num = <span class="hljs-number">2</span>,<br>mod_args = &#123;<br>&#123;<br>player_id = <span class="hljs-number">10001</span>,<br>nickname = <span class="hljs-string">&quot;张三&quot;</span>,<br>&#125;,<br>&#123;<br>player_id = <span class="hljs-number">10004</span>,<br>nickname = <span class="hljs-string">&quot;李四&quot;</span>,<br>hello = &#123;a = <span class="hljs-number">1</span>,b = <span class="hljs-number">2</span>&#125;<br>&#125;,<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>这是load_mods.lua的一个编写示例，像service_m、和agent_m是需要启动的热更模板。<br>每个模块有4个参数可以配置。</li></ul></li><li><strong>launch_seq</strong> 首次启动顺序，从小到大。</li><li><strong>launch_num</strong> 启动数量。</li><li><strong>default_arg</strong> 默认传入配置，热更模板内的<strong>start</strong>函数接收，当<strong>mod_args</strong>中没有对应服务下标的配置时启用。</li><li><strong>mod_args</strong> 是一个配置数组，为了应对相同服务可能配置不通的情况。</li></ul><p>有了mod_config之后，我们在main.lua中通过mod_config.lua启动。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-keyword">local</span> mod_config = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;mod_config&quot;</span><br><span class="hljs-keyword">local</span> table_util = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;table_util&quot;</span><br><br>skynet.start(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;start hot_module5!!!&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>)<br><span class="hljs-keyword">local</span> cmgr = skynet.uniqueservice(<span class="hljs-string">&#x27;contriner_mgr&#x27;</span>)<br><br>skynet.newservice(<span class="hljs-string">&quot;debug_console&quot;</span>, skynet.<span class="hljs-built_in">getenv</span>(<span class="hljs-string">&#x27;debug_port&#x27;</span>))<br><br><span class="hljs-keyword">for</span> mod_name,mod_cfg <span class="hljs-keyword">in</span> table_util.sort_ipairs(mod_config,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a,b)</span></span><br><span class="hljs-keyword">return</span> a.launch_seq &lt; b.launch_seq<br><span class="hljs-keyword">end</span>) <span class="hljs-keyword">do</span><br>skynet.call(cmgr,<span class="hljs-string">&#x27;lua&#x27;</span>,<span class="hljs-string">&#x27;load_module&#x27;</span>,mod_name)<br><span class="hljs-keyword">end</span><br><br>skynet.<span class="hljs-built_in">exit</span>()<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><ul><li><p><strong>如何rpc调用</strong><br>rpc调用使用非常简单易用。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> service_client = contriner_client:new(<span class="hljs-string">&quot;service_m&quot;</span>) <span class="hljs-comment">--新建一个联系service_m的对象</span><br><span class="hljs-comment">--因为service_m可能启动多个，使用模除以的方式去映射一个服务id</span><br>service_client:mod_send(cmd,...)<br>service_client:mod_call(cmd,...)<br>service_client:mod_call(cmd,...)<br><br><span class="hljs-keyword">local</span> agent_client = contriner_client:new(<span class="hljs-string">&quot;agent_m&quot;</span>) <span class="hljs-comment">--新建一个联系agent_m的对象</span><br>agent_client:mod_send(cmd,...)<br></code></pre></td></tr></table></figure><p>contriner_client会帮我们管理好对应服务的id。</p></li><li><p><strong>功能改动</strong><br>在实现mysql连接模块的时候发现同一模板多个服务可以连接不同的数据库，当rpc客户端想要联系指定的数据库时并没有很好办法，于是就扩展了instance_name,使module_name下多了一个二级目录，扩展后的<code>contriner_client</code>多<strong>mod_call_by_name</strong>等等。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> game_client = contriner_client:new(<span class="hljs-string">&quot;mysql_m&quot;</span>,<span class="hljs-string">&quot;game&quot;</span>)<br><span class="hljs-keyword">local</span> ret = game_client:mod_call_by_name(<span class="hljs-string">&quot;query&quot;</span>,<span class="hljs-string">&quot;show tables;&quot;</span>)<br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;ret :&quot;</span>,ret)<br><br><span class="hljs-keyword">local</span> sql_str = <span class="hljs-string">&quot;insert into user(id,name) values(&#x27;1&#x27;,&#x27;skynet_fly&#x27;);&quot;</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;game insert:&quot;</span>,game_client:balance_call_by_name(<span class="hljs-string">&quot;query&quot;</span>,sql_str))<br><br><span class="hljs-keyword">local</span> sql_str = <span class="hljs-string">&quot;select * from user where name = &#x27;skynet_fly&#x27;;&quot;</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;game select:&quot;</span>,game_client:balance_call_by_name(<span class="hljs-string">&quot;query&quot;</span>,sql_str))<br><br><span class="hljs-keyword">local</span> hall_client = contriner_client:new(<span class="hljs-string">&quot;mysql_m&quot;</span>,<span class="hljs-string">&quot;hall&quot;</span>)<br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;hall select:&quot;</span>,hall_client:balance_call_by_name(<span class="hljs-string">&quot;query&quot;</span>,sql_str))<br><span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;mysql_test_m over!!!&quot;</span>)<br></code></pre></td></tr></table></figure><p>对应的启动配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br>mysql_m = &#123;<br>launch_seq = <span class="hljs-number">4</span>,<br>launch_num = <span class="hljs-number">4</span>,<br>mod_args = &#123;<br>&#123;<br>instance_name = <span class="hljs-string">&quot;game&quot;</span>,<br>db_conf = &#123;<br>host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-string">&#x27;3306&#x27;</span>,<br>max_packet_size = <span class="hljs-number">1048576</span>,<br>user = <span class="hljs-string">&#x27;root&#x27;</span>,<br>password = <span class="hljs-string">&#x27;123456&#x27;</span>,<br>database = <span class="hljs-string">&#x27;gamedb&#x27;</span>,<br>&#125;<br>&#125;,<br>&#123;<br>instance_name = <span class="hljs-string">&quot;game&quot;</span>,<br>db_conf = &#123;<br>host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-string">&#x27;3306&#x27;</span>,<br>max_packet_size = <span class="hljs-number">1048576</span>,<br>user = <span class="hljs-string">&#x27;root&#x27;</span>,<br>password = <span class="hljs-string">&#x27;123456&#x27;</span>,<br>database = <span class="hljs-string">&#x27;gamedb&#x27;</span>,<br>&#125;<br>&#125;,<br>&#123;<br>instance_name = <span class="hljs-string">&quot;hall&quot;</span>,<br>db_conf = &#123;<br>host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-string">&#x27;3306&#x27;</span>,<br>max_packet_size = <span class="hljs-number">1048576</span>,<br>user = <span class="hljs-string">&#x27;root&#x27;</span>,<br>password = <span class="hljs-string">&#x27;123456&#x27;</span>,<br>database = <span class="hljs-string">&#x27;halldb&#x27;</span>,<br>&#125;<br>&#125;,<br>&#123;<br>instance_name = <span class="hljs-string">&quot;hall&quot;</span>,<br>db_conf = &#123;<br>host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>port = <span class="hljs-string">&#x27;3306&#x27;</span>,<br>max_packet_size = <span class="hljs-number">1048576</span>,<br>user = <span class="hljs-string">&#x27;root&#x27;</span>,<br>password = <span class="hljs-string">&#x27;123456&#x27;</span>,<br>database = <span class="hljs-string">&#x27;halldb&#x27;</span>,<br>&#125;<br>&#125;,<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>这样就可以配置rpc调用不同的数据库了。<br>之后在实现<code>examples/digitalbomb</code>数字炸弹时发现需要<strong>指定玩家id去映射服务</strong>，还有<strong>外部需要拿服务ID的需求</strong>，于是又扩展了对应函数。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里就讲解完了，如果有不明白或者觉得不好的地方，欢迎提<strong>issues</strong>。<br>下一遍我准备写一下skynet_fly的配置脚本工具生成。<br><a href="https://github.com/huahua132/skynet_fly">skynetfly源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于skynet_fly的一键构建服务配置</title>
    <link href="/2023/06/30/skynet_fly/%E5%85%B3%E4%BA%8Eskynet_fly%E7%9A%84%E4%B8%80%E9%94%AE%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/06/30/skynet_fly/%E5%85%B3%E4%BA%8Eskynet_fly%E7%9A%84%E4%B8%80%E9%94%AE%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要做这个？"><a href="#为什么要做这个？" class="headerlink" title="为什么要做这个？"></a>为什么要做这个？</h1><ol><li>skynet启动用的skynet_config新增一个目录都要去增加一个path并重启，我就想有没有办法不用手写<strong>path</strong>，用脚本写。</li><li>热更服务的path如果有新增模块引入，之前没有埋伏路径，增加了新路径，岂不是会找不到，很难受，这样。</li><li>新增一个服务模块每次都有手写一个config好麻烦。</li><li>热更服务需要通过curl连接 debug_console服务去执行热更。</li></ol><p>所以这个事情必须要做。</p><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>本想着能不能像go-zero框架实现一个类似一键生成工具。但是我觉得这样还要安装一个工具挺麻烦的，就直接用shell+lua的方式来写，自带的环境，方便执行。<br>实现时，不知道使用者要把skynet_fly放在那个文件夹，所有考虑了skynet_fly可以放在同磁盘任意文件夹下。<br>构建一个服务需要在服务根目录执行使用<code>skynet_fly_path/binshell/ skynet_fly_path svr_name thread</code>构建。<br>比如如何是examples&#x2F;webapp,你就需要先cd到examples&#x2F;webapp,执行<code>sh ../../binshell/make_server.sh ../../</code><br>然后就会生成webapp_config.lua mod_config.lua script一系列执行脚本。<br>实现细节写在 <code>script</code>和<code>binshell</code>文件夹下。</p><ul><li><strong>关于生成skynet_config</strong><br>path路径生成规则都是由近到远的查找规则， 优先级 本服务svr下文件下 &gt; skynet_fly文件夹 &gt; skynet文件夹</li></ul><ul><li>cpath c服务模块查找 写死<code>skynet_fly_path/cservice/?.so; .. skynet_path/cservice/?.so;</code></li><li>lua_cpath c模块查找 写死<code>skynet_fly_path .. &quot;luaclib/?.so;&quot; .. skynet_path .. &quot;luaclib/?.so;&quot;</code></li><li>luaservice c服务查找 写死server_path .. “?.lua;” ..<br>       server_path .. “service&#x2F;?.lua;” ..<br>       skynet_fly_path .. “service&#x2F;?.lua;” ..<br>       common_path .. “service&#x2F;?.lua;” ..<br>      skynet_path .. “service&#x2F;?.lua;”,</li><li>lua_path 动态生成构建。</li></ul><p> 构建查找规则如下图</p><p><img src="/img/skynet_fly/dir.bmp"><br>以chinese_chess(server)为例。<br>lua_path 查找优先级为:</p><ol><li>递归查找chinese_chess文件夹下非service文件夹</li><li>递归查找common文件夹下非service文件夹</li><li>递归查找skynet_fly&#x2F;lualib</li><li>递归查找skynet_fly&#x2F;3rd</li><li>递归查找skynet_fly&#x2F;skynet&#x2F;lualib</li></ol> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--创建 lua文件 查找规则，优先级 server下非service文件夹 &gt; server上上级目录common文件夹非service文件夹 &gt; skynet_fly lualib下所有文件夹 &gt; skynet lualib下所以文件夹</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.create_luapath</span><span class="hljs-params">(skynet_fly_path)</span></span><br><span class="hljs-keyword">local</span> server_path = <span class="hljs-string">&#x27;./&#x27;</span><br><span class="hljs-keyword">local</span> skynet_path = skynet_fly_path .. <span class="hljs-string">&#x27;/skynet&#x27;</span><br><span class="hljs-keyword">local</span> common_path = <span class="hljs-string">&#x27;../../common&#x27;</span><br><br><span class="hljs-comment">--server下非service文件夹</span><br><span class="hljs-keyword">local</span> lua_path = server_path .. <span class="hljs-string">&#x27;?.lua;\n&#x27;</span><br><span class="hljs-keyword">for</span> file_name,file_path,file_info <span class="hljs-keyword">in</span> M.diripairs(server_path) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> file_info.mode == <span class="hljs-string">&#x27;directory&#x27;</span> <span class="hljs-keyword">and</span> file_name ~= <span class="hljs-string">&#x27;service&#x27;</span> <span class="hljs-keyword">then</span><br>lua_path = lua_path .. file_path .. <span class="hljs-string">&#x27;/?.lua;\n&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--server上上级目录common所有文件夹</span><br>lua_path = lua_path .. common_path .. <span class="hljs-string">&#x27;?.lua;\n&#x27;</span><br><span class="hljs-keyword">for</span> file_name,file_path,file_info <span class="hljs-keyword">in</span> M.diripairs(common_path) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> file_info.mode == <span class="hljs-string">&#x27;directory&#x27;</span> <span class="hljs-keyword">and</span> file_name ~= <span class="hljs-string">&#x27;service&#x27;</span> <span class="hljs-keyword">then</span><br>lua_path = lua_path .. file_path .. <span class="hljs-string">&#x27;/?.lua;\n&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--skynet_fly lualib下所有文件夹</span><br>lua_path = lua_path .. skynet_fly_path .. <span class="hljs-string">&#x27;/lualib/?.lua;\n&#x27;</span><br><span class="hljs-keyword">for</span> file_name,file_path,file_info <span class="hljs-keyword">in</span> M.diripairs(skynet_fly_path .. <span class="hljs-string">&#x27;/lualib&#x27;</span>) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> file_info.mode == <span class="hljs-string">&#x27;directory&#x27;</span> <span class="hljs-keyword">then</span><br>lua_path = lua_path .. file_path .. <span class="hljs-string">&#x27;/?.lua;\n&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--skynet_fly 3rd下所以文件夹</span><br><span class="hljs-keyword">for</span> file_name,file_path,file_info <span class="hljs-keyword">in</span> M.diripairs(skynet_fly_path .. <span class="hljs-string">&#x27;/3rd&#x27;</span>) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> file_info.mode == <span class="hljs-string">&#x27;directory&#x27;</span> <span class="hljs-keyword">then</span><br>lua_path = lua_path .. file_path .. <span class="hljs-string">&#x27;/?.lua;\n&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--skynet lualib下所以文件夹</span><br>lua_path = lua_path .. skynet_path .. <span class="hljs-string">&#x27;/lualib/?.lua;\n&#x27;</span><br><span class="hljs-keyword">for</span> file_name,file_path,file_info <span class="hljs-keyword">in</span> M.diripairs(skynet_path .. <span class="hljs-string">&#x27;/lualib&#x27;</span>) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> file_info.mode == <span class="hljs-string">&#x27;directory&#x27;</span> <span class="hljs-keyword">then</span><br>lua_path = lua_path .. file_path .. <span class="hljs-string">&#x27;/?.lua;\n&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> lua_path<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p> skynet_fly服务启动时会加载<code>lualib/preload.lua</code>文件，我在那里做了重新构建新的luapath，<strong>再也不用手写path啦</strong>。<br> 同时热更服务也不用担心新加的路径没有写到path中。</p><ul><li><p><strong>关于生成mod_config.lua</strong><br>mod_config是热更模板的配置文件，主要考虑到每个服务使用的配置参数不同，还有不想手写启动代码，而且热更新增服务可以不需要重启。<br>mod_config每次启动或者调用check_reload之后都会拷贝一份mod_config.lua.old，表示目前服务使用的配置，方便在check_reload中对比新旧mod_config，有修改更新对应热更模块。</p></li><li><p><strong>mod_config的重复构建</strong><br>重复构建会递归深层对比load_mods和mod_config，对比之后对于mod_config有4种情况。</p></li></ul><ol><li><code>typedef</code> 类型不同了，比如之前是number类型，现在是string类型的配置。</li><li><code>reduce</code> 删除配置了，load_mods把该配置删除了。</li><li><code>add</code> 增加了新配置,load_mods增加了新配置。</li><li><code>valuedef</code> 值不同，比如 1改成2。</li></ol><p>针对4种情况，在前3种情况下都需要去同步修改mod_config，唯有4不变。</p><ul><li><strong>构建运维脚本</strong><br>skynet_fly会生成run.sh,restart.sh,kill_mod.sh,check_reload.sh,stop.sh一系列脚本，方便运维管理。<br>其中run.sh执行之后会生成logrotate的日志切割配置，重命名方式。通过发送hup信号。<br>重点讲一下check_reload.sh</li></ul><p><code>check_reload.sh</code></p><ul><li>检测可热更服务在关闭skynet.codecache之后require的lua模块是否有修改，检测的是文件最后修改时间。</li><li>对比mod_config.lua 和mod_config.lua.old 是否有改变。<br>如果有改动更新对应模块。</li><li>对比mod_config.lua 和mod_config.lua.old 是否有模块配置删除，有的话通知下线。</li></ul><p> 其他脚本都好理解。</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title=" 如何使用"></a> 如何使用</h1><p>构建一个服务需要在服务根目录执行使用<code>skynet_fly_path/binshell/ skynet_fly_path svr_name thread</code>构建。<br>比如构建examples&#x2F;webapp,你就需要先cd到examples&#x2F;webapp,如何执行<code>sh ../../binshell/make_server.sh ../../</code></p><p>调用 binshell&#x2F;make_server.sh 传入1个参数。<br>skynetfly_path的相对路径。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>后续可能增加一键构建服务模板，一键构建db model等等。<br><a href="https://github.com/huahua132/skynet_fly">skynetfly源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>skynet_fly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_fly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于skynet做服务热更新</title>
    <link href="/2023/05/22/think/reload/"/>
    <url>/2023/05/22/think/reload/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要做热更新"><a href="#为什么要做热更新" class="headerlink" title="为什么要做热更新"></a>为什么要做热更新</h1><p>那当然是因为产品需要更新功能，但是服务功能模块又可以有用户在使用，又不想停止服务又想更新功能，就有了需要热更新的需求。<br><strong>无状态</strong>的服务非常好更新，例如查询服务，直接重启服务也可以，只是出现短暂的服务不可用。更新难的是<strong>有状态</strong>的服务，不能直接重启，重启就可能出现数据丢失了。</p><h1 id="热更方式"><a href="#热更方式" class="headerlink" title="热更方式"></a>热更方式</h1><ul><li><strong>在原本的lua虚拟机中更新</strong><br>这种方式通过重新加载读取_G.package.loaded中的文件，去覆盖旧_env中的数据，要处理好table被引用、全局变量、闭包的upvalue,而且还会出现本身旧状态数据不适应新版本处理函数的情况，比如一个函数检测一个状态的值等不等于一个枚举值，旧版本枚举值等于1，新版本等于2，但是旧版本状态数据是1，这个时候你热更还需要抉择状态数据是用旧的还是要改成新的，而且有些状态数据是运行时玩家之间的API交互产生的结果，比如A玩家击杀了B玩家，B玩家状态是挂了，但是标记挂了的枚举在新版本改了，此时的热更肯定不符合预期，所以这种热更方式只适合更新bug。少量更改人为可预见行为，才使用。</li></ul><p>比如skynet提供的inject注入方式。</p><ul><li><strong>旧服务顶替新服务的方式</strong><br>这种方式处理起来不复杂而且稳定可控性强,有点类似重启服务然后更新,但是我们可以做到无缝衔接,新服务到岗之后再停止旧服务,传统的进程服务,可能就是启动新服务,然后把旧服务流量切换到新服务上面,等服务没有流量以后再关掉旧服务。<br>skynet可以直接在进程内就实现这个需求,skynet服务lua沙盒就像一个一个微小的进程,我们在内部实现一个服务做出服务网关,记录所以可热更服务的地址,服务通过向网关注册时的名字联系,发消息都通过网关,然后我们关闭掉skynet.codecache,服务更新之后网关记录新服务地址，通知旧服务下岗，做到无缝热更。</li></ul><p>不过还需要考虑新服务上线，旧服务还不能下岗的情况，比如一把游戏还没有结束。</p><h2 id="新服务顶替旧服务实现方案的一些思考"><a href="#新服务顶替旧服务实现方案的一些思考" class="headerlink" title="新服务顶替旧服务实现方案的一些思考"></a>新服务顶替旧服务实现方案的一些思考</h2><p>所有方案都是利用关闭掉skynet的code.cache来实现业务代码的热更，过程中抽象三种角色。</p><ul><li><p><strong>客户端</strong><br>  所有需要RPC调用某个可热更服务的服务。</p></li><li><p><strong>热更服务管理员</strong><br>  需要在恰当的时间进行切流，比如新服务启动了，也有可能新服务启动了，暂时不切流（比如一把游戏还没有结束）。</p></li><li><p><strong>可热更服务</strong><br>  新服务启动了，旧服务要考虑在什么时候销毁。</p></li><li><p><strong>方案一</strong><br>  热更服务管理员做网关，<strong>客户端</strong>发消息都通过热更服务管理员转发，热更服务管理员还负责启动新服务和通知旧服务关闭，这也是我在工作中实现并使用的方案。不过有些值得诟病的缺点，比如经过转发的消息从1v1变成了1v1v1,消息从2次打包解包变成3次打包解包，微微增加一点系统开销，还有就是没有提供AB面切流的实现，不方便给有状态的服务进行更新。</p></li><li><p><strong>方案二</strong><br>  热更服务管理员做<strong>配置中心</strong>，<strong>客户端</strong>发消息先尝试调用本地记录地址，如果没有或者失败(服务已经退出)或者下岗，询问<strong>配置中心</strong>要新的地址，<strong>可热更服务</strong>启动需要向<strong>配置中心</strong>注册，新的<strong>可热更新服务</strong>注册后，<strong>配置中心</strong>通知旧的<strong>可热更服务</strong>可以下岗了，旧的<strong>可热更服务</strong>根据自身情况决定什么时候退出。如果是有状态的需要维持到状态结束，这个可以通过<strong>可热更服务</strong>去控制，根据自身情况<strong>反馈</strong>给<strong>客户端</strong>。比如一局游戏还没结束，正常处理请求，结束后用户想开始下一把，此时通知<strong>客户端</strong>我要下岗了，此方案就能解决消息多一次打解包，有状态服务的通讯保持。此方案没有什么诟病的地方有点类似redis切片集群方案，一个key不在这个redis节点，通知客户端move到目标节点地址，可以考虑配置中心通知旧服务下岗时接收一下新服务地址，到时候客户发消息过来，如果要<strong>move</strong>就可以直接<strong>切换地址</strong>，不需要向配置中心要了。</p><p>  <a href="https://github.com/huahua132/skynet_fly">方案二实现</a><br>  实现过程中，发现方案二有2个问题</p><ul><li><strong>问题一</strong><br>  给可热更服务发消息必须用call，不能用send，因为<strong>可热更服务</strong>需要<strong>反馈</strong>自身状态。稍微有点影响性能，但是比方案一还是要好。</li><li><strong>问题二</strong><br>  客户缓存的旧地址长时间不访问，过了一段时间再访问，地址的目标服务可能已经<strong>更替</strong>了,不过这种情况要<code>uint32</code>自增的id走了一个轮回,如果机器上是4字节的话,也就是已经新建了<code>16777215(0x00ffffff)</code>个服务,才有可能重用服务id,虽然很难出现,但是还是要处理这种情况,这里考虑🤔加个版本号加模块名的<strong>校验</strong>。(测试的时候改下skynet源码的服务id分配，比如id到100就轮转),实现并增加了测试代码<strong>hot_module3</strong>。</li></ul></li><li><p><strong>方案三</strong><br>  热更服务管理员还是做配置中心，<strong>客户端</strong>发消息用本地记录地址，如果没有<strong>客户端</strong>只要询问一次配置中心地址，然后通过sub&#x2F;pub机制更新新服务地址，此时就会有一个问题，客户拥有新，旧地址，需要考虑需不需要继续和旧地址通信，此时从方案二的服务切流变成客户切流。<br>  <a href="https://github.com/huahua132/skynet_fly">方案三实现</a><br>  方案三的好处就是解决了方案二每次使用call的问题。</p><ul><li><strong>客户端</strong>自己决定什么时候切换到新服务(一般就是状态结束了切换)</li><li><strong>服务</strong> 服务就是看自己什么时候退出(一般就是没有用户状态了退出)</li></ul></li></ul><h1 id="关闭codecache的性能影响测试"><a href="#关闭codecache的性能影响测试" class="headerlink" title="关闭codecache的性能影响测试"></a>关闭codecache的性能影响测试</h1><p>skynet.codecache开启状态是把加载(require )过得lua代码文件缓存到内存，下次其他服务再加载的时候就直接用缓存就行，不需要再去读取代码文件了。<br>我们利用关闭掉codecache来实现热更只会稍微影响新服务启动的速度。<br>    <a href="https://github.com/huahua132/skynet_fly">code_cache_test</a></p><pre><code class="hljs">cache情况下启动1万个服务需要2.65s关闭cache情况下启动1万个服务需要3.69s通过测试，新服务的启动速度下降28%，影响不大。</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过多方案的实现分析，最终确定<strong>方案三</strong>在性能和灵活性上面最具优势，后续决定在方案三的基础上补充，一键检测热更功能（有变动才热更）。</p>]]></content>
    
    
    <categories>
      
      <category>一些想法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一些想法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平衡二叉树的lua实现</title>
    <link href="/2023/05/21/data_struct/avltree/"/>
    <url>/2023/05/21/data_struct/avltree/</url>
    
    <content type="html"><![CDATA[<h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><ul><li><strong>有序性</strong> 所以结点都是<strong>左子树比自己小，右子树比自己大</strong>。</li><li><strong>平衡性</strong> 所以结点左右子树<strong>高度差绝对值</strong>小于等于一。</li><li><strong>唯一性</strong> 结点key唯一，不能重复。</li></ul><p><img src="/img/data_struct/avltree.png"></p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul><li><strong>适合有序性数据存储</strong> 二叉树的天然有序性</li><li><strong>适合范围查找</strong>基于有序的范围查找时间复杂度为<strong>o(log n) + m</strong></li></ul><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li><strong>内存地址分散</strong> 每个结点都是独立数据块，存储<strong>地址分散</strong>，操作速度非常依赖<strong>存储设备的寻址速度</strong>，基于机械硬盘运行将会非常慢。</li></ul><h1 id="操作时间复杂度"><a href="#操作时间复杂度" class="headerlink" title="操作时间复杂度"></a>操作时间复杂度</h1><ul><li><strong>插入，查询，删除</strong> 时间复杂度都是<strong>o(log n)</strong></li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>通过动手实现一个平衡二叉树，加深对平衡二叉树的了解，其实二年前用C++也实现过，所以这次想尝试用lua实现，发现用lua实现和用c++实现的区别是，在删除和增加结点的的时候，因为c++有指针，所以可以直接这样写 <code>node = new(tree_node)</code>,lua<br>没有就只能<code>parent.left = new(tree_node)</code>，所以递归函数传参需要把父节点的table传递进入，而c++只需要传递父节点成员的指针引用或者二级指针，实现的时候一定要理清逻辑，脑子里想不明白的时候就画图，特别注意别出现环引用。</p><p>一个平衡二叉树包含基本插入，删除，查询三个API,lua的实现我增加了一个range范围查询的API。</p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><p>标准的二叉树定义,左右子结点，结点高度，k,v值，基于k有序。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">new_node</span><span class="hljs-params">(k,v)</span></span><br><span class="hljs-keyword">return</span> &#123;<br>left = <span class="hljs-literal">nil</span>,<br>right = <span class="hljs-literal">nil</span>,<br>depth = <span class="hljs-number">1</span>,<br>k = k,<br>v = v,<br>&#125;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>开胃菜查询，查询是平衡二叉树里面最简单的,根据k值决定是去左边找还是右边找，类似二分查找。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find_node</span><span class="hljs-params">(node,k)</span></span><br><span class="hljs-keyword">if</span> node.k == k <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span> node.v<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> node.k &gt; k <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span> find_node(node.left,k)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span> find_node(node.right,k)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>比例下图👇查找4,<strong>路径</strong>就是root[5]-&gt;left[3]-&gt;right[4]<br><img src="/img/data_struct/alvtreefind.png"></p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>普通的二叉树插入也非常简单，跟查询一样的寻路，找到空的树枝挂上去就行。平衡二叉树就需要操作平衡调整。<br>为什么要做平衡操作，试想一下，普通二叉树我们插入1到10，会一直插入到最右边的结点，就会退化成链表了。</p><p><img src="/img/data_struct/alvtreelist.png"></p><p>此时的二叉树就跟链表差不多，查询，插入，删除基本上就是o(n)的时间复杂度了。<br>我们再看看平衡二叉树。</p><p><img src="/img/data_struct/alvtreeba.png"></p><ul><li><strong>失衡</strong> 所以结点左右子树<strong>高度差绝对值</strong>小于等于一。</li><li><strong>检测失衡</strong> 插入结点经过的路径结点都需要检测。<strong>按照压栈的顺序执行，先入后出</strong>。</li><li><strong>更新树高</strong> 插入结点经过的路径结点都需要更新树高，<strong>检测失衡前要先更新树高，按照压栈的顺序执行，先入后出</strong>。</li></ul><p>插入结点3后，树<strong>失衡</strong>，此时对二叉树进行<strong>左旋调整</strong>，插入结点4，5后又再次<strong>失衡</strong>，再次进行<strong>左旋调整</strong>。<br>这里我提到了<strong>左旋调整</strong>，<strong>右旋调整</strong>，我们需要列出树的<strong>失衡</strong>状态，根据失衡的定义我们可以列出如下<strong>6种失衡4种调整</strong>。</p><p><img src="/img/data_struct/alvtreero.png"></p><p>我们只需要实现<strong>左旋调整</strong>和<strong>右旋调整</strong>，<strong>先左后右</strong>和<strong>先右后左</strong>就是调用左、右调整，只不过是先调整子节点，再调整父节点。</p><p>我们以左旋调整为例，看图。</p><p><img src="/img/data_struct/alvtreeroch.png"></p><p>调整过程我们需要改变3个指针指向。</p><ul><li><strong>父指针</strong> 从指向<strong>自身</strong>改为指向<strong>右子节点</strong>(从指向1改为指向3)</li><li><strong>自身右指针</strong> 从指向<strong>自身右子节点</strong>改为指向<strong>右子节点的左子节点</strong>(从指向3改为指向2)</li><li><strong>右子结点左指针</strong> 从指向<strong>右子节点左子结点</strong>改为指向<strong>自身</strong>(从指向2改为指向1)</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--获取高度</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_depth</span><span class="hljs-params">(node)</span></span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> node.depth<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--更新高度</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update_depth</span><span class="hljs-params">(node)</span></span><br><span class="hljs-keyword">local</span> l_depth = get_depth(node.left)<br><span class="hljs-keyword">local</span> r_depth = get_depth(node.right)<br>node.depth = l_depth &gt; r_depth <span class="hljs-keyword">and</span> l_depth + <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> r_depth + <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--获取平衡值</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_node_balance</span><span class="hljs-params">(node)</span></span><br><span class="hljs-keyword">local</span> l_depth = get_depth(node.left)<br><span class="hljs-keyword">local</span> r_depth = get_depth(node.right)<br><span class="hljs-keyword">return</span> l_depth - r_depth<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--左旋</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ll_rotate</span><span class="hljs-params">(parent,node)</span></span><br><span class="hljs-keyword">local</span> son = node.right<br><span class="hljs-comment">--父指针change</span><br><span class="hljs-keyword">if</span> parent.root <span class="hljs-keyword">then</span><br>parent.root = son<br><span class="hljs-keyword">elseif</span> parent.left == node <span class="hljs-keyword">then</span><br>parent.left = son<br><span class="hljs-keyword">else</span><br>parent.right = son<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> son_l = son.left<br><span class="hljs-comment">--右子结点左指针change</span><br>node.right.left = node<br><span class="hljs-comment">--自身右指针change</span><br>node.right = son_l<br><span class="hljs-comment">--更新结点高度</span><br>update_depth(node)<br>update_depth(son)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--右旋</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rr_rotate</span><span class="hljs-params">(parent,node)</span></span><br><span class="hljs-keyword">local</span> son = node.left<br><span class="hljs-comment">--父指针change</span><br><span class="hljs-keyword">if</span> parent.root <span class="hljs-keyword">then</span><br>parent.root = son<br><span class="hljs-keyword">elseif</span> parent.left == node <span class="hljs-keyword">then</span><br>parent.left = son<br><span class="hljs-keyword">else</span><br>parent.right = son<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> son_r = son.right<br><span class="hljs-comment">--左子结点右指针change</span><br>node.left.right = node<br><span class="hljs-comment">--自身右指针change</span><br>node.left = son_r<br><span class="hljs-comment">--更新结点高度</span><br>update_depth(node)<br>update_depth(son)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--先左后右</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lr_rotate</span><span class="hljs-params">(parent,node)</span></span><br>ll_rotate(node,node.left)<br>rr_rotate(parent,node)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--先右后左</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rl_rotate</span><span class="hljs-params">(parent,node)</span></span><br>rr_rotate(node,node.right)<br>ll_rotate(parent,node)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--左边失衡</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">balance_left</span><span class="hljs-params">(parent,node)</span></span><br><span class="hljs-keyword">local</span> l_balance = get_node_balance(node.left)<br><span class="hljs-keyword">if</span> l_balance &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>rr_rotate(parent,node)<br><span class="hljs-keyword">else</span><br>lr_rotate(parent,node)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--右边失衡</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">balance_right</span><span class="hljs-params">(parent,node)</span></span><br><span class="hljs-keyword">local</span> r_balance = get_node_balance(node.right)<br><span class="hljs-keyword">if</span> r_balance &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>rl_rotate(parent,node)<br><span class="hljs-keyword">else</span><br>ll_rotate(parent,node)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--检测失衡并调整</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">avl_node</span><span class="hljs-params">(parent,node)</span></span><br><span class="hljs-keyword">local</span> balance = get_node_balance(node)<br><span class="hljs-keyword">if</span> balance &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>balance_left(parent,node)<br><span class="hljs-keyword">elseif</span> balance &lt; <span class="hljs-number">-1</span> <span class="hljs-keyword">then</span><br>balance_right(parent,node)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_node</span><span class="hljs-params">(parent,node,k,v)</span></span><br><span class="hljs-keyword">if</span> node.k == k <span class="hljs-keyword">then</span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> node.k &gt; k <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">then</span><br>add_node(node,node.left,k,v)<br><span class="hljs-keyword">else</span><br>node.left = new_node(k,v)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">then</span><br>add_node(node,node.right,k,v)<br><span class="hljs-keyword">else</span><br>node.right = new_node(k,v)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>update_depth(node)<br>avl_node(parent,node)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>完整的插入过程可以分为2个步骤，按照压栈的过程，先入后出。</p><ul><li><strong>进</strong> 进的时候栈会记录<strong>路径</strong>。</li><li><strong>出</strong> 把路过的结点进行<strong>更新树高</strong>和<strong>检测失衡和调整失衡</strong>。</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除结点有4种情况需要考虑🤔</p><ol><li><strong>叶子结点</strong> 没有左右子结点的，直接删除就行。</li><li><strong>仅有左子结点</strong> 让父节点继承。</li><li><strong>仅有右子结点</strong> 让父节点继承。</li><li><strong>左右子结点都有</strong> <strong>中序遍历</strong>遍历的前继或者后继结点代替自己。</li></ol><p><strong>如何找前继或者后继结点</strong><br>如图，我们看下<strong>中序遍历</strong>结点的位置情况。<br><img src="/img/data_struct/alvtreedel.png"></p><ul><li><strong>前继结点位置</strong> <strong>左结点</strong>或者左节点的<strong>最右</strong>结点。</li><li><strong>后继结点位置</strong> <strong>右结点</strong>或者右节点的<strong>最左</strong>结点。</li></ul><p>删除结点的过程中我们不能忘了把路过的结点进行更新<strong>更新树高</strong>和<strong>检测失衡和调整失衡</strong>。<br>删除比较特殊的是删除<strong>左右子结点都有</strong>的结点时，会进行<strong>前继结点位置</strong>或者<strong>后继结点位置</strong>位置的深入，这个路径的结点都需要<strong>更新树高</strong>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del_node</span><span class="hljs-params">(parent,node,k,v)</span></span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span><span class="hljs-params">(p,n,next)</span></span><br><span class="hljs-keyword">if</span> p.root <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">then</span><br>p.root = <span class="hljs-built_in">next</span><br><span class="hljs-keyword">else</span><br>p.root = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">elseif</span> p.left == n <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">then</span><br>p.left = <span class="hljs-built_in">next</span><br><span class="hljs-keyword">else</span><br>p.left = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">then</span><br>p.right = <span class="hljs-built_in">next</span><br><span class="hljs-keyword">else</span><br>p.right = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> res = <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> node.k == k <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node.left <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> node.right <span class="hljs-keyword">then</span><br>del(parent,node)<br><span class="hljs-keyword">elseif</span> <span class="hljs-keyword">not</span> node.left <span class="hljs-keyword">then</span><br>del(parent,node,node.right)<br>node.right = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">elseif</span> <span class="hljs-keyword">not</span> node.right <span class="hljs-keyword">then</span><br>del(parent,node,node.left)<br>node.left = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">else</span><br><span class="hljs-comment">--找node在中序遍历的前继节点或者后继节点</span><br><span class="hljs-comment">--我这里找前继,前继结点是左节点或者左节点的最右节点</span><br><span class="hljs-keyword">local</span> pp_node = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">local</span> pre_node = node.left<br><span class="hljs-keyword">while</span> pre_node.right <span class="hljs-keyword">do</span><br>pp_node = pre_node<br>pre_node = pre_node.right<br><span class="hljs-keyword">end</span><br>del(parent,node,pre_node)<br>pre_node.right = node.right<br>node.right = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">if</span> pp_node <span class="hljs-keyword">then</span><br>pp_node.right = pre_node.left<br>pre_node.left = node.left<br><span class="hljs-keyword">end</span><br><br>node.left = <span class="hljs-literal">nil</span><br><br><span class="hljs-keyword">local</span> uplist = &#123;pre_node&#125;<br><span class="hljs-keyword">local</span> unode = pre_node.left<br><span class="hljs-keyword">while</span> unode <span class="hljs-keyword">do</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(uplist,unode)<br>unode = unode.right<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> i = #uplist,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span> <span class="hljs-keyword">do</span><br>update_depth(uplist[i])<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> node.k &gt; k <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">then</span><br>res = del_node(node,node.left,k,v)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">then</span><br>res = del_node(node,node.right,k,v)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> res <span class="hljs-keyword">then</span><br>update_depth(node)<br>avl_node(parent,node)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><p>范围查询需要注意的是要用中序遍历，保证结果的有序性就行了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find_by_range</span><span class="hljs-params">(node,b_key,e_key,res_list)</span></span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">and</span> b_key &lt; node.k <span class="hljs-keyword">then</span><br>find_by_range(node.left,b_key,e_key,res_list)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> node.k &gt;= b_key <span class="hljs-keyword">and</span> node.k &lt;= e_key <span class="hljs-keyword">then</span><br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(res_list,node.k)<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(res_list,node.v)<br><span class="hljs-keyword">end</span> <br><br><span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">and</span> e_key &gt; node.k <span class="hljs-keyword">then</span><br>find_by_range(node.right,b_key,e_key,res_list)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a><a href="https://github.com/huahua132/lua_test">完整代码</a></h1><p>觉得写得不错，给个星星，非常感谢O(∩_∩)O哈哈~</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链接记录</title>
    <link href="/2023/05/21/think/link/"/>
    <url>/2023/05/21/think/link/</url>
    
    <content type="html"><![CDATA[<p>链接记录</p><p>床长人工智能教程<br><a href="https://captainbed.vip/login/">https://captainbed.vip/login/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>select,poll,epoll 对比</title>
    <link href="/2023/05/14/socket/epoll/"/>
    <url>/2023/05/14/socket/epoll/</url>
    
    <content type="html"><![CDATA[<h1 id="最大链接数"><a href="#最大链接数" class="headerlink" title="最大链接数"></a>最大链接数</h1><ul><li><strong>select</strong> 有上限FD_SETSIZE设置</li><li><strong>poll</strong> 链表实现，没有上限</li><li><strong>epoll</strong> 没有上限</li></ul><h1 id="fd剧增带来的io效率问题"><a href="#fd剧增带来的io效率问题" class="headerlink" title="fd剧增带来的io效率问题"></a>fd剧增带来的io效率问题</h1><ul><li><strong>select</strong> 轮询机制， o(n)复杂度</li><li><strong>poll</strong> 轮询机制，o(n)复杂度</li><li><strong>epoll</strong> 事件通知机制，o(1)复杂度</li></ul><h1 id="消息传递方式"><a href="#消息传递方式" class="headerlink" title="消息传递方式"></a>消息传递方式</h1><ul><li><strong>select</strong> 完整拷贝</li><li><strong>poll</strong> 完整拷贝</li><li><strong>epoll</strong> 通过内核与用户空间共享内存来实现</li></ul><h1 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h1><ul><li><strong>select</strong> LT</li><li><strong>poll</strong> LT</li><li><strong>epoll</strong> LT水平触发，ET边缘触发</li></ul><h1 id="LT"><a href="#LT" class="headerlink" title="LT"></a>LT</h1><ul><li>读缓存区不为空，就会一直触发可读事件</li><li>写缓冲区不满，触发可写事件</li></ul><h1 id="ET"><a href="#ET" class="headerlink" title="ET"></a>ET</h1><ul><li>读缓存区由空转为非空，触发可读事件</li><li>写缓存区由满转为不满，触发可写事件</li></ul>]]></content>
    
    
    <categories>
      
      <category>socket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcp知识整理</title>
    <link href="/2023/05/14/socket/tcp/"/>
    <url>/2023/05/14/socket/tcp/</url>
    
    <content type="html"><![CDATA[<h1 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h1><ul><li><strong>第一次握手</strong> 客户端发送建立链接请求报文SYN携带(SYN &#x3D; 1,seq &#x3D; x)后，进入SYN_SENT状态。</li><li><strong>第二次握手</strong> 服务端接收到SYN报文后回复SYN+ACK报文携带(ACK&#x3D;x+1,SYN&#x3D;1,seq&#x3D;y)，进入SYN_RECV状态。</li><li><strong>第三次握手</strong> 客户端收到SYN+ACK报文后回复ACK报文携带(ACK&#x3D;y+1,SYN&#x3D;1)。</li></ul><h1 id="为什么需要三次握手"><a href="#为什么需要三次握手" class="headerlink" title="为什么需要三次握手"></a>为什么需要三次握手</h1><ol><li><p><strong>确保双方读写都正常</strong>。<br> 第一次确定客户端发送正常，第二次确定服务端发送和接送正常，第三次确定客户端接收正常。</p></li><li><p><strong>同步双方初始序列号</strong>。<br> 序列号可以保证消息的发送是有序的。</p></li></ol><h1 id="四次挥手过程"><a href="#四次挥手过程" class="headerlink" title="四次挥手过程"></a>四次挥手过程</h1><ul><li><strong>第一次挥手</strong> 主动断开方发送FIN报文，进入FIN_WAIT_1状态。</li><li><strong>第二次挥手</strong> 被动断开方接收FIN报文后，回复ACK报文，进入CLOSE_WAIT状态。主动断开方接送ACK报文后进入FIN_WAIT_2状态。</li><li><strong>第三次挥手</strong> 被动断开方发送FIN报文后，进入LASTACK状态。</li><li><strong>第四次挥手</strong> 主动断开方发送ACK报文后进入TIME_WAIT状态，等待2MLS后进入closed阶段，被动端口方接收后进入closed阶段。</li></ul><p>MLS表示报文在网络中最大存活时间，1MLS等于2分钟</p><h1 id="为什么需要四次挥手"><a href="#为什么需要四次挥手" class="headerlink" title="为什么需要四次挥手"></a>为什么需要四次挥手</h1><p>因为tcp是全双工的，双方能同时发送，接收消息。<br>所以客户端第一次挥手发送FIN只能确定客户端没有数据发送了，服务端可能还有数据发送给客户端。所以需要服务器接收到FIN之后回复ACK，等服务端没有数据要发送时，再发送FIN给客户端来表示可以关闭。</p><h1 id="为什么要进入time-wait状态"><a href="#为什么要进入time-wait状态" class="headerlink" title="为什么要进入time_wait状态"></a>为什么要进入time_wait状态</h1><p>为了响应服务端重发FIN报文，回复的ACK报文可能丢失，避免服务端重发FIN报文影响新连接。</p>]]></content>
    
    
    <categories>
      
      <category>socket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络七层模型</title>
    <link href="/2023/05/14/socket/c/"/>
    <url>/2023/05/14/socket/c/</url>
    
    <content type="html"><![CDATA[<ul><li><strong>7层</strong> 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层</li><li><strong>5层</strong> 物理层，数据链路层，网络层，传输层，应用层</li><li><strong>4层</strong> 网络接口层，网络层，传输层，应用层</li></ul><p><strong>物理层</strong><br>    传输介质，网线，光纤<br><strong>数据链路层</strong><br>    保持数据的可靠传输<br><strong>网络层</strong><br>    数据路由，ip地址<br><strong>传输层</strong><br>    tcp，udp协议，数据打包<br><strong>会话层</strong><br>    建立与管理应用程序之间的通信<br><strong>表示层</strong><br>    解决不同系统的兼容问题<br><strong>应用层</strong><br>    http，ftp</p>]]></content>
    
    
    <categories>
      
      <category>socket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis 知识杂谈</title>
    <link href="/2023/05/13/redis/redis/"/>
    <url>/2023/05/13/redis/redis/</url>
    
    <content type="html"><![CDATA[<h1 id="redis有哪些好处？"><a href="#redis有哪些好处？" class="headerlink" title="redis有哪些好处？"></a>redis有哪些好处？</h1><ol><li><p>数据类型丰富，提供了string,list,hash,set,zset五种基础类型，还提供了stream，geo，bitmap扩展类型<br>string<br>数据结构：简单动态字符串<br>list<br>数据结构：双向链表，压缩列表<br>hash<br>压缩列表，哈希表<br>zset<br>压缩列表，跳表<br>set<br>哈希表，整数数组</p></li><li><p>数据可以设置过期时间</p></li><li><p>支持事务</p></li><li><p>支持脚本化运行</p></li><li><p>哈希冲突解决<br> 少量的冲突redis使用链式哈希解决，当链表过长时redis会触发rehash机制，rehash机制会增加现有hash桶的数量，分散entry元素</p></li></ol><ul><li><p><strong>rehash机制</strong><br>  redis有两张全局hash表，hash1,hash2，起初hash2没有分配空间<br>  当触发rehash时：<br>  会给hash2分配更大的空间，重设hash函数，增加hash桶总量，把hash1重新映射到hash2，释放hash1</p></li><li><p><strong>渐进式rehash机制</strong><br>  由于rehash机制非常耗时，会阻塞redis<br>  所以将集中迁移改为分散迁移，当处理一个请求时，就从hash1中的第一个索引位置开始，把位置1的所以entries重新映射到hash2中。</p></li></ul><h1 id="单线程的redis为什么这么快？"><a href="#单线程的redis为什么这么快？" class="headerlink" title=" 单线程的redis为什么这么快？"></a> 单线程的redis为什么这么快？</h1><ol><li>首先redis并不是真正意义上的单线程，比如持久化，异步删除，集群同步，都是用额外的线程完成的</li><li>为什么不用多线程，多线程访问共享资源，需要增加额度的机制，就会带来额外的开销</li><li>redis大部分操作都是在内存中完成，加上采用的高效的数据结构，例如hash表，跳表</li><li>redis采用多路复用机制，使其能够并发处理大量客户端请求</li></ol><h1 id="数据同步：主从库如何实现数据同步？"><a href="#数据同步：主从库如何实现数据同步？" class="headerlink" title="数据同步：主从库如何实现数据同步？"></a>数据同步：主从库如何实现数据同步？</h1><h2 id="redis具有高可用，是什么意思？"><a href="#redis具有高可用，是什么意思？" class="headerlink" title="redis具有高可用，是什么意思？"></a>redis具有高可用，是什么意思？</h2><p>二层意思，一是数据尽量少丢失，二是服务尽量少中断，AOF和RDB保证了一，对于二redis通过增加冗余副本量。</p><h2 id="redis提供了主从库模式，以保证数据副本的一致，主从库采用了"><a href="#redis提供了主从库模式，以保证数据副本的一致，主从库采用了" class="headerlink" title="redis提供了主从库模式，以保证数据副本的一致，主从库采用了"></a>redis提供了主从库模式，以保证数据副本的一致，主从库采用了</h2><p>读写分离的方式。</p><ul><li><strong>读操作：</strong> 主库，从库都可以接送。</li><li><strong>写操作：</strong> 只有主库能接收执行，然后主库同步给从库执行。</li></ul><h2 id="第一次如何同步？"><a href="#第一次如何同步？" class="headerlink" title="第一次如何同步？"></a>第一次如何同步？</h2><p>从库和主库建立连接后，会与主库协商第一次全量同步，主库会进行RDB内存快照和传输RDB内存快照。</p><h2 id="多个副本怎么分担主库全量复制压力？"><a href="#多个副本怎么分担主库全量复制压力？" class="headerlink" title="多个副本怎么分担主库全量复制压力？"></a>多个副本怎么分担主库全量复制压力？</h2><p>采用主-从-从模式</p><h2 id="全量复制完了之后如何同步？"><a href="#全量复制完了之后如何同步？" class="headerlink" title="全量复制完了之后如何同步？"></a>全量复制完了之后如何同步？</h2><p>基于长链接的命令传播</p><h2 id="主从库网络断开怎么办？"><a href="#主从库网络断开怎么办？" class="headerlink" title="主从库网络断开怎么办？"></a>主从库网络断开怎么办？</h2><p>主库会维护一个repl_backlog_buffer环状缓冲区，主库会记录自己写到的位置，从库会记录自己读到的位置，<br>当网络重连后主库会把master_rpl_offset 到 slave_repl_offset之间的命令同步到从库，</p><p>由于是环状的缓存区，当从库的同步速度小于主库的写入，当主库赶上从库就会需要重新进行全量复制。<br>常规的避免办法是增加repl_backlog_buffer缓存区容量。设置repl_backlog_size。</p><h1 id="哨兵机制，主库挂了，如何不间断服务？"><a href="#哨兵机制，主库挂了，如何不间断服务？" class="headerlink" title="哨兵机制，主库挂了，如何不间断服务？"></a>哨兵机制，主库挂了，如何不间断服务？</h1><h2 id="哨兵三大功能-监控，选主，通知"><a href="#哨兵三大功能-监控，选主，通知" class="headerlink" title="哨兵三大功能   监控，选主，通知"></a>哨兵三大功能   监控，选主，通知</h2><ol><li><strong>监控</strong>主库运行状态，并判断主库是否客观下线。</li><li>主库客观下线，<strong>选择新主库</strong>。</li><li>选出新主库，<strong>通知</strong>从库和客户端。</li></ol><h2 id="细节要点"><a href="#细节要点" class="headerlink" title="细节要点"></a>细节要点</h2><ol><li>哨兵的本质是一个redis实例。</li><li>哨兵通过心跳检测，监控主库状态，主库下线分为客观下线和主观下线。</li><li>哨兵监控是可能误判的，所以一般要集群部署，减少误判率。</li><li>选定主库先筛选打分，得分高的会被选为新主库。</li><li><strong>筛选规则：</strong> 从库的网络状况，之前与主库的连接状况，筛选中断标准可以配置。</li><li><strong>打分规则：</strong> 从库的优先级，数据同步状况，id号大小。</li></ol><h2 id="哨兵集群，哨兵挂了，主库还能切换吗？"><a href="#哨兵集群，哨兵挂了，主库还能切换吗？" class="headerlink" title="哨兵集群，哨兵挂了，主库还能切换吗？"></a>哨兵集群，哨兵挂了，主库还能切换吗？</h2><p>哨兵挂的数量少于<strong>quorum</strong>就可以，至少有<strong>2</strong>个哨兵才能执行主从切换。</p><ol><li>基于pub&#x2F;sub机制的哨兵集群组成过程。</li><li>基于INFO命令的从库列表，帮助哨兵与从库建立连接。</li><li>基于哨兵自身的pub&#x2F;sub功能，实现客户端和哨兵之间的事件通知。</li><li>判断主库客观下线需要投票，需要同意票数大于querum数量。</li><li>通过选举投票方式选出哨兵leader，执行主库切换通知。</li><li>要保证所以哨兵实例的配置是一致的，尤其是主观下线的判断值<strong>down-after-millseconds</strong>。</li></ol><h2 id="频道事件："><a href="#频道事件：" class="headerlink" title="频道事件："></a>频道事件：</h2><ul><li><strong>+sdown：</strong> 主观下线</li><li><strong>-sdown：</strong> 退出主观下线</li><li><strong>+odown：</strong> 客观下线</li><li><strong>-odown：</strong> 退出客观下线</li><li><strong>+slave-reconf-sent：</strong> 哨兵发送slaveof命令重新配置从库</li><li><strong>+slave-reconf-inprog：</strong> 从库配置成新主库 同步中</li><li><strong>+slave-reconf-done：</strong> 从库配置成新主库 完成同步</li><li><strong>+switch-mater：</strong> 主库地址发生变化</li></ul><h1 id="数据量增多了，是该加内存还是该加实例？"><a href="#数据量增多了，是该加内存还是该加实例？" class="headerlink" title="数据量增多了，是该加内存还是该加实例？"></a>数据量增多了，是该加内存还是该加实例？</h1><h2 id="当数据量增大时，通常会有两种选择"><a href="#当数据量增大时，通常会有两种选择" class="headerlink" title="当数据量增大时，通常会有两种选择"></a>当数据量增大时，通常会有两种选择</h2><ul><li><strong>纵向扩展：</strong>加内存</li><li><strong>横向扩展：</strong>加实例</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul><li><strong>纵向扩展：</strong><br>  <strong>优点：</strong> 实施简单，直接<br>  <strong>缺点：</strong> RDB时间长，硬件以及成本有上限</li><li><strong>横向扩展：</strong><br>  <strong>优点：</strong> 没有硬件和成本限制<br>  <strong>缺点：</strong> 增加系统了复杂度</li></ul><h2 id="切片集群数据该存哪儿？"><a href="#切片集群数据该存哪儿？" class="headerlink" title="切片集群数据该存哪儿？"></a>切片集群数据该存哪儿？</h2><p>redis cluster官方解决方案采用哈希槽，hash-slot，一个切片集群共有16384个哈希槽。<br>通过CRC16算法计算出一个16bit的值，然后取模16384得到对应哈希槽。<br>redis cluster根据实例数量平均分配哈希槽，也可以通过cluster meet,cluster addslots手动配置搭建。<br>手动配置需要把16384个槽分配完，否则无法工作。</p><h2 id="客户端如何定位数据？"><a href="#客户端如何定位数据？" class="headerlink" title="客户端如何定位数据？"></a>客户端如何定位数据？</h2><p>切片集群会共享各自的哈希槽信息，客户端与实例建立连接时，会把哈希槽的信息发送给客户端。<br>但是在集群新增或者减少实例的时候，redis需要重新分配哈希槽。 还有为了负载均衡，redis需要把哈希槽所有实例重新分配一遍，这就可能带来客户端哈希槽信息与服务器不一致的问题。<br>    这时redis cluster 方案提供了一种重定向机制，客户端给一个实例发送读写操作时，数据槽不在这个实例，需要重定向发送到另一个实例。<br>    重定向地址如何知晓，请求的第一个redis实例会返回错误，加上重定向的实例连接信息。（error） MOVED slotID  ip:port</p><h2 id="ask重定向？"><a href="#ask重定向？" class="headerlink" title="ask重定向？"></a>ask重定向？</h2><p>当哈希槽正在迁移，命令落中正在迁移的槽时，会回复 ASK slotID ip:port</p><h1 id="aof日志，宕机了，如何避免数据丢失？"><a href="#aof日志，宕机了，如何避免数据丢失？" class="headerlink" title="aof日志，宕机了，如何避免数据丢失？"></a>aof日志，宕机了，如何避免数据丢失？</h1><ol><li>aof通过逐一记录命令，恢复时逐一执行命令来保证数据的可靠性。</li><li>aof提供了三种写回策略，<strong>always,everysec,no</strong>。</li><li>aof重写机制，避免日志文件过大，这个过程是fork子进程拷贝父进程内存数据，直接根据数据库里数据的最新状态，生成这些数据的插入命令。</li><li>aof在恢复时，需要重放aof日志命令，这个过程会比较慢，RDB快照恢复会比aof快。</li></ol><h1 id="RDB内存快照，宕机了，redis如何快速恢复？"><a href="#RDB内存快照，宕机了，redis如何快速恢复？" class="headerlink" title="RDB内存快照，宕机了，redis如何快速恢复？"></a>RDB内存快照，宕机了，redis如何快速恢复？</h1><p>redis提供save,和bgsave两个命令来生成RDB快照<br>save在主线程中执行，会导致阻塞<br>bgsave创建一个子进程，避免了主线程的阻塞</p><h2 id="快照时数据还能修改吗？"><a href="#快照时数据还能修改吗？" class="headerlink" title="快照时数据还能修改吗？"></a>快照时数据还能修改吗？</h2><p>快照时，子进程和主进程访问的同一块内存，正常情况下，快照完成前，只能读不能写，但是redis借助了操作系统的写时复制技术，在快照期间，可以执行写命令。</p><h2 id="快照可以每秒执行一次吗"><a href="#快照可以每秒执行一次吗" class="headerlink" title="快照可以每秒执行一次吗?"></a>快照可以每秒执行一次吗?</h2><p>虽然执行快照不会影响主线程，但是会给磁盘带来很大压力，而且快照可能一秒内完成不了。redis上一个bgsave在运行，不能启动第二个bgsave。</p><h2 id="有什么办法既可以利用RDB的快速恢复又可以做到尽量少丢数据呢？"><a href="#有什么办法既可以利用RDB的快速恢复又可以做到尽量少丢数据呢？" class="headerlink" title="有什么办法既可以利用RDB的快速恢复又可以做到尽量少丢数据呢？"></a>有什么办法既可以利用RDB的快速恢复又可以做到尽量少丢数据呢？</h2><p>混合使用AOF日志和RDB快照，这样AOF日志只有记录两次快照之间的命令了</p><h1 id="string类型为什么不好用了？"><a href="#string类型为什么不好用了？" class="headerlink" title="string类型为什么不好用了？"></a>string类型为什么不好用了？</h1><p>string类型在保存本身占用的内存空间不大时，string类型的元数据开销就会占主导地位，这里面包括redis_object，SDS结构，dict_entry结构的内存开销。</p><h2 id="那内存占用是怎么多出来的呢？"><a href="#那内存占用是怎么多出来的呢？" class="headerlink" title="那内存占用是怎么多出来的呢？"></a>那内存占用是怎么多出来的呢？</h2><p>redis使用一个全局哈希表保存所以键值对，每一项都是dict_entry结构体，用来指向一个键值对，分别指向key,value,next，三个指针一共24字节，由于jemalloc的内存分配机制，会实际分配最接近2的幂次数，所以24字节，实际分配32字节。<br>然后还有分配一个key和value的redis_object对象，一个redis_object对象至少占用16字节，2个就是32，所以使用一个string类型保存数据至少要64字节。</p><p><img src="/img/redis/redis_object.jpg"><br><img src="/img/redis/keys.webp"></p><h2 id="动态字符串的编码方式有3种："><a href="#动态字符串的编码方式有3种：" class="headerlink" title="动态字符串的编码方式有3种："></a>动态字符串的编码方式有3种：</h2><ul><li><strong>int编码：</strong> ptr指针位直接用于保存整型</li><li><strong>embstr编码：</strong> 当string内容小于等于44字节时候，redis_object和sds数据使用一块连续的内存，也就是整个数据块小于等于64字节。</li><li><strong>row编码：</strong> redis_object和SDS内存地址可能不连续。</li></ul><p><img src="/img/redis/code.webp"></p><h2 id="那用什么数据可以节省内存？"><a href="#那用什么数据可以节省内存？" class="headerlink" title="那用什么数据可以节省内存？"></a>那用什么数据可以节省内存？</h2><p>redis的hash，list，zset，set在元素小于配置限制内时会使用intset整数数组，ziplist压缩列表来存储数据。</p><ul><li><strong>hash：</strong> zliblist，hash</li><li><strong>list：</strong> zliblist，双向链表</li><li><strong>zset：</strong> zliblist，跳表</li><li><strong>set：</strong> intset，hash</li></ul><h2 id="压缩列表的构成"><a href="#压缩列表的构成" class="headerlink" title="压缩列表的构成"></a>压缩列表的构成</h2><p>表头有zlibytes，zltail，zllen，分别表示列表长度，列表尾的偏移量，以及列表的entry个数，压缩列表之所以可以节省内存，是因为它是用一系列连续的entry保存数据。</p><h2 id="entry结构"><a href="#entry结构" class="headerlink" title="entry结构"></a>entry结构</h2><ul><li><strong>prev_len：</strong> 表示前一个entry的长度，1或5字节</li><li><strong>len：</strong> 表示自身长度，4字节</li><li><strong>encoding：</strong> 1字节</li><li><strong>content：</strong> 保存实际数据</li></ul><p>如果实际数据是int类型8字节，总共是1+4+1+8&#x3D;14字节往上适配是16字节。<br>这样新增一个数据只需要16字节，少了dict_entry和2个redis_object的创建，比使用string类型少了48字节。</p><h2 id="inset结构"><a href="#inset结构" class="headerlink" title="inset结构"></a>inset结构</h2><pre><code class="hljs">uint32_t encoding;uint_32_t length;int8_t contents[];</code></pre><ol><li>inset在元素是整型结果的时候使用。</li><li>inset会根据encoding编码调整contents类型，当插入的元素字节长度大于之前所以元素的长度时会进行升级，调整contents的元素内存占用宽度，inset不会进行降级。</li><li>inset插入删除时间复杂度为o(n)，查找使用2分查找时间复杂度为o(log n)，查询长度为o(1)。</li></ol><p>相关配置：<br><strong>list:</strong> list-max-ziplist-size   -2表示8kb，最多8kb<br><strong>set:</strong> set-max-intset-entries   表示512个元素，最多512元素<br><strong>zset:</strong> zset-max-ziplist-size,zset-max-ziplist-value<br><strong>hash:</strong> hash-max-ziplist-size,hash-max-ziplist-value<br><strong>zset和hash，</strong> size和value 分别表示最多size个元素，值字节长度最大多少。</p><p>所以结构升级后不可降级。</p><h1 id="GEO是什么？"><a href="#GEO是什么？" class="headerlink" title="GEO是什么？"></a>GEO是什么？</h1><p>扩展类型之一，广泛用于LBS服务中，可以记录经纬度的地理位置信息，GEO是基于zset实现的。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>geohash编码，基本原理是二分区间，区间编码</p><p>假如有一组经纬度为，经度100，纬度30。<br>经度范围是[180,-180]，纬度范围是[90,-90]。<br>geohash会分别把经度纬度编码成N位的二进制。<br>假如我们只编码两位经度为100。<br>设范围[0,-180]为0，范围[0,180]为1<br>此时编码为：1<br>然后再设[0,90]为0，[90,180]为1<br>此时编码为：11<br>根据此编码规则我们得知纬度30的编码为：10<br>然后geohash会以经度为奇纬度为偶的方式逐位交叉编码，得到1110，<br>然后把1110当做score存入zset。<br><img src="/img/redis/geo.webp"></p><p>不过，有点编码值相近实际距离却很远，为了避免查询不准确的问题，我们可以同时查询给定经纬度的4个或8个方格。</p><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><ul><li><strong>geoadd</strong> key 经度，纬度，members</li><li><strong>georadius</strong> key 经度，纬度，范围 其他参数</li></ul><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p>三大需求：<br>    消息保序<br>    重复消息处理<br>    消息可靠性保证</p><p>list：<br>    优点：简单易懂<br>    缺点：消息保序和消息可靠性需要自己实现策略保证</p><p>stream:<br>    优点：自动生成id，提供消费组形势读取数据，满足消息队列三大需求</p><h1 id="如何在redis中保存时间序列数据？"><a href="#如何在redis中保存时间序列数据？" class="headerlink" title="如何在redis中保存时间序列数据？"></a>如何在redis中保存时间序列数据？</h1><h2 id="使用场景，比如服务器每一秒的在线人数，各个游戏的在玩人数。查询需求"><a href="#使用场景，比如服务器每一秒的在线人数，各个游戏的在玩人数。查询需求" class="headerlink" title="使用场景，比如服务器每一秒的在线人数，各个游戏的在玩人数。查询需求"></a>使用场景，比如服务器每一秒的在线人数，各个游戏的在玩人数。<br>查询需求</h2><ol><li>1点钟的在线人数。 get单点查询。</li><li>1点到2点的最大在线人数，范围查询加sort排序。</li><li>1点到2点平均在线人数，聚合计算。<br>4 .1点到2点玩A游戏的人数比玩b游戏的人数的时间段多的百分比。</li></ol><h2 id="二种方案"><a href="#二种方案" class="headerlink" title="二种方案"></a>二种方案</h2><ol><li>使用hash+zset，可以满足1，2，3，4，但是3，4需要客户端请求拿到所以数据再聚合计算，数据传输开销大。</li><li>使用扩展类型RedisTimeSeries，专门为存取时间序列数据而设计的，可以满足2，3，避免了大量数据传输，不过底层用链表实现，范围查询的复杂度为o(n)。</li></ol><h2 id="方案优缺点"><a href="#方案优缺点" class="headerlink" title="方案优缺点"></a>方案优缺点</h2><ol><li>使用hash+zset<br> <strong>优点：</strong> 支持单点查询，范围查询的高效支持。<br> <strong>缺点：</strong> 聚合计算需要拿出来处理，网络数据传输量大。</li><li>使用扩展类型RedisTimeSeries<br> <strong>优点：</strong> 内部聚合计算，占用内存较低。<br> <strong>缺点：</strong> 仅仅支持最新数据的单点查询，范围查询时间复杂度为o(n)。</li></ol><h2 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h2><p>如果有全量的聚合计算且数据量较大优先使用redisTimeseries，因为全量的化，用hash，zset的时间复杂度也是o(n)</p><h1 id="有一亿个keys要统计，应该用哪种集合？"><a href="#有一亿个keys要统计，应该用哪种集合？" class="headerlink" title="有一亿个keys要统计，应该用哪种集合？"></a>有一亿个keys要统计，应该用哪种集合？</h1><ol><li>bitmap适合于二值状态统计，比如签到，登录统计，对比set,hash,zset,做聚合统计的效率会快，bitmap是o(1)是时间复杂度，其他类型至少都要o(N)。</li><li>hyperloglog适用于那种不需要非常精确的统计，比如网站的访问量，优势是占用内存低，一个key固定只需要12k，精准率81%，统计成员总数2的64次方。<br><img src="/img/redis/set.webp"></li></ol><h1 id="redis单线程处理io瓶颈主要包括2个方面？"><a href="#redis单线程处理io瓶颈主要包括2个方面？" class="headerlink" title="redis单线程处理io瓶颈主要包括2个方面？"></a>redis单线程处理io瓶颈主要包括2个方面？</h1><ol><li><p>任意一个请求在server一旦发送耗时，都会影响整个server的性能，也就是说后面的请求都要等这个耗时请求处理完成，自己才能处理到<br> a、操作bigkey<br> b、使用复杂度过高的命令，当N基数很大时，非常耗时<br> c、大量key过期<br> d、淘汰策略，当内存达到设置上限后<br> e、AOF写盘开始always策略，写盘速度比写内存速度低太多<br> f、主从全量同步，fork生成快照完成之前，redis一直不可写</p></li><li><p>并发量非常大时，单线程读写客户端io数据存在性能瓶颈，虽然有多路复用，但是读写客户端数据依旧是同步io，只能单线程依次读取写入，无法利用多核。</p></li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li><p><strong>针对问题1</strong> 人为规避，redis4.0推出了lazy-free异步释放内存</p></li><li><p><strong>针对问题2</strong> redis6.0推出多线程，并发场景下可以利用多核处理客户端io读写</p></li></ul><h1 id="异步机制：如何避免单线程模型的阻塞？"><a href="#异步机制：如何避免单线程模型的阻塞？" class="headerlink" title="异步机制：如何避免单线程模型的阻塞？"></a>异步机制：如何避免单线程模型的阻塞？</h1><h2 id="redis实例运行时的四大类交互对象客户端，磁盘，主从库实例，切片集群实例基于四大类交互对象，梳理了会导致redis性能受损的五大阻塞点："><a href="#redis实例运行时的四大类交互对象客户端，磁盘，主从库实例，切片集群实例基于四大类交互对象，梳理了会导致redis性能受损的五大阻塞点：" class="headerlink" title="redis实例运行时的四大类交互对象客户端，磁盘，主从库实例，切片集群实例基于四大类交互对象，梳理了会导致redis性能受损的五大阻塞点："></a>redis实例运行时的四大类交互对象客户端，磁盘，主从库实例，切片集群实例<br>基于四大类交互对象，梳理了会导致redis性能受损的五大阻塞点：</h2><ul><li>集合全量查询</li><li>聚合操作</li><li>bigkey删除</li><li>清空数据库</li><li>AOF日志同步写</li><li>从库加载RDB文件</li></ul><h2 id="阻塞性能受损原因："><a href="#阻塞性能受损原因：" class="headerlink" title="阻塞性能受损原因："></a>阻塞性能受损原因：</h2><ul><li>集合全量查询：操作时间复杂度为o(n)</li><li>聚合操作：操作时间复杂度&gt;&#x3D;o(n)</li><li>bigkey删除：虽然删除key看起来的只是简单的释放内存，不过操作还需要把内存插入到空闲列表进行管理和再分配</li><li>清空数据库：跟bigkey删除性质一样</li><li>AOF日志同步写：磁盘读写速度有目共睹</li><li>从库加载RDB文件：涉及到读文件，而且数据量大</li></ul><h2 id="可以异步优化的："><a href="#可以异步优化的：" class="headerlink" title="可以异步优化的："></a>可以异步优化的：</h2><ul><li>bigkey删除，清空数据库：开启lazyfree-lazy相关配置</li><li>AOF日志同步写：apendfsync配置项由always改为everysec或者no</li></ul><h2 id="不能异步优化的："><a href="#不能异步优化的：" class="headerlink" title="不能异步优化的："></a>不能异步优化的：</h2><ul><li>集合全量查询，聚合操作，从库加载RDB文件</li></ul><p>可以异步的是不在关键路径上的操作，比如内存释放啊，写盘等等</p><h2 id="不能异步的怎么优化："><a href="#不能异步的怎么优化：" class="headerlink" title="不能异步的怎么优化："></a>不能异步的怎么优化：</h2><ul><li>集合全量查询，聚合操作：客户端分批读取数据，再聚合计算</li><li>从库加载RDB文件：控制主库的数据总量</li></ul><h2 id="相关配置："><a href="#相关配置：" class="headerlink" title="相关配置："></a>相关配置：</h2><pre><code class="hljs">lazyfree-lazy    lazy-free-lazy-expire：key在过期时异步释放内存    lazy-free-lazy-eviction：内存达到maxmemory并设置了淘汰策略是尝试异步释放内存    lazy-free-lazy-server-del：执行rename/move等命令或需要覆盖一个key时，删除旧key尝试异步释放内存    replica-lazy-flush：主从全量同步时，从库清空数据库时异步释放内存</code></pre><h2 id="相关命令："><a href="#相关命令：" class="headerlink" title="相关命令："></a>相关命令：</h2><p>unlink 删除key 异步释放内存<br>flushall aysnc   异步清除</p><h1 id="如何应对redis变慢"><a href="#如何应对redis变慢" class="headerlink" title="如何应对redis变慢?"></a>如何应对redis变慢?</h1><h2 id="怎么判断redis变慢？"><a href="#怎么判断redis变慢？" class="headerlink" title="怎么判断redis变慢？"></a>怎么判断redis变慢？</h2><ol><li><p>查看redis运行时响应延迟： redis-cli –latency -h host -p port<br>如果延迟达到一秒或一秒以上，基本可以认定redis变慢了。</p></li><li><p>当前环境的基线性能：redis-cli –intrinsic-latency  120<br>如果运行时响应延迟是基线性能的2倍以上，就可以认定redis变慢了。</p></li></ol><h2 id="如何解决redis变慢"><a href="#如何解决redis变慢" class="headerlink" title="如何解决redis变慢?"></a>如何解决redis变慢?</h2><p><img src="/img/redis/frame.webp"></p><p>redis自身的操作特性，操作系统，文件系统，它们是影响redis性能的三大要素。</p><p><strong>一：自身的操作特性</strong></p><ol><li><p>慢查询命令<br> <strong>原因：</strong> sunion,sort,smembers操作复杂度分别是O(N + M*log(M))和O(N)，时间复杂度过高。<br> <strong>定位方式：</strong> redis日志或者latency monitor工具。<br> <strong>解决办法：</strong> 用其他命令代替，比如sscan，排序，交集，并集可以放在客户端做。</p></li><li><p>KEYS命令<br> <strong>原因：</strong> 遍历所以keys，比如redis有1百万个keys，就会遍历1百万次，时间复杂度为O(N。<br> <strong>解决办法：</strong> 不用，或者直接禁用。</p></li><li><p>过期key操作<br> <strong>删除机制：</strong> </p><ol><li>ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP &#x3D; 20默认配置，100毫秒删除20个过期key，1秒删除200个，</li><li>如果超过25%的key过期了，则重复删除的过程，直到过期key的比例降至25%以下。<br> <strong>原因：</strong> 过期key的删除是主线程在执行，触发机制2可能存在影响。<br> <strong>解决办法：</strong> 避免大量key同时设置相同的过期时间，比如在固定过期时间后面加一个小范围的随机时间。</li></ol></li></ol><p><strong>二：文件系统：AOF</strong></p><p>always同步写盘，每次都会等待写完磁盘。<br>everysec，每秒fork一个子线程来完成写磁盘，不过上一次fork的写盘任务没有完成，那么就会阻塞，特别是aof重写的时候，磁盘io压力较大，可能会造成阻塞。</p><p><strong>相关配置：</strong><br>    appendfsync<br>    no-appendfsync-on-rewrite</p><p><strong>三：操作系统：swap</strong><br>    当系统内存不够的时候，系统会用磁盘模拟内存，window叫虚拟内存，可以想象磁盘当内存用，当然性能会下降。<br>    查看方式：cd &#x2F;proc&#x2F;进程号<br>                    cat smaps | egrep ‘^(Swap|Size)’</p><p><strong>四：内存大页</strong><br>    内存大页机制（Transparent Huge Page THP）<br>    linux内核从2.6.38开始支持大页机制，该机制支持2M大小的内存页分配，常规的只有4kb的粒度来执行的。<br>    RDB内存快照写时复制机制，当内存块数据需要修改时，会将这些数据拷贝一份，然后进行修改，这时候大页机制可能会影响到性能了。<br>    如何关闭：<br>         cat &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled<br>        如果结果是always表示是开启的，如果是never表示禁止了。<br>生产中不建议对Redis的实例运行的机器开启大页<br>        关闭命令：<br>        echo never &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled</p><h1 id="删除数据后，为什么内存占用率还是很高？"><a href="#删除数据后，为什么内存占用率还是很高？" class="headerlink" title="删除数据后，为什么内存占用率还是很高？"></a>删除数据后，为什么内存占用率还是很高？</h1><h2 id="明明删除了数据，但是redis占用内存没有降下来？"><a href="#明明删除了数据，但是redis占用内存没有降下来？" class="headerlink" title="明明删除了数据，但是redis占用内存没有降下来？"></a>明明删除了数据，但是redis占用内存没有降下来？</h2><p>这是应该redis释放的内存空间被内存分配管理器管理，并不会立即返回给操作系统。<br>风险点：删除数据，如果删除的是连续空间，那么这个连续空间可以继续用来存储数据;如果不是连续空间，仍然是属于操作系统分配给redis的物理内存，但无法用来存储数据。</p><h2 id="内存碎片是什么？"><a href="#内存碎片是什么？" class="headerlink" title="内存碎片是什么？"></a>内存碎片是什么？</h2><p>应用申请的内存是连续的一块N大小的内存空间，不满足N大小的内存块就是内存碎片，无法利用。</p><h2 id="内存碎片的形成原因"><a href="#内存碎片的形成原因" class="headerlink" title="内存碎片的形成原因"></a>内存碎片的形成原因</h2><ol><li><strong>内因：</strong> 内存分配器分配机制。</li><li><strong>外因：</strong> 键值对大小不一样和删除操作。</li></ol><h2 id="如何判断是否有内存碎片？"><a href="#如何判断是否有内存碎片？" class="headerlink" title="如何判断是否有内存碎片？"></a>如何判断是否有内存碎片？</h2><pre><code class="hljs">命令： INFO memorymem_fragmentation_ratio 表示内存碎片率，rss/use_memoryuse_memory_rss                实际分配内存               use_memory                      实际使用内存</code></pre><h2 id="合理范围"><a href="#合理范围" class="headerlink" title="合理范围"></a>合理范围</h2><pre><code class="hljs">ratio在1到1.5之间</code></pre><h2 id="如何清理内存碎片？"><a href="#如何清理内存碎片？" class="headerlink" title="如何清理内存碎片？"></a>如何清理内存碎片？</h2><pre><code class="hljs">重启redisredis自动清理机制：搬家让位，合并空间不过碎片清理是有代价的</code></pre><h2 id="相关配置：-1"><a href="#相关配置：-1" class="headerlink" title="相关配置："></a>相关配置：</h2><pre><code class="hljs">activedefrag    开关activedefrag-ignore-bytes 100mb    表示内存碎片达到100mb，开始清理activedefrag-threshold-lower 10   表示内存碎片空间占redis总分配空间的10%，开始清理activedefrag-cycle-min 25    表示自动清理过程所用cpu时间比例不低于25%activedefrag-cycle-max 75   表示自动清理过程所用cpu时间比例不高于75%</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后，我再给你提供一个小贴士：内存碎片自动清理涉及内存拷贝，这对 Redis 而言，是个潜在的风险。如果你在实践过程中遇到 Redis 性能变慢，记得通过日志看下是否正在进行碎片清理。如果 Redis 的确正在清理碎片，那么，我建议你调小 active-defrag-cycle-max 的值，以减轻对正常请求处理的影响。</p><h1 id="缓冲区，一个可以引发惨案的地方"><a href="#缓冲区，一个可以引发惨案的地方" class="headerlink" title="缓冲区，一个可以引发惨案的地方"></a>缓冲区，一个可以引发惨案的地方</h1><h2 id="缓冲区主要有两个应用场景："><a href="#缓冲区主要有两个应用场景：" class="headerlink" title="缓冲区主要有两个应用场景："></a>缓冲区主要有两个应用场景：</h2><ol><li>在客户端与服务端进行通信时，用来存在客户端和命令，和服务端返回给客户端的数据。</li><li>在主从同步进行时，用来存放主节点接收的写命令和数据。</li></ol><h2 id="风险："><a href="#风险：" class="headerlink" title="风险："></a>风险：</h2><p>由于缓冲区写入速度大于读出速度，引发缓冲区溢出，造成数据丢失。<br>缓冲区过大，耗尽机器内存，导致redis实例崩溃。</p><p>客户端输入，输出缓冲区<br><img src="/img/redis/cache.webp"></p><h2 id="如何应对输入缓存区溢出："><a href="#如何应对输入缓存区溢出：" class="headerlink" title="如何应对输入缓存区溢出："></a>如何应对输入缓存区溢出：</h2><ul><li><strong>如何检测：</strong> client list命令查看，qbuf(已使用大小)，qbuf-free(未使用大小)，通常qbuf很大，qbuf-free很小，就要注意了。</li><li><strong>应对方法：</strong></li></ul><pre><code class="hljs">1. 调大缓存区，没有配置，代码写死1G。2. 从数据命令的发送和处理入手，避免写入bigkey，避免redis主线程阻塞。</code></pre><h2 id="如何应对输出缓存区溢出："><a href="#如何应对输出缓存区溢出：" class="headerlink" title="如何应对输出缓存区溢出："></a>如何应对输出缓存区溢出：</h2><p><strong>常见溢出场景：</strong><br>        返回bigkey的执行结果。<br>        monitor命令。<br>        缓冲区大小设置不合理。</p><h2 id="如何设置输出缓存区大小："><a href="#如何设置输出缓存区大小：" class="headerlink" title="如何设置输出缓存区大小："></a>如何设置输出缓存区大小：</h2><p>output-buffer-limit配置<br>普通客户端：output-buffer-limit normal 0 0 0   –0表示不做限制<br>订阅客户端：output-buffer-limit pubsub 8mb 2mb 60  –8mb表示总量限制，2mb和60表示，60秒内不超过2mb的缓冲器占用，超过就是与该客户端断开连接。</p><h1 id="redis为什么适合做缓存"><a href="#redis为什么适合做缓存" class="headerlink" title="redis为什么适合做缓存"></a>redis为什么适合做缓存</h1><p>在分层系统中，数据暂存与快速子系统有助于加速访问，缓存容量有限，缓存写满时需要淘汰机制，而redis天然满足这两个特性，所以非常适合做缓存。</p><p>redis做缓存时通常有两种模式：</p><ol><li>只读缓存：<br> 数据有修改会直接改数据库，改完删除缓存，下次有读取请求会先从数据库读出数据，然后写入redis缓存，之后的读取命令都会命中缓存。<br> 好处，可以保证数据库的数据是最新的，适用与读多写少或者对数据安全性要求较高的业务。</li><li>读写缓存：<br> 数据有修改先改缓存，再改数据库，有两种策略，同步只写，和异步写回。<br> 同步直写：<br>     优点：可以保证数据安全性。<br>     缺点：降低性能。<br> 异步写回：<br>     优点：提高业务响应速度。<br>     缺点：有数据丢失风险。</li></ol><h1 id="缓存满了，怎么办"><a href="#缓存满了，怎么办" class="headerlink" title="缓存满了，怎么办"></a>缓存满了，怎么办</h1><p>缓存应该设置多大，8，2定律，也就是将缓存区的容量设置为总数据量的20%，能拦截80%的访问量。</p><p>redis的缓存淘汰策略：<br>redis总共有8种缓存淘汰策略：<br>按机制可以分为5大类：<br>*<strong>不淘汰机制：</strong> noeviction<br>    <strong>随机淘汰机制：</strong> allkeys-random，volatile-random<br>    <strong>最快过期机制：</strong> volatile-ttl<br>    <strong>最冷淘汰机制：</strong> allkeys-lru,volatile-lru<br>    <strong>最少访问淘汰机制：</strong> allkeys-lfu，volatile-lfu</p><h1 id="常见缓存异常场景"><a href="#常见缓存异常场景" class="headerlink" title="常见缓存异常场景"></a>常见缓存异常场景</h1><p>常见4个异常场景：<strong>数据不一致，缓存雪崩，缓存穿透，缓存击穿</strong></p><p>数据缓存：读写缓存，只读缓存</p><ul><li><p><strong>读写缓存：</strong><br>  <strong>同步策略：</strong> 异步写库，同步直写<br>  <strong>优点：</strong> 异步写库，可以提升系统的吞吐量，同步直写，可以保证数据一致性。<br>  <strong>缺点：</strong> 异步写库，可能出现数据丢失，同步直写，会降低系统吞吐量。</p></li><li><p><strong>只读缓存：</strong><br>  <strong>策略顺序：</strong> 先删库，再删缓存。 先删缓存后删库。<br>  <strong>问题：</strong> 脏数据。<br><img src="/img/redis/cache1.webp"></p></li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><strong>原因：</strong> 大量热点key同时过期，导致大量请求落到数据库。<br><strong>解决办法：</strong></p><ol><li>在设置过期时间时增加随机过期时间。</li><li>服务降级。</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><strong>原因：</strong> 某个热点数据，无法在缓存中处理，导致压力全部落到数据库。<br><strong>解决办法：</strong> 热点数据不设置过期时间。</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><strong>原因：</strong> 数据不存在。<br><strong>解决办法：</strong></p><ol><li>布隆过滤器。</li><li>设置代表空值的缓存信息。</li></ol><p><img src="/img/redis/cache2.webp"></p><h1 id="事务功能，ADIC能保证吗？"><a href="#事务功能，ADIC能保证吗？" class="headerlink" title="事务功能，ADIC能保证吗？"></a>事务功能，ADIC能保证吗？</h1><ul><li><p><strong>原子性(Atomicity)</strong><br>概念：一系列操作要不都成功，要么都失败。<br>redis并没有提供回滚操作，不能保证原子性。</p></li><li><p><strong>一致性(Consistency)</strong><br>概念：数据库中的数据在执行前后是一致的。<br>可以保证，错误的命令不会执行。</p></li><li><p><strong>隔离性(lsolation)</strong><br>概念：事务执行期间，其他操作无法取到执行事务访问的数据。<br>可以保证，入队有watch命令监控保证，执行由单线程天然保证。</p></li><li><p><strong>持久性(Durability)</strong><br>持久化数据。<br>不能保证，不管是开启aof还是RDB，都存在数据丢失的可能。</p></li></ul><p><img src="/img/redis/ADIC.webp"></p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>skynet c层的整体架构</title>
    <link href="/2023/05/13/skynet_frame/frame/"/>
    <url>/2023/05/13/skynet_frame/frame/</url>
    
    <content type="html"><![CDATA[<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img src="/img/skynet_frame/frame.png"><br>上图是skynet框架的核心的架构图，看完整体我们再去细看内部实现细节，架构图就像一张完整的地图，我们需要由面到点深入到图中，才能真正的了解吃透skynet，使用中才知道要注意哪些细节。<br>现实中了解地图中的一个地方自然是实地去走一走。了解代码框架的话当然是结合源码和文档(skynet github 上的wiki文档就写的非常不错)。<br>源码不止看了一遍，所以基本上都是n探，探多了就清楚自己哪些地方很熟哪些还不熟，哪些是重点，哪些使用中需要注意。</p><h1 id="n探main"><a href="#n探main" class="headerlink" title="n探main"></a>n探main</h1><p>启动skynet必须携带一个config配置文件，配置项的详细介绍可以看<a href="https://github.com/cloudwu/skynet/wiki/Config#%E5%90%8E%E5%8F%B0%E6%A8%A1%E5%BC%8Fdaemon-mode">skynet wiki</a>，那里非常详细。<br>我简单介绍一下比较常用的配置项：</p><ul><li><strong>thread</strong> 启动多少个工作线程。通常不要将它配置超过你实际拥有的 CPU 核心数。<strong>实际开发中可以根据业务流量把控</strong></li><li><strong>bootstrap</strong> 启动的第一个服务以及其启动参数。默认配置为 snlua bootstrap ，即启动一个名为 bootstrap 的 lua 服务。通常指的是 service&#x2F;bootstrap.lua 这段代码。<strong>基本上用默认的就行</strong></li><li><strong>harbor</strong> 节点id，<a href="https://github.com/cloudwu/skynet/wiki/Cluster#cluster-%E5%92%8C-snax-service">skynet cluster(master&#x2F;slave)</a>模式使用,云风大佬不推荐使用。所以一般直接配置为0单节点模式。如果需要RPC调用，可以考虑 cluster mode模式。可以读一读<a href="http://blog.codingnow.com/2017/03/skynet_cluster.html">云风设计心路历程。</a></li><li><strong>daemon</strong> 配置 daemon &#x3D; “.&#x2F;skynet.pid” 可以以后台模式启动 skynet 。注意，同时请配置 logger 项输出 log 。<strong>后台运行</strong></li><li><strong>logger</strong> 日志文件目录。</li><li><strong>logservice</strong> 日志服务,通常直接用skynet自带的logger服务，不提供日志切割，可以自己配置linux上的<strong>logrotate</strong>实现日志切割。</li><li><strong>profile</strong> 是否统计每个服务使用cpu时间。在<a href="https://github.com/cloudwu/skynet/wiki/DebugConsole">debugconsole</a>中可以查看。</li><li><strong>preload</strong> 前置加载lua文件。<strong>通常用来加载自定义的全局工具函数</strong></li><li><strong>lualoader</strong> 用哪一段 lua 代码加载 lua 服务。通常配置为 lualib&#x2F;loader.lua。</li><li><strong>start</strong> 这是 bootstrap 最后一个环节将启动的 lua 服务，也就是你定制的 skynet 节点的主程序。默认为 main ，即启动 main.lua 这个脚本。这个 lua 服务的路径由下面的 luaservice 指定。</li><li><strong>cpath</strong> c服务模块查找加载路径。</li><li><strong>luaservice</strong> lua服务查找加载路径。</li><li><strong>lua_cpath</strong> 将添加到 package.cpath 中的路径，供 require 调用。</li><li><strong>lua_path</strong>  将添加到 package.path 中的路径，供 require 调用。</li></ul><p>读完配置之后main函数就根据配置项做一些初始化的工作。</p><ul><li>注册系统信号HUP（接收后会发送system消息给logger服务，logger接送后会重新打开日志文件，可用于日志切割。）触发信号(kill -HUP 进程号)<strong>单发</strong>，或者（pkill -HUP -f skynet.(配置文件)<strong>单发</strong>） 或者<strong>群发</strong>(pkill -HUP skynet)</li><li>daemon守护进程。(检测skynet.pid进程号是否系统正在运行，在运行启动不了)</li><li>初始化harbor handle mq module timer socket</li><li>启动logger日志服务。</li><li>启动lua bootstrap服务。</li><li>启动 monitor timer socket worker线程。</li></ul><p>重点讲一下worker线程初始化的配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> weight[] = &#123;<br><span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br><span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>,<br><span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, &#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">worker_parm</span> <span class="hljs-title">wp</span>[<span class="hljs-title">thread</span>];</span><br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;thread;i++) &#123;<br>wp[i].m = m;<br>wp[i].id = i;<br><span class="hljs-keyword">if</span> (i &lt; <span class="hljs-keyword">sizeof</span>(weight)/<span class="hljs-keyword">sizeof</span>(weight[<span class="hljs-number">0</span>])) &#123;<br>wp[i].weight= weight[i];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>wp[i].weight = <span class="hljs-number">0</span>;<br>&#125;<br>create_thread(&amp;pid[i+<span class="hljs-number">3</span>], thread_worker, &amp;wp[i]);<br>&#125;<br><br><span class="hljs-comment">//skynet_context_message_dispatch 部分代码</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span> &amp;&amp; weight &gt;= <span class="hljs-number">0</span>) &#123;<br>n = skynet_mq_length(q);<br>n &gt;&gt;= weight;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个启动的worker线程都会绑定一个weight值。<br>云风写死了32个weight的配置。<br>在<code>skynet_context_message_dispatch</code>函数中，也就是worker线程从全局队列中弹出ctx mq时，会用weight值决定它本次处理的消息数量。<br>如上代码，n为待处理消息数量,weight&gt;&#x3D;0时，n等于n&gt;&gt;weight，也就是说，根据weight适配的处理规则如下：</p><ol><li>-1 1</li><li>0 n</li><li>1 n的2分之1</li><li>2 n的4分之1</li><li>3 n的8分之1</li></ol><p>云风大佬这样设计是为了防止出现服务饿死的情况，在机器cpu很多的情况下也能充分利用多核优势，快速处理消息，减少cpu切换调度。</p><h1 id="n探skynet-module"><a href="#n探skynet-module" class="headerlink" title="n探skynet_module"></a>n探skynet_module</h1><p>module的源码总共210行，非常简单易懂，module的的任务就是<strong>查找、加载、缓存、调用</strong>模块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_module</span> &#123;</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> * name;         <span class="hljs-comment">//名称</span><br><span class="hljs-type">void</span> * module;   <span class="hljs-comment">//动态库</span><br>skynet_dl_create create;   <span class="hljs-comment">//create接口函数</span><br>skynet_dl_init init;   <span class="hljs-comment">//init接口函数</span><br>skynet_dl_release release; <span class="hljs-comment">//release接口函数</span><br>skynet_dl_signal signal;   <span class="hljs-comment">//signal接口函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在创建skynet_context的时候通过<code>skynet_module_query(const char* name)</code>函数绑定一个模块，该函数会在<code>skynet_module_init(const char *path)</code>传入的path路径中<strong>查找</strong> <strong>(name).so</strong>动态库文件并且<strong>加载</strong>再绑定<strong>create,init,release,signal</strong>接口函数。然后<strong>缓存</strong>到modules结构中,以便下次使用不需要再加载动态库，提高速度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_MODULE_TYPE 32</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">modules</span> &#123;</span><br><span class="hljs-type">int</span> count;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> * path;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_module</span> <span class="hljs-title">m</span>[<span class="hljs-title">MAX_MODULE_TYPE</span>];</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">modules</span> * <span class="hljs-title">M</span> =</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>可以发现，云风写死了只能加载32个模块服务动态库。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * <span class="hljs-title function_">skynet_module_instance_create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_module *)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">skynet_module_instance_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_module *, <span class="hljs-type">void</span> * inst, <span class="hljs-keyword">struct</span> skynet_context *ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * parm)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">skynet_module_instance_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_module *, <span class="hljs-type">void</span> *inst)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">skynet_module_instance_signal</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_module *, <span class="hljs-type">void</span> *inst, <span class="hljs-type">int</span> signal)</span>;<br></code></pre></td></tr></table></figure><p>模块提供接口<strong>调用</strong>函数,其中<strong>create,init</strong>在skynet_context_new中调用，<strong>release</strong>服务退出时调用,<strong>signal</strong>是API直接调用的。<br>写一个模块服务需要注意的是模块<strong>名字</strong>的文件名必须是（service_<strong>名字</strong>),接口名必须是(<strong>名字</strong>_接口名），可以参考<strong>service-src&#x2F;service_logger.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">logger_create()<br>logger_release()<br>logger_init()<br></code></pre></td></tr></table></figure><h1 id="n探skynet-message-message-queue-global-queue"><a href="#n探skynet-message-message-queue-global-queue" class="headerlink" title="n探skynet_message,message_queue,global_queue"></a>n探skynet_message,message_queue,global_queue</h1><ul><li><p><strong>skynet_message</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_message</span> &#123;</span><br><span class="hljs-type">uint32_t</span> source;  <span class="hljs-comment">//消息来源地址就是来源handle id</span><br><span class="hljs-type">int</span> session;  <span class="hljs-comment">//唯一会话id 一般用session来确定回复消息</span><br><span class="hljs-type">void</span> * data;  <span class="hljs-comment">//数据</span><br><span class="hljs-type">size_t</span> sz;  <span class="hljs-comment">//数据大小</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>以上是sknyet_message的组成，其中sz中最左边的一个字节用来存放type。比如<code>smsg.sz = len | ((size_t)PTYPE_TEXT &lt;&lt; MESSAGE_TYPE_SHIFT);</code></p></li><li><p><strong>message_queue</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message_queue</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span> <span class="hljs-comment">//多线程自旋锁</span><br><span class="hljs-type">uint32_t</span> handle;      <span class="hljs-comment">//绑定的ctx</span><br><span class="hljs-type">int</span> cap;  <span class="hljs-comment">//容量</span><br><span class="hljs-type">int</span> head;  <span class="hljs-comment">//队列头(pop)</span><br><span class="hljs-type">int</span> tail;  <span class="hljs-comment">//队列尾(push)</span><br><span class="hljs-type">int</span> release;          <span class="hljs-comment">//标记是否释放队列</span><br><span class="hljs-type">int</span> in_global;        <span class="hljs-comment">//是否在全局队列里</span><br><span class="hljs-type">int</span> overload;  <span class="hljs-comment">//待处理消息数量是否超过overload_threshold</span><br><span class="hljs-type">int</span> overload_threshold;<span class="hljs-comment">//默认1024</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_message</span> *<span class="hljs-title">queue</span>;</span> <span class="hljs-comment">//消息队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message_queue</span> *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//下一个message_queue</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/skynet_frame/mq.png"><br>message_queue初始容量为64，当待处理消息超过容量时会进行扩容，扩容现有容量的一倍，消息队列扩容后<strong>不支持缩容量</strong>。<br>当有worker_thread在pop消息时会检查消息队列长度是否大于overload_threshold，大于时会标记overload待处理消息数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> overload = skynet_mq_overload(q);<br><span class="hljs-keyword">if</span> (overload) &#123;<br>skynet_error(ctx, <span class="hljs-string">&quot;May overload, message queue length = %d&quot;</span>, overload);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果overload不等于0，会在处理消息之前打印一个日志，启到报警作用。<br>出现这个日志就说明这个服务的消息<strong>处理速度</strong>远远<strong>低于</strong>消息<strong>创建速度</strong>，要<strong>警惕</strong>了。</p></li></ul><p>当服务退出后，worker线程就不在处理该服务的消息，会将所以消息进行丢弃处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <br><span class="hljs-title function_">skynet_mq_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> message_queue *q, message_drop drop_func, <span class="hljs-type">void</span> *ud)</span> &#123;<br>SPIN_LOCK(q)<br><br><span class="hljs-keyword">if</span> (q-&gt;release) &#123;<br>SPIN_UNLOCK(q)<br>_drop_queue(q, drop_func, ud);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>skynet_globalmq_push(q);<br>SPIN_UNLOCK(q)<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>_drop_queue(<span class="hljs-keyword">struct</span> message_queue *q, message_drop drop_func, <span class="hljs-type">void</span> *ud) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_message</span> <span class="hljs-title">msg</span>;</span><br><span class="hljs-keyword">while</span>(!skynet_mq_pop(q, &amp;msg)) &#123;<br>drop_func(&amp;msg, ud);<br>&#125;<br>_release(q);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">drop_message</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_message *msg, <span class="hljs-type">void</span> *ud)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drop_t</span> *<span class="hljs-title">d</span> =</span> ud;<br>skynet_free(msg-&gt;data);<br><span class="hljs-type">uint32_t</span> source = d-&gt;handle;<br>assert(source);<br><span class="hljs-comment">// report error to the message source</span><br>skynet_send(<span class="hljs-literal">NULL</span>, source, msg-&gt;source, PTYPE_ERROR, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>丢弃处理是给消息来源方发送<code>PTYPE_ERROR</code>消息。</p><ul><li>global_queue<br>全局消息队列主要负责把次级消息队列(message_queue)串起来，供worker_thread消费执行。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">global_queue</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message_queue</span> *<span class="hljs-title">head</span>;</span> <span class="hljs-comment">//头部pop</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message_queue</span> *<span class="hljs-title">tail</span>;</span> <span class="hljs-comment">//尾部push</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure>此时可以再回头是看看架构图，应该就清晰许多了😊</li></ul><h1 id="n探skynet-context"><a href="#n探skynet-context" class="headerlink" title="n探skynet_context"></a>n探skynet_context</h1><p>skynet框架核心结构，源代码中遍地都是handle，其实就是服务的唯一id。<br>skynet_context是什么，它是sknyet中的主角，skynet中的所有服务都是skynet_context抽象的，可以说它是母体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_context</span> &#123;</span><br><span class="hljs-type">void</span> * instance;<span class="hljs-comment">//实例数据</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_module</span> * <span class="hljs-title">mod</span>;</span> <span class="hljs-comment">//绑定的服务模块</span><br><span class="hljs-type">void</span> * cb_ud;<span class="hljs-comment">//回调实例数据</span><br>skynet_cb cb;<span class="hljs-comment">//绑定的回调函数</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message_queue</span> *<span class="hljs-title">queue</span>;</span><span class="hljs-comment">//消息队列</span><br>FILE * logfile;<span class="hljs-comment">//服务消息处理日志</span><br><span class="hljs-type">uint64_t</span> cpu_cost;<span class="hljs-comment">// in microsec //cpu时间片总占用</span><br><span class="hljs-type">uint64_t</span> cpu_start;<span class="hljs-comment">// in microsec //辅助记录cpu_cost</span><br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>];<span class="hljs-comment">//lua-c api结果存储</span><br><span class="hljs-type">uint32_t</span> handle;    <span class="hljs-comment">//服务唯一id</span><br><span class="hljs-type">int</span> session_id;<span class="hljs-comment">//服务维护的会话id</span><br><span class="hljs-type">int</span> ref;<span class="hljs-comment">//引用计数</span><br><span class="hljs-type">int</span> message_count;<span class="hljs-comment">//处理消息总数</span><br><span class="hljs-type">bool</span> init;<span class="hljs-comment">//是否已经初始化</span><br><span class="hljs-type">bool</span> endless;<span class="hljs-comment">//是否可能存在死循环</span><br><span class="hljs-type">bool</span> profile;<span class="hljs-comment">//是否记录cpu_cost</span><br><br>CHECKCALLING_DECL<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以看到skynet_context依赖了skynet_module,和message_queue。</p><ul><li><p><strong>服务创建</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> skynet_context *<br><span class="hljs-title function_">skynet_context_new</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * name, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *param)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_module</span> * <span class="hljs-title">mod</span> =</span> skynet_module_query(name);<br><br><span class="hljs-keyword">if</span> (mod == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">void</span> *inst = skynet_module_instance_create(mod);<br><span class="hljs-keyword">if</span> (inst == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_context</span> * <span class="hljs-title">ctx</span> =</span> skynet_malloc(<span class="hljs-keyword">sizeof</span>(*ctx));<br>CHECKCALLING_INIT(ctx)<br><br>ctx-&gt;mod = mod;<br>ctx-&gt;instance = inst;<br>ctx-&gt;ref = <span class="hljs-number">2</span>;<br>ctx-&gt;cb = <span class="hljs-literal">NULL</span>;<br>ctx-&gt;cb_ud = <span class="hljs-literal">NULL</span>;<br>ctx-&gt;session_id = <span class="hljs-number">0</span>;<br>ctx-&gt;logfile = <span class="hljs-literal">NULL</span>;<br><br>ctx-&gt;init = <span class="hljs-literal">false</span>;<br>ctx-&gt;endless = <span class="hljs-literal">false</span>;<br><br>ctx-&gt;cpu_cost = <span class="hljs-number">0</span>;<br>ctx-&gt;cpu_start = <span class="hljs-number">0</span>;<br>ctx-&gt;message_count = <span class="hljs-number">0</span>;<br>ctx-&gt;profile = G_NODE.profile;<br><span class="hljs-comment">// Should set to 0 first to avoid skynet_handle_retireall get an uninitialized handle</span><br>ctx-&gt;handle = <span class="hljs-number">0</span>;<br>ctx-&gt;handle = skynet_handle_register(ctx);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message_queue</span> * <span class="hljs-title">queue</span> =</span> ctx-&gt;<span class="hljs-built_in">queue</span> = skynet_mq_create(ctx-&gt;handle);<br><span class="hljs-comment">// init function maybe use ctx-&gt;handle, so it must init at last</span><br>context_inc();<br><br>CHECKCALLING_BEGIN(ctx)<br><span class="hljs-type">int</span> r = skynet_module_instance_init(mod, inst, ctx, param);<br>CHECKCALLING_END(ctx)<br><span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_context</span> * <span class="hljs-title">ret</span> =</span> skynet_context_release(ctx);<br><span class="hljs-keyword">if</span> (ret) &#123;<br>ctx-&gt;init = <span class="hljs-literal">true</span>;<br>&#125;<br>skynet_globalmq_push(<span class="hljs-built_in">queue</span>);<br><span class="hljs-keyword">if</span> (ret) &#123;<br>skynet_error(ret, <span class="hljs-string">&quot;LAUNCH %s %s&quot;</span>, name, param ? param : <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>skynet_error(ctx, <span class="hljs-string">&quot;FAILED launch %s&quot;</span>, name);<br><span class="hljs-type">uint32_t</span> handle = ctx-&gt;handle;<br>skynet_context_release(ctx);<br>skynet_handle_retire(handle);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drop_t</span> <span class="hljs-title">d</span> =</span> &#123; handle &#125;;<br>skynet_mq_release(<span class="hljs-built_in">queue</span>, drop_message, &amp;d);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建服务会查询绑定<code>模块名称</code>对应的模块库，然后调用<code>create</code>接口，注册handle_id，调用<code>init</code>接口函数。<br>init接口返回0表示创建成功，返回其他表示创建失败，最终创建函数返回新ctx的指针。</p></li><li><p><strong>服务销毁</strong><br>skynet 销毁服务是通过<code>skynet_handle_retire(uint32_t handle)</code>函数执行的，不过它只是把长驻的ref给释放了，不一定在这个函数中销毁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> skynet_context *<br><span class="hljs-title function_">skynet_context_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_context *ctx)</span> &#123;<br><span class="hljs-keyword">if</span> (ATOM_DEC(&amp;ctx-&gt;ref) == <span class="hljs-number">0</span>) &#123;<br>delete_context(ctx);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ctx;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要当ctx.ref也就是引用计数为0时才真正销毁实例，保证多线程安全性。</p></li></ul><h1 id="n探skynet-handle"><a href="#n探skynet-handle" class="headerlink" title="n探skynet_handle"></a>n探skynet_handle</h1><p>如果说skynet_context是主角，这TM就是主角们的大别墅，看见上面skynet_context创建过程有什么,<code>skynet_handle_register</code>这TM就相当于去别墅里去拿个房卡，这个房卡就是skynet_context.handle。</p><ul><li><p><strong>房子多大</strong> 一开始有4个房间，当来了5个人，房子就扩建了，增加原来容量的一倍，人走了，别墅不缩，别墅最大容量为<strong>16,777,215</strong>。<br>如果用handle查询房间会很快<code>O1</code>的时间复杂度，因为云风采用的是hash结构存储。</p></li><li><p><strong>房间名</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> * <br><span class="hljs-title function_">skynet_handle_namehandle</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span> &#123;<br>rwlock_wlock(&amp;H-&gt;lock);<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> * ret = _insert_name(H, name, handle);<br><br>rwlock_wunlock(&amp;H-&gt;lock);<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以为服务创建一个别名，然后通过别名去找对应的handle实例,通过别名采用的是二分查找，时间复杂度是<code>log n</code>，名称对比还有一个<code>o n</code>的时间复杂度，所以我觉得能不用别名就不用，除非那个服务很特殊，比如logger日志服务。</p></li></ul><h1 id="n探timer-timer-event-time-node-time-list"><a href="#n探timer-timer-event-time-node-time-list" class="headerlink" title="n探timer,timer_event,time_node,time_list"></a>n探timer,timer_event,time_node,time_list</h1><p>skynet定时器非常的高效，因为timer_thread只需要关心即将到期的定时事件。</p><ul><li><p><strong>timer_event</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_event</span> &#123;</span><br><span class="hljs-type">uint32_t</span> handle;  <span class="hljs-comment">//注册的handle_id</span><br><span class="hljs-type">int</span> session;  <span class="hljs-comment">//绑定会话id</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>session id用于定时事件触发时，会通过消息的方式返回给handle实例，handle实例可以通过session确定定时任务触发。</p></li><li><p><strong>time_node</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_node</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_node</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//下一个节点</span><br><span class="hljs-type">uint32_t</span> expire;         <span class="hljs-comment">//过期时间</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>link_list</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_list</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_node</span> <span class="hljs-title">head</span>;</span>  <span class="hljs-comment">//链表头</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_node</span> *<span class="hljs-title">tail</span>;</span> <span class="hljs-comment">//链表尾</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>timer</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_list</span> <span class="hljs-title">near</span>[<span class="hljs-title">TIME_NEAR</span>];</span>  <span class="hljs-comment">//近期链表 </span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_list</span> <span class="hljs-title">t</span>[4][<span class="hljs-title">TIME_LEVEL</span>];</span> <span class="hljs-comment">//散列链表</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span><br><span class="hljs-type">uint32_t</span> time;                     <span class="hljs-comment">//服务启动时间累加滴答数</span><br><span class="hljs-type">uint32_t</span> starttime;   <span class="hljs-comment">//服务启动时间</span><br><span class="hljs-type">uint64_t</span> current;   <span class="hljs-comment">//当前服务启动时间累加的时间</span><br><span class="hljs-type">uint64_t</span> current_point;   <span class="hljs-comment">//当前的系统时间</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>近期链表：0-255个滴答数的定时任务会加入。特征：链表里都是触发时间相同的<br>散列链表：256 &lt;&#x3D; interval &lt;&#x3D; 0xffffffff 加入。   特征：链表里触发时间不一定相同<br>滴答数： skynet的定时器精度为0.01秒，按照它算法的定义就是0.01为1个滴答数。<br>到期时间：每一个加入的定时任务都会给它标记一个到期时间（加入时定时器当前滴答数+定时滴答数）。<br>skynet每次update都会取当前时间减去上次update时间获取流逝的滴答数。<br>然后把流逝的滴答数一滴答一滴答的执行。<br>执行过程中只关心到期间隔时间为 0 到 255 滴答数的处理。暂时不关注256 &lt;&#x3D; interval &lt;&#x3D; 0xffffffff。<br>滴答滴答流逝过程中，每走完一次0到255就会有一个对应的散列链表被移动（其实就是重新加入定时器，会重新给它们定位。<br><img src="/img/skynet_frame/time.png"><br>上图是我对定时器程序的简化模拟，我画的hash槽是7+3+3+3+3,skynet_time是255+64+64+64+64个哈希槽。<br>可以把near,t[0],t[1],t[2],t[3]想象成秒，分，时，天，周</p></li><li><p><strong>插入事件</strong> 可以说是给它找位置，秒内触发就插入秒，分内触发就插入分。</p></li><li><p><strong>调整过程</strong> 用机械表来举例子吧，比如这一分钟的秒针走完了到了12点的位置，此时分钟指针指向下一秒钟，就要把下一分钟的事件重新分配到秒指针上。<br>小时，周也是这样一个逻辑，比如秒针分针都到12点，触发时针指向跳动，就要把下一个小时的事件重新分配了。</p></li></ul><p>定时器只提供的注册没有提供注销，不过有sesion,在上层实现一个注销功能还是很简单的。</p><h1 id="n探socker-server-socker-message"><a href="#n探socker-server-socker-message" class="headerlink" title="n探socker_server,socker_message"></a>n探socker_server,socker_message</h1><p>socket是skynet比较复杂的模块，总代码量有2千1百行。<br>对TCP,UDP进行了封装。</p><ul><li><p><strong>TCP</strong> FreeBSD系统下用kqueue,linux系统下用epoll,skynet epoll采用的是水平触发模式。</p></li><li><p><strong>UDP</strong> skynet封装了链接，发送，读取回调等等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket</span> &#123;</span><br><span class="hljs-type">uintptr_t</span> opaque;                   <span class="hljs-comment">//handle</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wb_list</span> <span class="hljs-title">high</span>;</span><span class="hljs-comment">//高优先级写数据列表</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wb_list</span> <span class="hljs-title">low</span>;</span><span class="hljs-comment">//低优先级写数据列表</span><br><span class="hljs-type">int64_t</span> wb_size;<span class="hljs-comment">//写数据长度</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket_stat</span> <span class="hljs-title">stat</span>;</span><span class="hljs-comment">//链接统计信息 总读 总写 上次写的时间 上次读的时间</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">uint32_t</span> sending;<br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">uint8_t</span> protocol;<br><span class="hljs-type">uint8_t</span> type;<br><span class="hljs-type">uint16_t</span> udpconnecting;<br><span class="hljs-type">int64_t</span> warn_size;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-type">int</span> size;<br><span class="hljs-type">uint8_t</span> udp_address[UDP_ADDRESS_SIZE];<br>&#125; p;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">dw_lock</span>;</span><br><span class="hljs-type">int</span> dw_offset;<span class="hljs-comment">//偏移量n</span><br><span class="hljs-type">const</span> <span class="hljs-type">void</span> * dw_buffer;<span class="hljs-comment">//同步直写失败时，会把buffer clone到这，注册epoll写事件，异步再试</span><br><span class="hljs-type">size_t</span> dw_size;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket_server</span> &#123;</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">uint64_t</span> time;<br><span class="hljs-type">int</span> recvctrl_fd;                    <span class="hljs-comment">//socket thread读取管道</span><br><span class="hljs-type">int</span> sendctrl_fd;<span class="hljs-comment">//发送管道</span><br><span class="hljs-type">int</span> checkctrl;                      <span class="hljs-comment">//标记 在处理管道消息和读取网络消息来回切换</span><br>poll_fd event_fd;<span class="hljs-comment">//create epoll的 poll_fd</span><br><span class="hljs-type">int</span> alloc_id;<span class="hljs-comment">//用于分配id</span><br><span class="hljs-type">int</span> event_n;<span class="hljs-comment">//网络事件数量</span><br><span class="hljs-type">int</span> event_index;<span class="hljs-comment">//网络事件处理下标</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket_object_interface</span> <span class="hljs-title">soi</span>;</span> <span class="hljs-comment">//socket对象接口</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">event</span> <span class="hljs-title">ev</span>[<span class="hljs-title">MAX_EVENT</span>];</span><span class="hljs-comment">//待处理网络事件</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket</span> <span class="hljs-title">slot</span>[<span class="hljs-title">MAX_SOCKET</span>];</span><span class="hljs-comment">//socket 管理池</span><br><span class="hljs-type">char</span> buffer[MAX_INFO];<span class="hljs-comment">//tcp临时数据</span><br><span class="hljs-type">uint8_t</span> udpbuffer[MAX_UDP_PACKAGE]; <span class="hljs-comment">//udp数据</span><br>fd_set rfds;<br>&#125;;<br></code></pre></td></tr></table></figure><p>socket层主要围绕读写管道、socket事件通知、处理结果下发这三个流程做一些处理。</p></li><li><p><strong>读写管道</strong> 像listen,connenct,bind,start,close,shutdown,close,nodelay接口全部是先写到发送管道，之后socket thread再读取管道，解析请求，处理请求，再转发消息到handle实例中。</p></li><li><p><strong>socket</strong> epoll的accept,connect,read,write事件通知处理，然后再把结果转发到handle实例中.</p></li><li><p><strong>处理结果</strong> 转发给handle的消息定义了一系列类型，供上层去接送处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SKYNET_SOCKET_TYPE_DATA 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SKYNET_SOCKET_TYPE_CONNECT 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SKYNET_SOCKET_TYPE_CLOSE 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SKYNET_SOCKET_TYPE_ACCEPT 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SKYNET_SOCKET_TYPE_ERROR 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SKYNET_SOCKET_TYPE_UDP 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SKYNET_SOCKET_TYPE_WARNING 7</span><br></code></pre></td></tr></table></figure><p>非常典型的上层处理方案就是云风大佬自己封装的lua层的socket.lua。</p></li></ul><h1 id="n探worker-thread"><a href="#n探worker-thread" class="headerlink" title="n探worker_thread"></a>n探worker_thread</h1><p>负责从全局队列中拿出次级队列，再从次级队列拿出消息进行处理。<br>worker线程是多个的，数量是启动配置thread设置的，每个worker_thread会根据weight适配一次处理skynet_message的数量。</p><h1 id="n探timer-thread"><a href="#n探timer-thread" class="headerlink" title="n探timer_thread"></a>n探timer_thread</h1><p>timer线程是唯一的。<br>负责时间滴答数的向前推进、定时器事件的管理、到期事件的消息投递。</p><h1 id="n探socket-thread"><a href="#n探socket-thread" class="headerlink" title="n探socket_thread"></a>n探socket_thread</h1><p>socket线程也是唯一的。<br>负责读取处理管道请求、读取处理socket事件，然后转发消息到相关的handle实例中。</p><h1 id="n探monitor-thread"><a href="#n探monitor-thread" class="headerlink" title="n探monitor_thread"></a>n探monitor_thread</h1><p>monitor线程也是唯一的.<br>负责监控worker_thread在处理消息中，是否存在阻塞的情况，就是卡，或者死循环了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整体又捋了一遍后，我发现我对skynet c层的架构更清晰也更系统全面，零零散散的知识好像一下子整合起来的😊。</p>]]></content>
    
    
    <categories>
      
      <category>skynet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_frame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>actor模型在sknyet中的应用</title>
    <link href="/2023/05/07/skynet_frame/actor/"/>
    <url>/2023/05/07/skynet_frame/actor/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Actor模型由状态（State）、行为（Behavior）和邮箱（MailBox，可以认为是一个消息队列）三部分组成：</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>Actor模型中的状态指Actor对象的变量信息，状态由Actor模型自己管理，避免了并发环境下的锁和内存原子性等问题。</p><h2 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h2><p>Actor模型中的计算逻辑，通过Actor模型接收到的消息来改变Actor模型的状态。</p><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><p>邮箱是Actor和Actor之间的通信桥梁，邮箱内部通过FIFO（先入先出）消息队列来存储发送方Actor的消息，接收方Actor再从邮箱队列中获取消息。</p><p><img src="/img/skynet_frame/actor.png"></p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><p>每个actor实例的状态只能通过自己的行为修改。</p><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>单个actor实例同时只会有一个线程在执行，类似redis只用单线程去读写内存数据，避免了多线程下的并发问题，actor修改内部状态不需要加锁。</p><h2 id="异步消息处理"><a href="#异步消息处理" class="headerlink" title="异步消息处理"></a>异步消息处理</h2><p>actor发消息并不是直接调用接口，而是类似邮件在对方邮箱放一个邮件，之后actor实例会按照先入先出的规则去处理邮件。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>actor实例可以在运行中动态创建和释放。</p><h2 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h2><p>actor实例的断言不会导致整个程序崩溃。</p><h2 id="模型抽象"><a href="#模型抽象" class="headerlink" title="模型抽象"></a>模型抽象</h2><p>每个actor模型可以对自己的状态，行为进入定义。</p><h1 id="skynet对actor的应用"><a href="#skynet对actor的应用" class="headerlink" title="skynet对actor的应用"></a>skynet对actor的应用</h1><p>skynet通过抽象skynet_context结构体实现对actor模型的应用。</p><h2 id="skynet-context"><a href="#skynet-context" class="headerlink" title="skynet_context"></a>skynet_context</h2><p>贴一段skynet_context结构部分定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_context</span> &#123;</span> <br><span class="hljs-type">void</span> * instance;            <span class="hljs-comment">//实例数据</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_module</span> * <span class="hljs-title">mod</span>;</span> <span class="hljs-comment">//模型</span><br><span class="hljs-type">void</span> * cb_ud;               <span class="hljs-comment">//回调函数实例数据</span><br>skynet_cb cb;               <span class="hljs-comment">//消息回调函数</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">message_queue</span> *<span class="hljs-title">queue</span>;</span><span class="hljs-comment">//消息队列</span><br><span class="hljs-type">uint32_t</span> handle;            <span class="hljs-comment">//实例id</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="状态-1"><a href="#状态-1" class="headerlink" title="状态"></a>状态</h2><p>skynet_context中的<strong>instance</strong>和<strong>cb_ud</strong>指向的是实例数据，通常<strong>cb_ud</strong>指向的就是<strong>instance</strong>指向的数据，或者是<strong>instance</strong>中的成员数据，可以认为<strong>instance</strong>和<strong>cb_ud</strong>就是对actor模型的<strong>状态</strong>定义。</p><h2 id="行为-1"><a href="#行为-1" class="headerlink" title="行为"></a>行为</h2><p>woker线程把消息传入<strong>cb</strong>回调函数处理,跟着传入的还有<strong>cb_ud</strong>。</p><h2 id="邮箱-1"><a href="#邮箱-1" class="headerlink" title="邮箱"></a>邮箱</h2><p><strong>message_queue</strong>消息队列，存放待处理消息。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>skynet通过actor模型抽象skynet服务，赋予了服务之间强隔离性和原子性，避免了频繁加锁，使得在开发中能够高效简单实现业务，同时还能高效利用多核。</p><h1 id="延伸问题"><a href="#延伸问题" class="headerlink" title="延伸问题"></a>延伸问题</h1><h2 id="actor模块是如何定义的？"><a href="#actor模块是如何定义的？" class="headerlink" title="actor模块是如何定义的？"></a>actor模块是如何定义的？</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static void<span class="hljs-operator"> *</span><br><span class="hljs-operator"></span>get<span class="hljs-constructor">_api(<span class="hljs-params">struct</span> <span class="hljs-params">skynet_module</span> <span class="hljs-operator">*</span><span class="hljs-params">mod</span>, <span class="hljs-params">const</span> <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">api_name</span>)</span> &#123;<br>size_t name_size = strlen(<span class="hljs-keyword">mod</span>-&gt;name);<br>size_t api_size = strlen(api_name);<br><span class="hljs-built_in">char</span> tmp<span class="hljs-literal">[<span class="hljs-identifier">name_size</span> + <span class="hljs-identifier">api_size</span> + <span class="hljs-number">1</span>]</span>;<br>memcpy(tmp, <span class="hljs-keyword">mod</span>-&gt;name, name_size);<br>memcpy(tmp+name_size, api_name, api_size+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">char</span> *ptr = strrchr(tmp, <span class="hljs-character">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span> (ptr<span class="hljs-operator"> == </span>NULL) &#123;<br>ptr = tmp;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ptr = ptr + <span class="hljs-number">1</span>;<br>&#125;<br>return dlsym(<span class="hljs-keyword">mod</span>-&gt;<span class="hljs-keyword">module</span>, ptr);<br>&#125;<br><br>static <span class="hljs-built_in">int</span><br><span class="hljs-keyword">open</span><span class="hljs-constructor">_sym(<span class="hljs-params">struct</span> <span class="hljs-params">skynet_module</span> <span class="hljs-operator">*</span><span class="hljs-params">mod</span>)</span> &#123;<br><span class="hljs-keyword">mod</span>-&gt;create = get<span class="hljs-constructor">_api(<span class="hljs-params">mod</span>, <span class="hljs-string">&quot;_create&quot;</span>)</span>;<br><span class="hljs-keyword">mod</span>-&gt;init = get<span class="hljs-constructor">_api(<span class="hljs-params">mod</span>, <span class="hljs-string">&quot;_init&quot;</span>)</span>;<br><span class="hljs-keyword">mod</span>-&gt;release = get<span class="hljs-constructor">_api(<span class="hljs-params">mod</span>, <span class="hljs-string">&quot;_release&quot;</span>)</span>;<br><span class="hljs-keyword">mod</span>-&gt;signal = get<span class="hljs-constructor">_api(<span class="hljs-params">mod</span>, <span class="hljs-string">&quot;_signal&quot;</span>)</span>;<br><br>return <span class="hljs-keyword">mod</span>-&gt;init<span class="hljs-operator"> == </span>NULL;<br>&#125;<br></code></pre></td></tr></table></figure><p>skynet c服务模块约定需要实现<code>create</code> <code>init</code> <code>release</code>  <code>signal</code>四个API接口。<br><code>create</code>负责创建实例。<br><code>init</code>负责初始化，一般是绑定<code>cb</code> <code>cb_ud</code>,返回0表示初始成功，其他表示失败。<br><code>release</code>释放实例时调用。<br><code>signal</code>通过API直接调用，接口实现需要保证线程安全。</p><h2 id="actor实例（状态）的生命周期？"><a href="#actor实例（状态）的生命周期？" class="headerlink" title="actor实例（状态）的生命周期？"></a>actor实例（状态）的生命周期？</h2><p>skynet_context实例的由<code>skynet_context_new</code>函数创建，该函数先后调用了<code>create</code>,<code>init</code>。<br>由<code>skynet_context_release</code>释放，调用skynet_context_release并不是立马释放ctx，而是原子操作<code>ctx.ref</code>减一以后为0才释放，每个操作ctx的api都需要先给ctx引用计数+1,操作完以后调用skynet_context_release释放引用计数-1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//从通过handle_id 拿ctx实例</span><br><span class="hljs-keyword">struct</span> skynet_context * <br><span class="hljs-title function_">skynet_handle_grab</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> handle)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">handle_storage</span> *<span class="hljs-title">s</span> =</span> H;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_context</span> * <span class="hljs-title">result</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>rwlock_rlock(&amp;s-&gt;lock);<br><br><span class="hljs-type">uint32_t</span> hash = handle &amp; (s-&gt;slot_size<span class="hljs-number">-1</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_context</span> * <span class="hljs-title">ctx</span> =</span> s-&gt;slot[hash];<br><span class="hljs-keyword">if</span> (ctx &amp;&amp; skynet_context_handle(ctx) == handle) &#123;<br>result = ctx;<br>skynet_context_grab(result);<br>&#125;<br><br>rwlock_runlock(&amp;s-&gt;lock);<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment">//加引用计算</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">skynet_context_grab</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_context *ctx)</span> &#123;<br>ATOM_INC(&amp;ctx-&gt;ref);<span class="hljs-comment">//原子操作+1</span><br>&#125;<br><span class="hljs-comment">//减引用计数</span><br><span class="hljs-keyword">struct</span> skynet_context *<br><span class="hljs-title function_">skynet_context_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_context *ctx)</span> &#123;<br><span class="hljs-keyword">if</span> (ATOM_DEC(&amp;ctx-&gt;ref) == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//原子操作-1</span><br>delete_context(ctx);<span class="hljs-comment">//释放ctx</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ctx;<br>&#125;<br><span class="hljs-comment">//在ctx实例中插入一条消息</span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">skynet_context_push</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> handle, <span class="hljs-keyword">struct</span> skynet_message *message)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_context</span> * <span class="hljs-title">ctx</span> =</span> skynet_handle_grab(handle);<span class="hljs-comment">//加引用</span><br><span class="hljs-keyword">if</span> (ctx == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>skynet_mq_push(ctx-&gt;<span class="hljs-built_in">queue</span>, message);<br>skynet_context_release(ctx);<span class="hljs-comment">//操作完减引用</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="为什么要用引用计数的方式管理ctx实例的生命周期？"><a href="#为什么要用引用计数的方式管理ctx实例的生命周期？" class="headerlink" title="为什么要用引用计数的方式管理ctx实例的生命周期？"></a>为什么要用引用计数的方式管理ctx实例的生命周期？</h2><p>skynet是多线程的框架，试想一下如下场景：2个线程同时操作ctx实例。A线程释放，B线程想给ctx插入一条消息。就会出现非常严重的问题访问<strong>野指针</strong>，也就是指针指向的内存已经释放了。</p><p><img src="/img/skynet_frame/ctx_life.png"></p><h2 id="actor队列（邮箱）消息的投递与消费？"><a href="#actor队列（邮箱）消息的投递与消费？" class="headerlink" title="actor队列（邮箱）消息的投递与消费？"></a>actor队列（邮箱）消息的投递与消费？</h2><p>消息通过<code>skynet_context_push</code>API投递。<br>由ctx在init中绑定的cb函数处理。<br>这里以skynet自带的logger服务为例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//skyent_error.c 部分代码，传递消息</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_message</span> <span class="hljs-title">smsg</span>;</span><br><span class="hljs-keyword">if</span> (context == <span class="hljs-literal">NULL</span>) &#123;<br>smsg.source = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>smsg.source = skynet_context_handle(context);<br>&#125;<br>smsg.session = <span class="hljs-number">0</span>;<br>smsg.data = data;<br>smsg.sz = len | ((<span class="hljs-type">size_t</span>)PTYPE_TEXT &lt;&lt; MESSAGE_TYPE_SHIFT);<br>skynet_context_push(logger, &amp;smsg);<br><br><span class="hljs-comment">//service_logger.c 部分代码</span><br><br><span class="hljs-comment">//消息回调处理函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">logger_cb</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_context * context, <span class="hljs-type">void</span> *ud, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> session, <span class="hljs-type">uint32_t</span> source, <span class="hljs-type">const</span> <span class="hljs-type">void</span> * msg, <span class="hljs-type">size_t</span> sz)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">logger</span> * <span class="hljs-title">inst</span> =</span> ud;<br><span class="hljs-keyword">switch</span> (type) &#123;<br><span class="hljs-keyword">case</span> PTYPE_SYSTEM:<br><span class="hljs-keyword">if</span> (inst-&gt;filename) &#123;<br>inst-&gt;handle = freopen(inst-&gt;filename, <span class="hljs-string">&quot;a&quot;</span>, inst-&gt;handle);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PTYPE_TEXT:<br><span class="hljs-keyword">if</span> (inst-&gt;filename) &#123;<br><span class="hljs-type">char</span> tmp[SIZETIMEFMT];<br><span class="hljs-type">int</span> csec = timestring(ud, tmp);<br><span class="hljs-built_in">fprintf</span>(inst-&gt;handle, <span class="hljs-string">&quot;%s.%02d &quot;</span>, tmp, csec);<br>&#125;<br><span class="hljs-built_in">fprintf</span>(inst-&gt;handle, <span class="hljs-string">&quot;[:%08x] &quot;</span>, source);<br>fwrite(msg, sz , <span class="hljs-number">1</span>, inst-&gt;handle);<br><span class="hljs-built_in">fprintf</span>(inst-&gt;handle, <span class="hljs-string">&quot;\n&quot;</span>);<br>fflush(inst-&gt;handle);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">logger_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> logger * inst, <span class="hljs-keyword">struct</span> skynet_context *ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * parm)</span> &#123;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> * r = skynet_command(ctx, <span class="hljs-string">&quot;STARTTIME&quot;</span>, <span class="hljs-literal">NULL</span>);<br>inst-&gt;starttime = strtoul(r, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> (parm) &#123;<br>inst-&gt;handle = fopen(parm,<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">if</span> (inst-&gt;handle == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>inst-&gt;filename = skynet_malloc(<span class="hljs-built_in">strlen</span>(parm)+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">strcpy</span>(inst-&gt;filename, parm);<br>inst-&gt;close = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>inst-&gt;handle = <span class="hljs-built_in">stdout</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (inst-&gt;handle) &#123;<br>skynet_callback(ctx, inst, logger_cb); <span class="hljs-comment">//注册消息回调函数</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>init</code>绑定<code>logger_cb</code>函数，之后如果有通过<code>skynet_context_push</code>投递消息给ctx实例，将异步调用<code>logger_cb</code>函数。</p><h2 id="如何新建一个actor模块并且处理消息（行为）？"><a href="#如何新建一个actor模块并且处理消息（行为）？" class="headerlink" title="如何新建一个actor模块并且处理消息（行为）？"></a>如何新建一个actor模块并且处理消息（行为）？</h2><p>我以新建一个<strong>dber</strong>模块为例子。<br>这个服务非常简单，用于存储最新的字符串数据(<strong>状态</strong>)，提供<code>set</code> <code>get</code>方法(<strong>行为</strong>)。<br>我们需要先定义<strong>状态</strong>数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dber</span> &#123;</span><br><span class="hljs-type">char</span> * value;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后实现 <code>_create</code> <code>_release</code> <code>_init</code> <code>_signal</code> 接口。<br>其中 <code>_signal</code>接口暂时用不到，可以不实现。<br>编写模块对<strong>模块</strong>的<strong>文件名</strong>和<strong>接口前缀名</strong>有强约束性。<br>比如我们<strong>dber</strong>模块的文件名只能写成：<code>service_dber.c</code>,文件名格式是<code>service_</code>拼接<strong>模块名称</strong><code>dber</code>。<br>接口函数名就是<strong>模块</strong>名称拼接接口名称，比如<code>_create</code>就要写成<code>dber_create</code>。<br>这样做的目的是为了方便编译、加载模块动态库、接口函数查找绑定、actor模块启动。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-keyword">define</span> CSERVICE_TEMP<br>  $<span class="hljs-variable">$(CSERVICE_PATH)</span>/$(1).so : service-src/service_$(1).c | $<span class="hljs-variable">$(CSERVICE_PATH)</span><br>$<span class="hljs-variable">$(CC)</span> $<span class="hljs-variable">$(CFLAGS)</span> $<span class="hljs-variable">$(SHARED)</span> $<span class="hljs-variable">$&lt;</span> -o $<span class="hljs-variable">$@</span> -Iskynet/skynet-src<br><span class="hljs-keyword">endef</span><br><span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> v, <span class="hljs-variable">$(CSERVICE)</span>, $(<span class="hljs-built_in">eval</span> $(<span class="hljs-built_in">call</span> CSERVICE_TEMP,<span class="hljs-variable">$(v)</span>)</span>))<br></code></pre></td></tr></table></figure><p>编译service,通过文件名的约束，可以做到统一编译，只需要增加CSERVICE<strong>模块名称</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<br><span class="hljs-title function_">get_api</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_module *mod, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *api_name)</span> &#123;<br><span class="hljs-type">size_t</span> name_size = <span class="hljs-built_in">strlen</span>(mod-&gt;name);<br><span class="hljs-type">size_t</span> api_size = <span class="hljs-built_in">strlen</span>(api_name);<br><span class="hljs-type">char</span> tmp[name_size + api_size + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">memcpy</span>(tmp, mod-&gt;name, name_size);<br><span class="hljs-built_in">memcpy</span>(tmp+name_size, api_name, api_size+<span class="hljs-number">1</span>);<br><span class="hljs-type">char</span> *ptr = <span class="hljs-built_in">strrchr</span>(tmp, <span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span> (ptr == <span class="hljs-literal">NULL</span>) &#123;<br>ptr = tmp;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ptr = ptr + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> dlsym(mod-&gt;module, ptr);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">open_sym</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_module *mod)</span> &#123;<br>mod-&gt;create = get_api(mod, <span class="hljs-string">&quot;_create&quot;</span>);<br>mod-&gt;init = get_api(mod, <span class="hljs-string">&quot;_init&quot;</span>);<br>mod-&gt;release = get_api(mod, <span class="hljs-string">&quot;_release&quot;</span>);<br>mod-&gt;signal = get_api(mod, <span class="hljs-string">&quot;_signal&quot;</span>);<br><br><span class="hljs-keyword">return</span> mod-&gt;init == <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>加载接口动态库，通过<strong>模块名称</strong>拼接<strong>接口名称</strong>查找API并绑定到<code>skynet_module</code>结构实例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_module</span> * </span><br><span class="hljs-class">_<span class="hljs-title">query</span>(<span class="hljs-title">const</span> <span class="hljs-title">char</span> * <span class="hljs-title">name</span>) &#123;</span><br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;M-&gt;count;i++) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(M-&gt;m[i].name,name)==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;M-&gt;m[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> skynet_module * <br><span class="hljs-title function_">skynet_module_query</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * name)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_module</span> * <span class="hljs-title">result</span> =</span> _query(name);<br><span class="hljs-keyword">if</span> (result)<br><span class="hljs-keyword">return</span> result;<br><br>SPIN_LOCK(M)<br><br>result = _query(name); <span class="hljs-comment">// double check</span><br><br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">NULL</span> &amp;&amp; M-&gt;count &lt; MAX_MODULE_TYPE) &#123;<br><span class="hljs-type">int</span> index = M-&gt;count;<br><span class="hljs-type">void</span> * dl = _try_open(M,name);<br><span class="hljs-keyword">if</span> (dl) &#123;<br>M-&gt;m[index].name = name;<br>M-&gt;m[index].module = dl;<br><br><span class="hljs-keyword">if</span> (open_sym(&amp;M-&gt;m[index]) == <span class="hljs-number">0</span>) &#123;<br>M-&gt;m[index].name = skynet_strdup(name);<br>M-&gt;count ++;<br>result = &amp;M-&gt;m[index];<br>&#125;<br>&#125;<br>&#125;<br><br>SPIN_UNLOCK(M)<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在启动一个该模块actor需要通过模块名称查找对应模块的API接口。<br>明白了为何要做这种名称约束之后，我们再来实现相关接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;skynet.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;skynet_mq.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;skynet_server.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dber</span> &#123;</span><br><span class="hljs-type">char</span> * value;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> dber *<br><span class="hljs-title function_">dber_create</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dber</span> * <span class="hljs-title">inst</span> =</span> skynet_malloc(<span class="hljs-keyword">sizeof</span>(*inst));<br>inst-&gt;value = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> inst;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">dber_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dber * inst)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != inst-&gt;value) &#123;<br>skynet_free(inst-&gt;value);<br>&#125;<br>skynet_free(inst);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">dber_cb</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> skynet_context * context, <span class="hljs-type">void</span> *ud, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> session, <span class="hljs-type">uint32_t</span> source, <span class="hljs-type">const</span> <span class="hljs-type">void</span> * msg, <span class="hljs-type">size_t</span> sz)</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dber</span> * <span class="hljs-title">inst</span> =</span> ud;<br><span class="hljs-keyword">switch</span> (type) &#123;<br><span class="hljs-keyword">case</span> PTYPE_SYSTEM:<br><span class="hljs-comment">//set</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != inst-&gt;value) &#123;<br>skynet_free(inst-&gt;value);<br>&#125;<br>inst-&gt;value = skynet_malloc(<span class="hljs-built_in">strlen</span>(msg) + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">strcpy</span>(inst-&gt;value,msg);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PTYPE_TEXT:<br><span class="hljs-comment">//get</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skynet_message</span> <span class="hljs-title">smsg</span>;</span><br>smsg.source = skynet_context_handle(context);<br>smsg.session = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> len = <span class="hljs-built_in">strlen</span>(inst-&gt;value) + <span class="hljs-number">1</span>;<br>smsg.data = skynet_malloc(len);<br><span class="hljs-built_in">strcpy</span>(smsg.data,inst-&gt;value);<br>smsg.sz = len;<br>skynet_context_push(source,&amp;smsg);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">dber_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dber * inst, <span class="hljs-keyword">struct</span> skynet_context *ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * parm)</span> &#123;<br>skynet_callback(ctx, inst, dber_cb);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在<code>create</code>中创建数据(<strong>状态</strong>)<br><code>init</code>中注册回调函数<code>dber_cb</code>;<br><code>release</code>中去释放内存占用。<br>dber_cb中我简单的约束<code>PTYPE_SYSTEM</code>消息类型为<code>set</code>方法(<strong>行为</strong>)<br><code>PTYPE_TEXT</code>消息类型为<code>get</code>方法(<strong>行为</strong>)</p><p>到此我们把这个服务模块写好了。<br>我们把它放在<code>skynet/service-src</code>目录下。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">CSERVICE</span> <span class="hljs-operator">=</span> snlua logger gate harbor dber<br></code></pre></td></tr></table></figure><p>在makefile中CSERVICE下添加dber<br>之后编译一下skynet,如果编译成功,就会在<code>skynet/cservice</code>目录下看见dber.so动态库文件。</p><p>之后我们编写一个非常简单的skynet lua服务。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> skynet = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet&quot;</span><br><span class="hljs-built_in">require</span> <span class="hljs-string">&quot;skynet.manager&quot;</span><br><br>skynet.register_protocol(&#123;<br>name = <span class="hljs-string">&quot;system&quot;</span>,<br>id = skynet.PTYPE_SYSTEM,<br>pack = skynet.packstring,<br><span class="hljs-built_in">unpack</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span> <span class="hljs-keyword">return</span> ... <span class="hljs-keyword">end</span>,<br>dispatch = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;recv system msg:&quot;</span>,...)<br><span class="hljs-keyword">end</span>,<br>&#125;)<br><br>skynet.register_protocol(&#123;<br>name = <span class="hljs-string">&quot;text&quot;</span>,<br>id = skynet.PTYPE_TEXT,<br>pack = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span> <span class="hljs-keyword">return</span> ... <span class="hljs-keyword">end</span>,<br><span class="hljs-built_in">unpack</span> = skynet.<span class="hljs-built_in">tostring</span>,<br>dispatch = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;recv text msg:&quot;</span>,...)<br><span class="hljs-keyword">end</span>,<br>&#125;)<br><br>skynet.start(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;dber_test main run&quot;</span>)<br><span class="hljs-keyword">local</span> dber = skynet.launch(<span class="hljs-string">&quot;dber&quot;</span>)<br>skynet.<span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;handle:&quot;</span>,dber)<br>skynet.<span class="hljs-built_in">error</span>(skynet.send(dber,skynet.PTYPE_SYSTEM,<span class="hljs-string">&quot;hello dber&quot;</span>))<br>skynet.<span class="hljs-built_in">error</span>(skynet.send(dber,skynet.PTYPE_TEXT,<span class="hljs-string">&quot;&quot;</span>))<br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>先注册<code>system</code>,<code>text</code>消息处理函数。<br>在start中我们launch <code>dber</code>模块服务。<br>然后给dber服务发送<code>PTYPE_SYSTEM</code>消息传递设置 <code>hello dber</code>字符串。<br>再发送<code>PTYPE_TEXT</code>消息获取字符串。<br><code>dber</code>服务接收到以后，会给<code>PTYPE_TEXT</code>消息发送者发送<code>PTYPE_TEXT</code>消息。<br><img src="/img/skynet_frame/dber.bmp"><br>至此我们完成对skynet actor c模块服务的创建使用😊</p>]]></content>
    
    
    <categories>
      
      <category>skynet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>skynet_frame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么写blog</title>
    <link href="/2023/05/07/think/whywrite/"/>
    <url>/2023/05/07/think/whywrite/</url>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>为了总结，强化学习，以及分享和记录。 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>日常工作学习中零零散散学习到的知识不成体系，有时候学了又感觉没学，我觉得原因就是没有深度思考，一味求快，写总结会让我们对知识进行深度思考，需要总结出学习到的知识能解决什么样的问题，先提出<strong>问题场景</strong>,提供 <strong>解决方案</strong> 总结出  <strong>知识特点</strong> 再扩展 <strong>类同知识</strong> 进行 <strong>优缺点</strong> 对比 从而 在脑子构建出 <strong>知识体系网络</strong>。</p><h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p>知识学到了，自己会用，但是可能只是用到了需要的部分，比较片面，我想以写blog的方式，来发现自己对哪一块还不是很清楚。需要再加深学习。</p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>利用<strong>费曼学习法</strong>，来验证自己的学习的成果，验证自己学的好不好最好的办法就是教会别人。过程中还能补充遗漏的知识点。</p><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p><strong>好记性不如烂笔头</strong>。忘记了查自己的笔记会比查网络上别人的笔记要<strong>快</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>一些想法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一些想法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
